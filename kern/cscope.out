cscope 15 $HOME/os161/src/kern               0000465051
	@arch/mips/include/current.h

30 #i‚de‡
_MIPS_CURRENT_H_


31 
	#_MIPS_CURRENT_H_


	)

62 #ifde‡
__GNUC__


63 
thªad
 *
cuπhªad
 
__asm
("$23");

67 #unde‡
__NEED_CURTHREAD


68 
	#__NEED_CURCPU


	)

71 
	#INIT_CURCPU
(
˝u
, 
thªad
Ë(
cuπhªad
 = (thªad), 
cur˝u
 = (˝u))

	)

	@arch/mips/include/elf.h

30 #i‚de‡
_MIPS_ELF_H_


31 
	#_MIPS_ELF_H_


	)

39 
	#EM_MACHINE
 
EM_MIPS


	)

42 
	#R_MIPS_NONE
 0

	)

43 
	#R_MIPS_16
 1

	)

44 
	#R_MIPS_32
 2

	)

45 
	#R_MIPS_REL32
 3

	)

46 
	#R_MIPS_26
 4

	)

47 
	#R_MIPS_HI16
 5

	)

48 
	#R_MIPS_LO16
 6

	)

49 
	#R_MIPS_GPREL16
 7

	)

50 
	#R_MIPS_LITERAL
 8

	)

51 
	#R_MIPS_GOT16
 9

	)

52 
	#R_MIPS_PC16
 10

	)

53 
	#R_MIPS_CALL16
 11

	)

54 
	#R_MIPS_GPREL32
 12

	)

	@arch/mips/include/kern/endian.h

30 #i‚de‡
_KERN_MIPS_ENDIAN_H_


31 
	#_KERN_MIPS_ENDIAN_H_


	)

42 
	#_BYTE_ORDER
 
_BIG_ENDIAN


	)

	@arch/mips/include/kern/regdefs.h

36 #i‚de‡
_KERN_MIPS_REGDEFS_H_


37 
	#_KERN_MIPS_REGDEFS_H_


	)

40 
	#z0
 
$0


	)

41 
	#AT
 
$1


	)

42 
	#v0
 
$2


	)

43 
	#v1
 
$3


	)

44 
	#a0
 
$4


	)

45 
	#a1
 
$5


	)

46 
	#a2
 
$6


	)

47 
	#a3
 
$7


	)

48 
	#t0
 
$8


	)

49 
	#t1
 
$9


	)

50 
	#t2
 
$10


	)

51 
	#t3
 
$11


	)

52 
	#t4
 
$12


	)

53 
	#t5
 
$13


	)

54 
	#t6
 
$14


	)

55 
	#t7
 
$15


	)

56 
	#s0
 
$16


	)

57 
	#s1
 
$17


	)

58 
	#s2
 
$18


	)

59 
	#s3
 
$19


	)

60 
	#s4
 
$20


	)

61 
	#s5
 
$21


	)

62 
	#s6
 
$22


	)

63 
	#s7
 
$23


	)

64 
	#t8
 
$24


	)

65 
	#t9
 
$25


	)

66 
	#k0
 
$26


	)

67 
	#k1
 
$27


	)

68 
	#gp
 
$28


	)

69 
	#•
 
$29


	)

70 
	#s8
 
$30


	)

71 
	#ø
 
$31


	)

	@arch/mips/include/kern/setjmp.h

30 #i‚de‡
_MIPS_SETJMP_H_


31 
	#_MIPS_SETJMP_H_


	)

41 
	#__JB_REGS
 11

	)

44 
uöt32_t
 
	tjmp_buf
[
__JB_REGS
];

	@arch/mips/include/kern/signal.h

31 #i‚de‡
_KERN_MIPS_SIGNAL_H_


32 
	#_KERN_MIPS_SIGNAL_H_


	)

41 
	ssigc⁄ãxt
 {

	@arch/mips/include/kern/types.h

30 #i‚de‡
_KERN_MIPS_TYPES_H_


31 
	#_KERN_MIPS_TYPES_H_


	)

43 
	t__i8
;

44 
	t__i16
;

45 
	t__i32
;

46 
	t__i64
;

48 
	t__u8
;

49 
	t__u16
;

50 
	t__u32
;

51 
	t__u64
;

54 
	t__öçå_t
;

55 
	t__uöçå_t
;

65 
	t__size_t
;

66 
	t__ssize_t
;

67 
	t__±rdiff_t
;

69 
	t__size_t
;

70 
	t__ssize_t
;

71 
	t__±rdiff_t
;

75 
	#__CHAR_BIT
 8

	)

	@arch/mips/include/membar.h

30 #i‚de‡
_MIPS_MEMBAR_H_


31 
	#_MIPS_MEMBAR_H_


	)

43 
MEMBAR_INLINE


45 
	$memb¨_™y_™y
()

47 
__asm
 volatile(

55 
	}
}

57 
MEMBAR_INLINE
 
	$memb¨_lﬂd_lﬂd
(Ë{ 
	`memb¨_™y_™y
(); 
	}
}

58 
MEMBAR_INLINE
 
	$memb¨_°‹e_°‹e
(Ë{ 
	`memb¨_™y_™y
(); 
	}
}

59 
MEMBAR_INLINE
 
	$memb¨_°‹e_™y
(Ë{ 
	`memb¨_™y_™y
(); 
	}
}

60 
MEMBAR_INLINE
 
	$memb¨_™y_°‹e
(Ë{ 
	`memb¨_™y_™y
(); 
	}
}

	@arch/mips/include/specialreg.h

30 #i‚de‡
_MIPS_SPECIALREG_H_


31 
	#_MIPS_SPECIALREG_H_


	)

37 
	#c0_ödex
 
$0


	)

38 
	#c0_øndom
 
$1


	)

39 
	#c0_íåylo
 
$2


	)

42 
	#c0_c⁄ãxt
 
$4


	)

45 
	#c0_vaddr
 
$8


	)

46 
	#c0_cou¡
 
$9


	)

47 
	#c0_íåyhi
 
$10


	)

48 
	#c0_com∑ª
 
$11


	)

49 
	#c0_°©us
 
$12


	)

50 
	#c0_ˇu£
 
$13


	)

51 
	#c0_ïc
 
$14


	)

52 
	#c0_¥id
 
$15


	)

61 
	#CST_IEc
 0x00000001

	)

62 
	#CST_KUc
 0x00000002

	)

63 
	#CST_IEp
 0x00000004

	)

64 
	#CST_KUp
 0x00000008

	)

65 
	#CST_IEo
 0x00000010

	)

66 
	#CST_KUo
 0x00000020

	)

67 
	#CST_MODEMASK
 0x0000003‡

	)

68 
	#CST_IRQMASK
 0x0000ff00

	)

69 
	#CST_BEV
 0x00400000

	)

74 
	#CCA_UTLB
 0x00000001

	)

75 
	#CCA_CODE
 0x0000003¯

	)

76 
	#CCA_IRQS
 0x0000ff00

	)

77 
	#CCA_COPN
 0x30000000

	)

78 
	#CCA_JD
 0x80000000

	)

80 
	#CCA_CODESHIFT
 2

	)

85 
	#CIN_P
 0x80000000

	)

86 
	#CIN_INDEX
 0x00003f00

	)

88 
	#CIN_INDEXSHIFT
 8

	)

105 
	#CTX_VSHIFT
 0x001ffff¯

	)

106 
	#CTX_PTBASE
 0xf„00000

	)

108 
	#CTX_PTBASESHIFT
 21

	)

113 
	#EXADDR_UTLB
 0x80000000

	)

114 
	#EXADDR_GENERAL
 0x80000080

	)

	@arch/mips/include/spinlock.h

30 #i‚de‡
_MIPS_SPINLOCK_H_


31 
	#_MIPS_SPINLOCK_H_


	)

33 
	~<cdefs.h
>

37 
	t•ölock_d©a_t
;

40 
	#SPINLOCK_DATA_INITIALIZER
 0

	)

43 
SPINLOCK_INLINE


44 
•ölock_d©a_£t
(vﬁ©ûê
•ölock_d©a_t
 *
sd
, 
vÆ
);

45 
SPINLOCK_INLINE


46 
•ölock_d©a_t
 
•ölock_d©a_gë
(vﬁ©ûê•ölock_d©a_à*
sd
);

47 
SPINLOCK_INLINE


48 
•ölock_d©a_t
 
•ölock_d©a_ã°™d£t
(vﬁ©ûê•ölock_d©a_à*
sd
);

52 
SPINLOCK_INLINE


54 
	$•ölock_d©a_£t
(vﬁ©ûê
•ölock_d©a_t
 *
sd
, 
vÆ
)

56 *
sd
 = 
vÆ
;

57 
	}
}

59 
SPINLOCK_INLINE


60 
•ölock_d©a_t


61 
	$•ölock_d©a_gë
(vﬁ©ûê
•ölock_d©a_t
 *
sd
)

63  *
sd
;

64 
	}
}

66 
SPINLOCK_INLINE


67 
•ölock_d©a_t


68 
	$•ölock_d©a_ã°™d£t
(vﬁ©ûê
•ölock_d©a_t
 *
sd
)

70 
•ölock_d©a_t
 
x
;

71 
•ölock_d©a_t
 
y
;

84 
y
 = 1;

85 
__asm
 volatile(

92 : "=&r" (
x
), "+r" (
y
Ë: "r" (
sd
));

93 i‡(
y
 == 0) {

96  
x
;

97 
	}
}

	@arch/mips/include/thread.h

30 #i‚de‡
_MIPS_THREAD_H_


31 
	#_MIPS_THREAD_H_


	)

38 
	~<£tjmp.h
>

40 (*
	tbadÁu…func_t
)();

42 
	sthªad_machdï
 {

43 
badÁu…func_t
 
tm_badÁu…func
;

44 
jmp_buf
 
tm_c›yjmp
;

	@arch/mips/include/tlb.h

30 #i‚de‡
_MIPS_TLB_H_


31 
	#_MIPS_TLB_H_


	)

58 
éb_øndom
(
uöt32_t
 
íåyhi
, uöt32_à
íåylo
);

59 
éb_wrôe
(
uöt32_t
 
íåyhi
, uöt32_à
íåylo
, uöt32_à
ödex
);

60 
éb_ªad
(
uöt32_t
 *
íåyhi
, uöt32_à*
íåylo
, uöt32_à
ödex
);

61 
éb_¥obe
(
uöt32_t
 
íåyhi
, uöt32_à
íåylo
);

80 
	#TLBHI_VPAGE
 0xfffff000

	)

84 
	#TLBLO_PPAGE
 0xfffff000

	)

85 
	#TLBLO_NOCACHE
 0x00000800

	)

86 
	#TLBLO_DIRTY
 0x00000400

	)

87 
	#TLBLO_VALID
 0x00000200

	)

95 
	#TLBHI_INVALID
(
íåyno
Ë((0x80000+”¡ryno))<<12)

	)

96 
	#TLBLO_INVALID
(Ë(0)

	)

102 
	#NUM_TLB
 64

	)

	@arch/mips/include/trapframe.h

30 #i‚de‡
_MIPS_TRAPFRAME_H_


31 
	#_MIPS_TRAPFRAME_H_


	)

40 
	så≠‰ame
 {

41 
uöt32_t
 
	mtf_vaddr
;

42 
uöt32_t
 
	mtf_°©us
;

43 
uöt32_t
 
	mtf_ˇu£
;

44 
uöt32_t
 
	mtf_lo
;

45 
uöt32_t
 
	mtf_hi
;

46 
uöt32_t
 
	mtf_ø
;

47 
uöt32_t
 
	mtf_©
;

48 
uöt32_t
 
	mtf_v0
;

49 
uöt32_t
 
	mtf_v1
;

50 
uöt32_t
 
	mtf_a0
;

51 
uöt32_t
 
	mtf_a1
;

52 
uöt32_t
 
	mtf_a2
;

53 
uöt32_t
 
	mtf_a3
;

54 
uöt32_t
 
	mtf_t0
;

55 
uöt32_t
 
	mtf_t1
;

56 
uöt32_t
 
	mtf_t2
;

57 
uöt32_t
 
	mtf_t3
;

58 
uöt32_t
 
	mtf_t4
;

59 
uöt32_t
 
	mtf_t5
;

60 
uöt32_t
 
	mtf_t6
;

61 
uöt32_t
 
	mtf_t7
;

62 
uöt32_t
 
	mtf_s0
;

63 
uöt32_t
 
	mtf_s1
;

64 
uöt32_t
 
	mtf_s2
;

65 
uöt32_t
 
	mtf_s3
;

66 
uöt32_t
 
	mtf_s4
;

67 
uöt32_t
 
	mtf_s5
;

68 
uöt32_t
 
	mtf_s6
;

69 
uöt32_t
 
	mtf_s7
;

70 
uöt32_t
 
	mtf_t8
;

71 
uöt32_t
 
	mtf_t9
;

72 
uöt32_t
 
	mtf_k0
;

73 
uöt32_t
 
	mtf_k1
;

74 
uöt32_t
 
	mtf_gp
;

75 
uöt32_t
 
	mtf_•
;

76 
uöt32_t
 
	mtf_s8
;

77 
uöt32_t
 
	mtf_ïc
;

83 
	#EX_IRQ
 0

	)

84 
	#EX_MOD
 1

	)

85 
	#EX_TLBL
 2

	)

86 
	#EX_TLBS
 3

	)

87 
	#EX_ADEL
 4

	)

88 
	#EX_ADES
 5

	)

89 
	#EX_IBE
 6

	)

90 
	#EX_DBE
 7

	)

91 
	#EX_SYS
 8

	)

92 
	#EX_BP
 9

	)

93 
	#EX_RI
 10

	)

94 
	#EX_CPU
 11

	)

95 
	#EX_OVF
 12

	)

101 
__DEAD
 
mùs_u£rmode
(
å≠‰ame
 *
tf
);

106 
vaddr_t
 
˝u°acks
[];

107 
vaddr_t
 
˝uthªads
[];

	@arch/mips/include/types.h

30 #i‚de‡
_MIPS_TYPES_H_


31 
	#_MIPS_TYPES_H_


	)

43 
__u32
 
	t∑ddr_t
;

44 
__u32
 
	tvaddr_t
;

	@arch/mips/include/vm.h

30 #i‚de‡
_MIPS_VM_H_


31 
	#_MIPS_VM_H_


	)

38 
	#PAGE_SIZE
 4096

	)

39 
	#PAGE_FRAME
 0xfffff000

	)

51 
	#MIPS_KUSEG
 0x00000000

	)

52 
	#MIPS_KSEG0
 0x80000000

	)

53 
	#MIPS_KSEG1
 0xa0000000

	)

54 
	#MIPS_KSEG2
 0xc0000000

	)

68 
	#PADDR_TO_KVADDR
(
∑ddr
Ë(’addr)+
MIPS_KSEG0
)

	)

74 
	#USERSPACETOP
 
MIPS_KSEG0


	)

84 
	#USERSTACK
 
USERSPACETOP


	)

108 
øm_boŸ°øp
();

109 
∑ddr_t
 
øm_°ólmem
(
≈ages
);

110 
∑ddr_t
 
øm_gësize
();

111 
∑ddr_t
 
øm_gëfú°‰ì
();

119 
	sébshoŸdown
 {

123 
	mts_∂a˚hﬁdî
;

126 
	#TLBSHOOTDOWN_MAX
 16

	)

	@arch/mips/locore/cache-mips161.S

30 
	~<kîn/mùs/ªgdefs.h
>

40 .
	gãxt


41 .
£t
 
	gn‹e‹dî


43 .
globl
 
	gmùs_Êushiˇche


44 .
ty≥
 
	gmùs_Êushiˇche
,@
	gfun˘i⁄


45 .
ít
 
mùs_Êushiˇche


46 
	gmùs_Êushiˇche
:

47 
j
 
ø


48 
n›


49 .
íd
 
mùs_Êushiˇche


	@arch/mips/locore/exception-mips1.S

30 
	~<kîn/mùs/ªgdefs.h
>

31 
	~<mùs/•ecüÃeg.h
>

45 .
£t
 
	gnﬂt


46 .
£t
 
	gn‹e‹dî


64 .
	gãxt


65 .
globl
 
	gmùs_uéb_h™dÀr


66 .
ty≥
 
	gmùs_uéb_h™dÀr
,@
	gfun˘i⁄


67 .
ít
 
mùs_uéb_h™dÀr


68 
	gmùs_uéb_h™dÀr
:

69 
j
 
comm⁄_ex˚±i⁄


70 
n›


71 .
globl
 
mùs_uéb_íd


72 
mùs_uéb_íd
:

73 .
íd
 
mùs_uéb_h™dÀr


82 .
ãxt


83 .
globl
 
mùs_gíîÆ_h™dÀr


84 .
ty≥
 
mùs_gíîÆ_h™dÀr
,@
	gfun˘i⁄


85 .
ít
 
mùs_gíîÆ_h™dÀr


86 
	gmùs_gíîÆ_h™dÀr
:

87 
j
 
comm⁄_ex˚±i⁄


88 
n›


89 .
globl
 
mùs_gíîÆ_íd


90 
mùs_gíîÆ_íd
:

91 .
íd
 
mùs_gíîÆ_h™dÀr


94 
n›


101 .
ãxt


102 .
ty≥
 
comm⁄_ex˚±i⁄
,@
	gfun˘i⁄


103 .
ít
 
comm⁄_ex˚±i⁄


104 
	gcomm⁄_ex˚±i⁄
:

105 
mfc0
 
k0
, 
c0_°©us


106 
™di
 
	gk0
, k0, 
CST_KUp


107 
beq
 
	gk0
, 
	g$0
, 1f

108 
n›


111 
mfc0
 
	gk1
, 
c0_c⁄ãxt


112 
§l
 
	gk1
, k1, 
CTX_PTBASESHIFT


113 
¶l
 
	gk1
, k1, 2

114 
lui
 
	gk0
, %
	$hi
(
˝u°acks
)

115 
addu
 
k0
, k0, 
k1


116 
move
 
k1
, 
•


117 
b
 2f

118 
lw
 
•
, %
	$lo
(
˝u°acks
)(
k0
)

121 
move
 
k1
, 
•


137 
addi
 
•
, sp, -168

170 
sw
 
ø
, 160(
•
)

171 
sw
 
s8
, 156(
•
)

172 
sw
 
•
, 152(sp)

173 
sw
 
gp
, 148(
•
)

174 
sw
 
k1
, 144(
•
)

175 
sw
 
k0
, 140(
•
)

177 
sw
 
k1
, 152(
•
)

178 
n›


180 
mfc0
 
k1
, 
c0_ïc


181 
sw
 
k1
, 160(
•
)

183 
sw
 
t9
, 136(
•
)

184 
sw
 
t8
, 132(
•
)

185 
sw
 
s7
, 128(
•
)

186 
sw
 
s6
, 124(
•
)

187 
sw
 
s5
, 120(
•
)

188 
sw
 
s4
, 116(
•
)

189 
sw
 
s3
, 112(
•
)

190 
sw
 
s2
, 108(
•
)

191 
sw
 
s1
, 104(
•
)

192 
sw
 
s0
, 100(
•
)

193 
sw
 
t7
, 96(
•
)

194 
sw
 
t6
, 92(
•
)

195 
sw
 
t5
, 88(
•
)

196 
sw
 
t4
, 84(
•
)

197 
sw
 
t3
, 80(
•
)

198 
sw
 
t2
, 76(
•
)

199 
sw
 
t1
, 72(
•
)

200 
sw
 
t0
, 68(
•
)

201 
sw
 
a3
, 64(
•
)

202 
sw
 
a2
, 60(
•
)

203 
sw
 
a1
, 56(
•
)

204 
sw
 
a0
, 52(
•
)

205 
sw
 
v1
, 48(
•
)

206 
sw
 
v0
, 44(
•
)

207 
sw
 
AT
, 40(
•
)

209 
sw
 
ø
, 36(
•
)

214 
mfhi
 
t0


215 
mÊo
 
t1


216 
sw
 
t0
, 32(
•
)

217 
sw
 
t1
, 28(
•
)

223 
mfc0
 
t2
, 
c0_°©us


224 
sw
 
t2
, 20(
•
)

225 
mfc0
 
t3
, 
c0_vaddr


226 
sw
 
t3
, 16(
•
)

227 
mfc0
 
t4
, 
c0_ˇu£


228 
sw
 
t4
, 24(
•
)

233 
sw
 
$0
, 12(
•
)

238 
™di
 
k0
, 
t2
, 
CST_KUp


239 
beq
 
k0
, 
$0
, 3f

240 
n›


242 
mfc0
 
k1
, 
c0_c⁄ãxt


243 
§l
 
k1
, k1, 
CTX_PTBASESHIFT


244 
¶l
 
k1
, k1, 2

245 
lui
 
k0
, %
	$hi
(
˝uthªads
)

246 
addu
 
k0
, k0, 
k1


247 
lw
 
s7
, %
	$lo
(
˝uthªads
)(
k0
)

253 
œ
 
gp
, 
_gp


259 
addiu
 
a0
, 
•
, 16

260 
jÆ
 
mùs_å≠


261 
n›


264 
n›


270 
ex˚±i⁄_ªtu∫
:

273 
lw
 
t0
, 20(
•
)

274 
n›


275 
mtc0
 
t0
, 
c0_°©us


279 
lw
 
t1
, 28(
•
)

280 
lw
 
t0
, 32(
•
)

281 
méo
 
t1


282 
mthi
 
t0


285 
lw
 
ø
, 36(
•
)

287 
lw
 
AT
, 40(
•
)

288 
lw
 
v0
, 44(
•
)

289 
lw
 
v1
, 48(
•
)

290 
lw
 
a0
, 52(
•
)

291 
lw
 
a1
, 56(
•
)

292 
lw
 
a2
, 60(
•
)

293 
lw
 
a3
, 64(
•
)

294 
lw
 
t0
, 68(
•
)

295 
lw
 
t1
, 72(
•
)

296 
lw
 
t2
, 76(
•
)

297 
lw
 
t3
, 80(
•
)

298 
lw
 
t4
, 84(
•
)

299 
lw
 
t5
, 88(
•
)

300 
lw
 
t6
, 92(
•
)

301 
lw
 
t7
, 96(
•
)

302 
lw
 
s0
, 100(
•
)

303 
lw
 
s1
, 104(
•
)

304 
lw
 
s2
, 108(
•
)

305 
lw
 
s3
, 112(
•
)

306 
lw
 
s4
, 116(
•
)

307 
lw
 
s5
, 120(
•
)

308 
lw
 
s6
, 124(
•
)

309 
lw
 
s7
, 128(
•
)

310 
lw
 
t8
, 132(
•
)

311 
lw
 
t9
, 136(
•
)

316 
lw
 
gp
, 148(
•
)

318 
lw
 
s8
, 156(
•
)

319 
lw
 
k0
, 160(
•
)

321 
lw
 
•
, 152(sp)

324 
jr
 
k0


325 
r„


326 .
íd
 
comm⁄_ex˚±i⁄


336 .
ãxt


337 .
globl
 
asm_u£rmode


338 .
ty≥
 
asm_u£rmode
,@
fun˘i⁄


339 .
ít
 
asm_u£rmode


340 
asm_u£rmode
:

353 
j
 
ex˚±i⁄_ªtu∫


354 
addiu
 
•
, 
a0
, -16

355 .
íd
 
asm_u£rmode


	@arch/mips/locore/trap.c

30 
	~<ty≥s.h
>

31 
	~<sig«l.h
>

32 
	~<lib.h
>

33 
	~<mùs/•ecüÃeg.h
>

34 
	~<mùs/å≠‰ame.h
>

35 
	~<˝u.h
>

36 
	~<•l.h
>

37 
	~<thªad.h
>

38 
	~<cuºít.h
>

39 
	~<vm.h
>

40 
	~<maöbus.h
>

41 
	~<sysˇŒ.h
>

42 
	~<c›yöout.h
>

45 
__DEAD
 
asm_u£rmode
(
å≠‰ame
 *
tf
);

48 
mùs_å≠
(
å≠‰ame
 *
tf
);

52 
	#NTRAPCODES
 13

	)

53 c⁄° *c⁄° 
	gå≠codíames
[
NTRAPCODES
] = {

74 
	$kûl_cuπhªad
(
vaddr_t
 
ïc
, 
code
, vaddr_à
vaddr
)

76 
sig
 = 0;

78 
	`KASSERT
(
code
 < 
NTRAPCODES
);

79 
code
) {

80 
EX_IRQ
:

81 
EX_IBE
:

82 
EX_DBE
:

83 
EX_SYS
:

85 
	`KASSERT
(0);

86 
sig
 = 
SIGABRT
;

88 
EX_MOD
:

89 
EX_TLBL
:

90 
EX_TLBS
:

91 
sig
 = 
SIGSEGV
;

93 
EX_ADEL
:

94 
EX_ADES
:

95 
sig
 = 
SIGBUS
;

97 
EX_BP
:

98 
sig
 = 
SIGTRAP
;

100 
EX_RI
:

101 
sig
 = 
SIGILL
;

103 
EX_CPU
:

104 
sig
 = 
SIGSEGV
;

106 
EX_OVF
:

107 
sig
 = 
SIGFPE
;

115 
	`k¥ötf
("Fatal user modeÅrap %u sig %d (%s,Épc 0x%x, vaddr 0x%x)\n",

116 
code
, 
sig
, 
å≠codíames
[code], 
ïc
, 
vaddr
);

117 
	`kexô
(
sig
);

119 
	}
}

127 
	$mùs_å≠
(
å≠‰ame
 *
tf
)

129 
uöt32_t
 
code
;

131 
boﬁ
 
iskîn
;

132 
•l
;

135 
	`KASSERT
((
å≠‰ame
)==(37*4));

140 
code
 = (
tf
->
tf_ˇu£
 & 
CCA_CODE
Ë>> 
CCA_CODESHIFT
;

142 
iskîn
 = (
tf
->
tf_°©us
 & 
CST_KUp
) == 0;

144 
	`KASSERT
(
code
 < 
NTRAPCODES
);

147 i‡(
cuπhªad
 !
NULL
 && cuπhªad->
t_°ack
 != NULL) {

148 
	`KASSERT
((
vaddr_t
)
tf
 > (vaddr_t)
cuπhªad
->
t_°ack
);

149 
	`KASSERT
((
vaddr_t
)
tf
 < (vaddr_t)(
cuπhªad
->
t_°ack


150 + 
STACK_SIZE
));

154 i‡(
code
 =
EX_IRQ
) {

155 
ﬁd_ö
;

156 
boﬁ
 
dﬂdju°
;

158 
ﬁd_ö
 = 
cuπhªad
->
t_ö_öãºu±
;

159 
cuπhªad
->
t_ö_öãºu±
 = 1;

178 i‡(
cuπhªad
->
t_cur•l
 == 0) {

179 
	`KASSERT
(
cuπhªad
->
t_cur•l
 == 0);

180 
	`KASSERT
(
cuπhªad
->
t_ùlhigh_cou¡
 == 0);

181 
cuπhªad
->
t_cur•l
 = 
IPL_HIGH
;

182 
cuπhªad
->
t_ùlhigh_cou¡
++;

183 
dﬂdju°
 = 
åue
;

186 
dﬂdju°
 = 
Ál£
;

189 
	`maöbus_öãºu±
(
tf
);

191 i‡(
dﬂdju°
) {

192 
	`KASSERT
(
cuπhªad
->
t_cur•l
 =
IPL_HIGH
);

193 
	`KASSERT
(
cuπhªad
->
t_ùlhigh_cou¡
 == 1);

194 
cuπhªad
->
t_ùlhigh_cou¡
--;

195 
cuπhªad
->
t_cur•l
 = 0;

198 
cuπhªad
->
t_ö_öãºu±
 = 
ﬁd_ö
;

199 
d⁄e2
;

213 
•l
 = 
	`•lhigh
();

214 
	`•lx
(
•l
);

217 i‡(
code
 =
EX_SYS
) {

219 
	`KASSERT
(
cuπhªad
->
t_cur•l
 == 0);

220 
	`KASSERT
(
cuπhªad
->
t_ùlhigh_cou¡
 == 0);

222 
	`DEBUG
(
DB_SYSCALL
, "syscall: #%d,árgs %x %x %x %x\n",

223 
tf
->
tf_v0
,Åf->
tf_a0
,Åf->
tf_a1
,Åf->
tf_a2
,Åf->
tf_a3
);

225 
	`sysˇŒ
(
tf
);

226 
d⁄e
;

234 
code
) {

235 
EX_MOD
:

236 i‡(
	`vm_Áu…
(
VM_FAULT_READONLY
, 
tf
->
tf_vaddr
)==0) {

237 
d⁄e
;

240 
EX_TLBL
:

241 i‡(
	`vm_Áu…
(
VM_FAULT_READ
, 
tf
->
tf_vaddr
)==0) {

242 
d⁄e
;

245 
EX_TLBS
:

246 i‡(
	`vm_Áu…
(
VM_FAULT_WRITE
, 
tf
->
tf_vaddr
)==0) {

247 
d⁄e
;

250 
EX_IBE
:

251 
EX_DBE
:

261 
	`∑nic
("Bu†îr‹Éx˚±i⁄, PC=0x%x\n", 
tf
->
tf_ïc
);

271 i‡(!
iskîn
) {

276 
	`kûl_cuπhªad
(
tf
->
tf_ïc
, 
code
,Åf->
tf_vaddr
);

277 
d⁄e
;

301 i‡(
cuπhªad
 !
NULL
 &&

302 
cuπhªad
->
t_machdï
.
tm_badÁu…func
 !
NULL
) {

303 
tf
->
tf_ïc
 = (
vaddr_t
Ë
cuπhªad
->
t_machdï
.
tm_badÁu…func
;

304 
d⁄e
;

311 
	`k¥ötf
("∑nic: F©ÆÉx˚±i⁄ %u (%sËö kî√»mode\n", 
code
,

312 
å≠codíames
[
code
]);

313 
	`k¥ötf
("panic: EPC 0x%x,Éxception vaddr 0x%x\n",

314 
tf
->
tf_ïc
,Åf->
tf_vaddr
);

316 
	`∑nic
("I can't handleÅhis... IÅhink I'll just dieÇow...\n");

318 
d⁄e
:

323 
	`˝u_úqoff
();

324 
d⁄e2
:

332 i‡(
cuπhªad
->
t_°ack
 =
NULL
) {

336 
˝uthªads
[
cur˝u
->
c_numbî
] = (
vaddr_t
)
cuπhªad
;

337 
˝u°acks
[
cur˝u
->
c_numbî
] = (
vaddr_t
)
cuπhªad
->
t_°ack
 + 
STACK_SIZE
;

348 
	`KASSERT
(
	`SAME_STACK
(
˝u°acks
[
cur˝u
->
c_numbî
]-1, (
vaddr_t
)
tf
));

349 
	}
}

369 
	$mùs_u£rmode
(
å≠‰ame
 *
tf
)

378 
	`•l0
();

379 
	`˝u_úqoff
();

381 
˝uthªads
[
cur˝u
->
c_numbî
] = (
vaddr_t
)
cuπhªad
;

382 
˝u°acks
[
cur˝u
->
c_numbî
] = (
vaddr_t
)
cuπhªad
->
t_°ack
 + 
STACK_SIZE
;

399 
	`KASSERT
(
	`SAME_STACK
(
˝u°acks
[
cur˝u
->
c_numbî
]-1, (
vaddr_t
)
tf
));

404 
	`asm_u£rmode
(
tf
);

405 
	}
}

424 
	$íãr_√w_¥o˚ss
(
¨gc
, 
u£Ωå_t
 
¨gv
, u£Ωå_à
ív
,

425 
vaddr_t
 
°ack
, vaddr_à
íåy
)

436 
å≠‰ame
 
tf
;

438 
	`bzîo
(&
tf
, (tf));

440 
tf
.
tf_°©us
 = 
CST_IRQMASK
 | 
CST_IEp
 | 
CST_KUp
;

441 
tf
.
tf_ïc
 = 
íåy
;

442 
tf
.
tf_a0
 = 
¨gc
;

443 
tf
.
tf_a1
 = (
vaddr_t
)
¨gv
;

444 
tf
.
tf_a2
 = (
vaddr_t
)
ív
;

445 
tf
.
tf_•
 = 
°ack
;

446 
	`mùs_u£rmode
(&
tf
);

447 
	}
}

	@arch/mips/syscall/syscall.c

30 
	~<ty≥s.h
>

31 
	~<kîn/î∫o.h
>

32 
	~<kîn/sysˇŒ.h
>

33 
	~<lib.h
>

34 
	~<mùs/å≠‰ame.h
>

35 
	~<thªad.h
>

36 
	~<cuºít.h
>

37 
	~<sysˇŒ.h
>

38 
	~<ídün.h
>

39 
	~<c›yöout.h
>

79 
	$sysˇŒ
(
å≠‰ame
 *
tf
)

81 
ˇŒno
;

82 
öt32_t
 
ªtvÆ
;

83 
îr
;

85 
	`KASSERT
(
cuπhªad
 !
NULL
);

86 
	`KASSERT
(
cuπhªad
->
t_cur•l
 == 0);

87 
	`KASSERT
(
cuπhªad
->
t_ùlhigh_cou¡
 == 0);

89 
ˇŒno
 = 
tf
->
tf_v0
;

100 
ªtvÆ
 = 0;

102 
ˇŒno
) {

103 
SYS_ªboŸ
:

104 
îr
 = 
	`sys_ªboŸ
(
tf
->
tf_a0
);

107 
SYS___time
:

108 
îr
 = 
	`sys___time
((
u£Ωå_t
)
tf
->
tf_a0
,

109 (
u£Ωå_t
)
tf
->
tf_a1
);

113 
SYS_wrôe
:

114 
îr
 = 
	`sys_wrôe
(()
tf
->
tf_a0
, (c⁄° 
u£Ωå_t
Èf->
tf_a1
, (
size_t
Èf->
tf_a2
,(
öt32_t
*)&
ªtvÆ
);

117 
SYS_›í
:

118 
îr
 = 
	`sys_›í
((c⁄° *)
tf
->
tf_a0
,(Ëtf->
tf_a1
, (
mode_t
Èf->
tf_a2
,(
öt32_t
 *)&
ªtvÆ
);

121 
SYS_˛o£
:

122 
îr
 = 
	`sys_˛o£
(()
tf
->
tf_a0
);

125 
SYS_ªad
:

126 
îr
=
	`sys_ªad
(()
tf
->
tf_a0
,(*Èf->
tf_a1
, (
size_t
Èf->
tf_a2
,(
öt32_t
*)&
ªtvÆ
);

129 
SYS_l£ek
:;

130 
uöt64_t
 
pos
;

131 
	`joö32to64
((
uöt32_t
)
tf
->
tf_a2
,(uöt32_tÈf->
tf_a3
,&
pos
);

132 * 
de°
=
	`kmÆloc
(());

133 
	`c›yö
((
c⁄°_u£Ωå_t
)
tf
->
tf_•
+16,
de°
,());

134 
off_t
 
ªt64
;

135 
îr
=
	`sys_l£ek
(()
tf
->
tf_a0
,
pos
,*(*)
de°
,&
ªt64
);

136 if(!
îr
){

137 
uöt32_t
 
highî
;

138 
uöt32_t
 
lowî
;

139 
	`•lô64to32
(
ªt64
,&
highî
,&
lowî
);

140 
ªtvÆ
=
highî
;

141 
tf
->
tf_v1
=
lowî
;

145 
SYS_dup2
:;

146 
îr
=
	`sys_dup2
(()
tf
->
tf_a0
,(Èf->
tf_a1
,(
öt32_t
*)&
ªtvÆ
);

149 
SYS___gëcwd
:

150 
îr
=
	`sys___gëcwd
((*)
tf
->
tf_a0
, (Èf->
tf_a1
, (
öt32_t
*)&
ªtvÆ
);

153 
SYS_chdú
:

154 
îr
 = 
	`sys_chdú
((c⁄° *Ë
tf
->
tf_a0
, (
öt32_t
 *)&
ªtvÆ
);

157 
SYS_f‹k
:

158 
îr
=
	`sys_f‹k
(
tf
,
íãr_f‹ked_¥o˚ss
,(
öt32_t
*)&
ªtvÆ
);

161 
SYS_gëpid
:

162 
îr
=
	`sys_gëpid
((
öt32_t
*)&
ªtvÆ
);

165 
SYS__exô
:

166 
	`sys__exô
((
öt32_t
)
tf
->
tf_a0
);

169 
SYS_waôpid
:

170 
îr
=
	`sys_waôpid
((
pid_t
)
tf
->
tf_a0
,(*Èf->
tf_a1
,(Èf->
tf_a2
,(
öt32_t
*)&
ªtvÆ
);

173 
SYS_execv
:

174 
îr
=
	`sys_execv
((c⁄° *)
tf
->
tf_a0
,(**Ëtf->
tf_a1
);

177 
	`k¥ötf
("Unknow¿sysˇŒ %d\n", 
ˇŒno
);

178 
îr
 = 
ENOSYS
;

183 i‡(
îr
) {

189 
tf
->
tf_v0
 = 
îr
;

190 
tf
->
tf_a3
 = 1;

194 
tf
->
tf_v0
 = 
ªtvÆ
;

195 
tf
->
tf_a3
 = 0;

203 
tf
->
tf_ïc
 += 4;

206 
	`KASSERT
(
cuπhªad
->
t_cur•l
 == 0);

208 
	`KASSERT
(
cuπhªad
->
t_ùlhigh_cou¡
 == 0);

209 
	}
}

220 
	$íãr_f‹ked_¥o˚ss
(*
tf
,
nŸu£d
)

222 (Ë
nŸu£d
;

228 
å≠‰ame
 
own_tf
;

229 
	`memmove
(&
own_tf
,
tf
,(
å≠‰ame
));

230 
own_tf
.
tf_v0
=0;

231 
own_tf
.
tf_a3
=0;

232 
own_tf
.
tf_ïc
+=4;

233 
	`k‰ì
(
tf
);

235 
	`mùs_u£rmode
(&
own_tf
);

236 
	}
}

	@arch/mips/thread/cpu.c

34 
	~<ty≥s.h
>

35 
	~<lib.h
>

36 
	~<mùs/•ecüÃeg.h
>

37 
	~<mùs/å≠‰ame.h
>

38 
	~<∂©f‹m/max˝us.h
>

39 
	~<˝u.h
>

40 
	~<thªad.h
>

59 
vaddr_t
 
	g˝u°acks
[
MAXCPUS
];

60 
vaddr_t
 
	g˝uthªads
[
MAXCPUS
];

68 
	$˝u_machdï_öô
(
˝u
 *
c
)

70 
vaddr_t
 
°ackpoöãr
;

72 
	`KASSERT
(
c
->
c_numbî
 < 
MAXCPUS
);

74 i‡(
c
->
c_cuπhªad
->
t_°ack
 =
NULL
) {

84 
°ackpoöãr
 = (
vaddr_t
Ë
c
->
c_cuπhªad
->
t_°ack
;

86 
°ackpoöãr
 +
STACK_SIZE
;

88 
˝u°acks
[
c
->
c_numbî
] = 
°ackpoöãr
;

89 
˝uthªads
[
c
->
c_numbî
] = (
vaddr_t
)c->
c_cuπhªad
;

91 
	}
}

102 
	#SYS161_PRID_ORIG
 0x000003ff

	)

103 
	#SYS161_PRID_2X
 0x000000a1

	)

105 
ölöe


106 
uöt32_t


107 
	$˝u_gë¥id
()

109 
uöt32_t
 
¥id
;

111 
__asm
 vﬁ©ûe("mfc0 %0,$15" : "Ù" (
¥id
));

112  
¥id
;

113 
	}
}

115 
ölöe


116 
uöt32_t


117 
	$˝u_gë„©uªs
()

119 
uöt32_t
 
„©uªs
;

121 
__asm
 volatile(".setÖush;"

125 : "Ù" (
„©uªs
));

126  
„©uªs
;

127 
	}
}

129 
ölöe


130 
uöt32_t


131 
	$˝u_gëi„©uªs
()

133 
uöt32_t
 
„©uªs
;

135 
__asm
 volatile(".setÖush;"

139 : "Ù" (
„©uªs
));

140  
„©uªs
;

141 
	}
}

144 
	$˝u_idítify
(*
buf
, 
size_t
 
max
)

146 
uöt32_t
 
¥id
;

147 
uöt32_t
 
„©uªs
;

149 
¥id
 = 
	`˝u_gë¥id
();

150 
¥id
) {

151 
SYS161_PRID_ORIG
:

152 
	`¢¥ötf
(
buf
, 
max
, "MIPS/161 (System/161 1.xándÖre-2.x)");

154 
SYS161_PRID_2X
:

155 
„©uªs
 = 
	`˝u_gë„©uªs
();

156 
	`¢¥ötf
(
buf
, 
max
, "MIPS/161 (System/161 2.x) features 0x%x",

157 
„©uªs
);

158 
„©uªs
 = 
	`˝u_gëi„©uªs
();

159 i‡(
„©uªs
 != 0) {

160 
	`k¥ötf
("WARNING: unknown CPU incompatible features "

161 "0x%x\n", 
„©uªs
);

165 
	`¢¥ötf
(
buf
, 
max
, "32-bit MIPS (unknownÅype, CPU ID 0x%x)",

166 
¥id
);

169 
	}
}

195 
	#GET_STATUS
(
x
Ë
__asm
 vﬁ©ûe("mfc0 %0,$12" : "Ù" (x))

	)

196 
	#SET_STATUS
(
x
Ë
__asm
 vﬁ©ûe("mtc0 %0,$12" :: "r" (x))

	)

202 
	$˝u_úq⁄
()

204 
uöt32_t
 
x
;

206 
	`GET_STATUS
(
x
);

207 
x
 |
CST_IEc
;

208 
	`SET_STATUS
(
x
);

209 
	}
}

215 
	$˝u_úqoff
()

217 
uöt32_t
 
x
;

219 
	`GET_STATUS
(
x
);

220 
x
 &~(
uöt32_t
)
CST_IEc
;

221 
	`SET_STATUS
(
x
);

222 
	}
}

229 
	$˝u_úq⁄off
()

231 
uöt32_t
 
x
, 
x⁄
, 
xoff
;

233 
	`GET_STATUS
(
x
);

234 
x⁄
 = 
x
 | 
CST_IEc
;

235 
xoff
 = 
x
 & ~(
uöt32_t
)
CST_IEc
;

236 
	`SET_STATUS
(
x⁄
);

237 
__asm
 volatile("nop;Çop;Çop;Çop");

238 
	`SET_STATUS
(
xoff
);

239 
	}
}

257 
ölöe


259 
	$waô
()

272 
__asm
 volatile(

279 
	}
}

285 
	$˝u_idÀ
()

287 
	`waô
();

288 
	`˝u_úq⁄off
();

289 
	}
}

295 
	$˝u_hÆt
()

297 
	`˝u_úqoff
();

299 
	`waô
();

301 
	}
}

	@arch/mips/thread/switch.S

34 
	~<kîn/mùs/ªgdefs.h
>

36 .
	gãxt


37 .
£t
 
	gn‹e‹dî


39 .
globl
 
	gswôch‰ame_swôch


40 .
ty≥
 
	gswôch‰ame_swôch
,@
	gfun˘i⁄


41 .
ít
 
swôch‰ame_swôch


42 
	gswôch‰ame_swôch
:

62 
addi
 
•
, 
	g•
, -40

65 
sw
 
	gø
, 36(
	g•
)

66 
sw
 
	ggp
, 32(
	g•
)

67 
sw
 
	gs8
, 28(
	g•
)

68 
sw
 
	gs6
, 24(
	g•
)

69 
sw
 
	gs5
, 20(
	g•
)

70 
sw
 
	gs4
, 16(
	g•
)

71 
sw
 
	gs3
, 12(
	g•
)

72 
sw
 
	gs2
, 8(
	g•
)

73 
sw
 
	gs1
, 4(
	g•
)

74 
sw
 
	gs0
, 0(
	g•
)

77 
sw
 
	g•
, 0(
	ga0
)

80 
lw
 
	g•
, 0(
	ga1
)

81 
n›


84 
lw
 
	gs0
, 0(
	g•
)

85 
lw
 
	gs1
, 4(
	g•
)

86 
lw
 
	gs2
, 8(
	g•
)

87 
lw
 
	gs3
, 12(
	g•
)

88 
lw
 
	gs4
, 16(
	g•
)

89 
lw
 
	gs5
, 20(
	g•
)

90 
lw
 
	gs6
, 24(
	g•
)

91 
lw
 
	gs8
, 28(
	g•
)

92 
lw
 
	ggp
, 32(
	g•
)

93 
lw
 
	gø
, 36(
	g•
)

94 
n›


97 
j
 
ø


98 
addi
 
	g•
, sp, 40

99 .
íd
 
	gswôch‰ame_swôch


	@arch/mips/thread/switchframe.c

30 
	~<ty≥s.h
>

31 
	~<lib.h
>

32 
	~<thªad.h
>

33 
	~<thªad¥iv©e.h
>

35 
	~"swôch‰ame.h
"

38 
mùs_thªad°¨t
( );

55 
swôch‰ame_öô
(
thªad
 *thread,

56 (*
íåypoöt
)(*
d©a1
, 
d©a2
),

57 *
d©a1
, 
d©a2
)

59 
vaddr_t
 
°ackt›
;

60 
swôch‰ame
 *
sf
;

67 
°ackt›
 = ((
vaddr_t
)
thªad
->
t_°ack
Ë+ 
STACK_SIZE
;

68 
sf
 = ((
swôch‰ame
 *Ë
°ackt›
) - 1;

71 
	`bzîo
(
sf
, (*sf));

91 
sf
->
sf_s0
 = (
uöt32_t
)
íåypoöt
;

92 
sf
->
sf_s1
 = (
uöt32_t
)
d©a1
;

93 
sf
->
sf_s2
 = (
uöt32_t
)
d©a2
;

94 
sf
->
sf_ø
 = (
uöt32_t
)
mùs_thªad°¨t
;

97 
thªad
->
t_c⁄ãxt
 = 
sf
;

98 
	}
}

	@arch/mips/thread/switchframe.h

30 #i‚de‡
_MIPS_SWITCHFRAME_H_


31 
	#_MIPS_SWITCHFRAME_H_


	)

39 
	sswôch‰ame
 {

40 
uöt32_t
 
	msf_s0
;

41 
uöt32_t
 
	msf_s1
;

42 
uöt32_t
 
	msf_s2
;

43 
uöt32_t
 
	msf_s3
;

44 
uöt32_t
 
	msf_s4
;

45 
uöt32_t
 
	msf_s5
;

46 
uöt32_t
 
	msf_s6
;

47 
uöt32_t
 
	msf_s8
;

48 
uöt32_t
 
	msf_gp
;

49 
uöt32_t
 
	msf_ø
;

	@arch/mips/thread/thread_machdep.c

34 
	~<ty≥s.h
>

35 
	~<lib.h
>

36 
	~<thªad.h
>

37 
	~<thªad¥iv©e.h
>

40 
	$thªad_machdï_öô
(
thªad_machdï
 *
tm
)

42 
tm
->
tm_badÁu…func
 = 
NULL
;

43 
	}
}

46 
	$thªad_machdï_˛ónup
(
thªad_machdï
 *
tm
)

48 
	`KASSERT
(
tm
->
tm_badÁu…func
 =
NULL
);

49 
	}
}

	@arch/mips/thread/threadstart.S

34 
	~<kîn/mùs/ªgdefs.h
>

36 .
	gãxt


37 .
£t
 
	gn‹e‹dî


39 .
globl
 
	gmùs_thªad°¨t


40 .
ty≥
 
	gmùs_thªad°¨t
,@
	gfun˘i⁄


41 .
ít
 
mùs_thªad°¨t


42 
	gmùs_thªad°¨t
:

59 
addiu
 
•
, 
	g•
, -16

61 
move
 
	gø
, 
$0


63 
move
 
	ga0
, 
s0


64 
move
 
	ga1
, 
s1


65 
j
 
thªad_°¨tup


66 
move
 
	ga2
, 
	gs2


68 .
íd
 
	gmùs_thªad°¨t


	@arch/mips/vm/dumbvm.c

30 
	~<ty≥s.h
>

31 
	~<kîn/î∫o.h
>

32 
	~<lib.h
>

33 
	~<•l.h
>

34 
	~<•ölock.h
>

35 
	~<¥oc.h
>

36 
	~<cuºít.h
>

37 
	~<mùs/éb.h
>

38 
	~<addr•a˚.h
>

39 
	~<vm.h
>

59 
	#DUMBVM_STACKPAGES
 18

	)

64 
•ölock
 
	g°ólmem_lock
 = 
SPINLOCK_INITIALIZER
;

67 
	$vm_boŸ°øp
()

70 
	}
}

73 
∑ddr_t


74 
	$gëµages
(
≈ages
)

76 
∑ddr_t
 
addr
;

78 
	`•ölock_acquúe
(&
°ólmem_lock
);

80 
addr
 = 
	`øm_°ólmem
(
≈ages
);

82 
	`•ölock_ªÀa£
(&
°ólmem_lock
);

83  
addr
;

84 
	}
}

87 
vaddr_t


88 
	$Æloc_k∑ges
(
≈ages
)

90 
∑ddr_t
 
∑
;

91 
∑
 = 
	`gëµages
(
≈ages
);

92 i‡(
∑
==0) {

95  
	`PADDR_TO_KVADDR
(
∑
);

96 
	}
}

99 
	$‰ì_k∑ges
(
vaddr_t
 
addr
)

103 ()
addr
;

104 
	}
}

107 
	$vm_ébshoŸdown_Æl
()

109 
	`∑nic
("dumbvmÅriedÅo doÅlb shootdown?!\n");

110 
	}
}

113 
	$vm_ébshoŸdown
(c⁄° 
ébshoŸdown
 *
ts
)

115 ()
ts
;

116 
	`∑nic
("dumbvmÅriedÅo doÅlb shootdown?!\n");

117 
	}
}

120 
	$vm_Áu…
(
Áu…ty≥
, 
vaddr_t
 
Áu…addªss
)

122 
vaddr_t
 
vba£1
, 
vt›1
, 
vba£2
, 
vt›2
, 
°ackba£
, 
°ackt›
;

123 
∑ddr_t
 
∑ddr
;

124 
i
;

125 
uöt32_t
 
ehi
, 
ño
;

126 
addr•a˚
 *
as
;

127 
•l
;

129 
Áu…addªss
 &
PAGE_FRAME
;

131 
	`DEBUG
(
DB_VM
, "dumbvm: fau…: 0x%x\n", 
Áu…addªss
);

133 
Áu…ty≥
) {

134 
VM_FAULT_READONLY
:

136 
	`∑nic
("dumbvm: got VM_FAULT_READONLY\n");

137 
VM_FAULT_READ
:

138 
VM_FAULT_WRITE
:

141  
EINVAL
;

144 i‡(
cuΩroc
 =
NULL
) {

150  
EFAULT
;

153 
as
 = 
	`¥oc_gëas
();

154 i‡(
as
 =
NULL
) {

159  
EFAULT
;

163 
	`KASSERT
(
as
->
as_vba£1
 != 0);

164 
	`KASSERT
(
as
->
as_pba£1
 != 0);

165 
	`KASSERT
(
as
->
as_≈ages1
 != 0);

166 
	`KASSERT
(
as
->
as_vba£2
 != 0);

167 
	`KASSERT
(
as
->
as_pba£2
 != 0);

168 
	`KASSERT
(
as
->
as_≈ages2
 != 0);

169 
	`KASSERT
(
as
->
as_°ackpba£
 != 0);

170 
	`KASSERT
((
as
->
as_vba£1
 & 
PAGE_FRAME
) ==ás->as_vbase1);

171 
	`KASSERT
((
as
->
as_pba£1
 & 
PAGE_FRAME
) ==ás->as_pbase1);

172 
	`KASSERT
((
as
->
as_vba£2
 & 
PAGE_FRAME
) ==ás->as_vbase2);

173 
	`KASSERT
((
as
->
as_pba£2
 & 
PAGE_FRAME
) ==ás->as_pbase2);

174 
	`KASSERT
((
as
->
as_°ackpba£
 & 
PAGE_FRAME
) ==ás->as_stackpbase);

176 
vba£1
 = 
as
->
as_vba£1
;

177 
vt›1
 = 
vba£1
 + 
as
->
as_≈ages1
 * 
PAGE_SIZE
;

178 
vba£2
 = 
as
->
as_vba£2
;

179 
vt›2
 = 
vba£2
 + 
as
->
as_≈ages2
 * 
PAGE_SIZE
;

180 
°ackba£
 = 
USERSTACK
 - 
DUMBVM_STACKPAGES
 * 
PAGE_SIZE
;

181 
°ackt›
 = 
USERSTACK
;

183 i‡(
Áu…addªss
 >
vba£1
 && fau…addªs†< 
vt›1
) {

184 
∑ddr
 = (
Áu…addªss
 - 
vba£1
Ë+ 
as
->
as_pba£1
;

186 i‡(
Áu…addªss
 >
vba£2
 && fau…addªs†< 
vt›2
) {

187 
∑ddr
 = (
Áu…addªss
 - 
vba£2
Ë+ 
as
->
as_pba£2
;

189 i‡(
Áu…addªss
 >
°ackba£
 && fau…addªs†< 
°ackt›
) {

190 
∑ddr
 = (
Áu…addªss
 - 
°ackba£
Ë+ 
as
->
as_°ackpba£
;

193  
EFAULT
;

197 
	`KASSERT
((
∑ddr
 & 
PAGE_FRAME
) ==Öaddr);

200 
•l
 = 
	`•lhigh
();

202 
i
=0; i<
NUM_TLB
; i++) {

203 
	`éb_ªad
(&
ehi
, &
ño
, 
i
);

204 i‡(
ño
 & 
TLBLO_VALID
) {

207 
ehi
 = 
Áu…addªss
;

208 
ño
 = 
∑ddr
 | 
TLBLO_DIRTY
 | 
TLBLO_VALID
;

209 
	`DEBUG
(
DB_VM
, "dumbvm: 0x%x -> 0x%x\n", 
Áu…addªss
, 
∑ddr
);

210 
	`éb_wrôe
(
ehi
, 
ño
, 
i
);

211 
	`•lx
(
•l
);

215 
	`k¥ötf
("dumbvm: Ran out of TLBÉntries - cannot handleÖage fault\n");

216 
	`•lx
(
•l
);

217  
EFAULT
;

218 
	}
}

220 
addr•a˚
 *

221 
	$as_¸óã
()

223 
addr•a˚
 *
as
 = 
	`kmÆloc
((addrspace));

224 i‡(
as
==
NULL
) {

225  
NULL
;

228 
as
->
as_vba£1
 = 0;

229 
as
->
as_pba£1
 = 0;

230 
as
->
as_≈ages1
 = 0;

231 
as
->
as_vba£2
 = 0;

232 
as
->
as_pba£2
 = 0;

233 
as
->
as_≈ages2
 = 0;

234 
as
->
as_°ackpba£
 = 0;

236  
as
;

237 
	}
}

240 
	$as_de°roy
(
addr•a˚
 *
as
)

242 
	`k‰ì
(
as
);

243 
	}
}

246 
	$as_a˘iv©e
()

248 
i
, 
•l
;

249 
addr•a˚
 *
as
;

251 
as
 = 
	`¥oc_gëas
();

252 i‡(
as
 =
NULL
) {

257 
•l
 = 
	`•lhigh
();

259 
i
=0; i<
NUM_TLB
; i++) {

260 
	`éb_wrôe
(
	`TLBHI_INVALID
(
i
), 
	`TLBLO_INVALID
(), i);

263 
	`•lx
(
•l
);

264 
	}
}

267 
	$as_dó˘iv©e
()

270 
	}
}

273 
	$as_deföe_ªgi⁄
(
addr•a˚
 *
as
, 
vaddr_t
 
vaddr
, 
size_t
 
sz
,

274 
ªadabÀ
, 
wrôóbÀ
, 
execuèbÀ
)

276 
size_t
 
≈ages
;

279 
sz
 +
vaddr
 & ~(
vaddr_t
)
PAGE_FRAME
;

280 
vaddr
 &
PAGE_FRAME
;

283 
sz
 = (sz + 
PAGE_SIZE
 - 1Ë& 
PAGE_FRAME
;

285 
≈ages
 = 
sz
 / 
PAGE_SIZE
;

288 ()
ªadabÀ
;

289 ()
wrôóbÀ
;

290 ()
execuèbÀ
;

292 i‡(
as
->
as_vba£1
 == 0) {

293 
as
->
as_vba£1
 = 
vaddr
;

294 
as
->
as_≈ages1
 = 
≈ages
;

298 i‡(
as
->
as_vba£2
 == 0) {

299 
as
->
as_vba£2
 = 
vaddr
;

300 
as
->
as_≈ages2
 = 
≈ages
;

307 
	`k¥ötf
("dumbvm: Warning:Åoo manyÑegions\n");

308  
ENOSYS
;

309 
	}
}

313 
	$as_zîo_ªgi⁄
(
∑ddr_t
 
∑ddr
, 
≈ages
)

315 
	`bzîo
((*)
	`PADDR_TO_KVADDR
(
∑ddr
), 
≈ages
 * 
PAGE_SIZE
);

316 
	}
}

319 
	$as_¥ï¨e_lﬂd
(
addr•a˚
 *
as
)

321 
	`KASSERT
(
as
->
as_pba£1
 == 0);

322 
	`KASSERT
(
as
->
as_pba£2
 == 0);

323 
	`KASSERT
(
as
->
as_°ackpba£
 == 0);

325 
as
->
as_pba£1
 = 
	`gëµages
◊s->
as_≈ages1
);

326 i‡(
as
->
as_pba£1
 == 0) {

327  
ENOMEM
;

330 
as
->
as_pba£2
 = 
	`gëµages
◊s->
as_≈ages2
);

331 i‡(
as
->
as_pba£2
 == 0) {

332  
ENOMEM
;

335 
as
->
as_°ackpba£
 = 
	`gëµages
(
DUMBVM_STACKPAGES
);

336 i‡(
as
->
as_°ackpba£
 == 0) {

337  
ENOMEM
;

340 
	`as_zîo_ªgi⁄
(
as
->
as_pba£1
,ás->
as_≈ages1
);

341 
	`as_zîo_ªgi⁄
(
as
->
as_pba£2
,ás->
as_≈ages2
);

342 
	`as_zîo_ªgi⁄
(
as
->
as_°ackpba£
, 
DUMBVM_STACKPAGES
);

345 
	}
}

348 
	$as_com∂ëe_lﬂd
(
addr•a˚
 *
as
)

350 ()
as
;

352 
	}
}

355 
	$as_deföe_°ack
(
addr•a˚
 *
as
, 
vaddr_t
 *
°ack±r
)

357 
	`KASSERT
(
as
->
as_°ackpba£
 != 0);

359 *
°ack±r
 = 
USERSTACK
;

361 
	}
}

364 
	$as_c›y
(
addr•a˚
 *
ﬁd
, addr•a˚ **
ªt
)

366 
addr•a˚
 *
√w
;

368 
√w
 = 
	`as_¸óã
();

369 i‡(
√w
==
NULL
) {

370  
ENOMEM
;

373 
√w
->
as_vba£1
 = 
ﬁd
->as_vbase1;

374 
√w
->
as_≈ages1
 = 
ﬁd
->as_npages1;

375 
√w
->
as_vba£2
 = 
ﬁd
->as_vbase2;

376 
√w
->
as_≈ages2
 = 
ﬁd
->as_npages2;

379 i‡(
	`as_¥ï¨e_lﬂd
(
√w
)) {

380 
	`as_de°roy
(
√w
);

381  
ENOMEM
;

384 
	`KASSERT
(
√w
->
as_pba£1
 != 0);

385 
	`KASSERT
(
√w
->
as_pba£2
 != 0);

386 
	`KASSERT
(
√w
->
as_°ackpba£
 != 0);

388 
	`memmove
((*)
	`PADDR_TO_KVADDR
(
√w
->
as_pba£1
),

389 (c⁄° *)
	`PADDR_TO_KVADDR
(
ﬁd
->
as_pba£1
),

390 
ﬁd
->
as_≈ages1
*
PAGE_SIZE
);

392 
	`memmove
((*)
	`PADDR_TO_KVADDR
(
√w
->
as_pba£2
),

393 (c⁄° *)
	`PADDR_TO_KVADDR
(
ﬁd
->
as_pba£2
),

394 
ﬁd
->
as_≈ages2
*
PAGE_SIZE
);

396 
	`memmove
((*)
	`PADDR_TO_KVADDR
(
√w
->
as_°ackpba£
),

397 (c⁄° *)
	`PADDR_TO_KVADDR
(
ﬁd
->
as_°ackpba£
),

398 
DUMBVM_STACKPAGES
*
PAGE_SIZE
);

400 *
ªt
 = 
√w
;

402 
	}
}

	@arch/mips/vm/ram.c

30 
	~<ty≥s.h
>

31 
	~<lib.h
>

32 
	~<vm.h
>

33 
	~<maöbus.h
>

36 
vaddr_t
 
	gfú°‰ì
;

38 
∑ddr_t
 
	gfú°∑ddr
;

39 
∑ddr_t
 
	gœ°∑ddr
;

46 
	$øm_boŸ°øp
()

48 
size_t
 
ømsize
;

51 
ømsize
 = 
	`maöbus_ømsize
();

60 i‡(
ømsize
 > 512*1024*1024) {

61 
ømsize
 = 512*1024*1024;

64 
œ°∑ddr
 = 
ømsize
;

70 
fú°∑ddr
 = 
fú°‰ì
 - 
MIPS_KSEG0
;

72 
	`k¥ötf
("%ukÖhysical memoryávailable\n",

73 (
œ°∑ddr
-
fú°∑ddr
)/1024);

74 
	}
}

94 
∑ddr_t


95 
	$øm_°ólmem
(
≈ages
)

97 
size_t
 
size
;

98 
∑ddr_t
 
∑ddr
;

100 
size
 = 
≈ages
 * 
PAGE_SIZE
;

102 i‡(
fú°∑ddr
 + 
size
 > 
œ°∑ddr
) {

106 
∑ddr
 = 
fú°∑ddr
;

107 
fú°∑ddr
 +
size
;

109  
∑ddr
;

110 
	}
}

127 
∑ddr_t


128 
	$øm_gësize
()

130  
œ°∑ddr
;

131 
	}
}

145 
∑ddr_t


146 
	$øm_gëfú°‰ì
()

148 
∑ddr_t
 
ªt
;

150 
ªt
 = 
fú°∑ddr
;

151 
fú°∑ddr
 = 
œ°∑ddr
 = 0;

152  
ªt
;

153 
	}
}

	@arch/mips/vm/tlb-mips161.S

30 
	~<kîn/mùs/ªgdefs.h
>

31 
	~<mùs/•ecüÃeg.h
>

48 .
	gãxt


49 .
£t
 
	gn‹e‹dî


50 .
£t
 
	gmùs32


59 .
globl
 
	géb_øndom


60 .
ty≥
 
	géb_øndom
,@
	gfun˘i⁄


61 .
ít
 
éb_øndom


62 
	géb_øndom
:

63 
mtc0
 
a0
, 
c0_íåyhi


64 
mtc0
 
	ga1
, 
c0_íåylo


65 
s¢›


66 
s¢›


67 
ébwr


68 
j
 
ø


69 
	gn›


70 .
íd
 
	géb_øndom


79 .
	gãxt


80 .
globl
 
	géb_wrôe


81 .
ty≥
 
	géb_wrôe
,@
	gfun˘i⁄


82 .
ít
 
éb_wrôe


83 
	géb_wrôe
:

84 
mtc0
 
a0
, 
c0_íåyhi


85 
mtc0
 
	ga1
, 
c0_íåylo


86 
¶l
 
	gt0
, 
	ga2
, 
CIN_INDEXSHIFT


87 
mtc0
 
	gt0
, 
c0_ödex


88 
s¢›


89 
s¢›


90 
ébwi


91 
j
 
ø


92 
	gn›


93 .
íd
 
	géb_wrôe


103 .
	gãxt


104 .
globl
 
	géb_ªad


105 .
ty≥
 
	géb_ªad
,@
	gfun˘i⁄


106 .
ít
 
éb_ªad


107 
	géb_ªad
:

108 
¶l
 
t0
, 
	ga2
, 
CIN_INDEXSHIFT


109 
mtc0
 
	gt0
, 
c0_ödex


110 
s¢›


111 
s¢›


112 
ébr


113 
s¢›


114 
s¢›


115 
s¢›


116 
mfc0
 
	gt0
, 
c0_íåyhi


117 
mfc0
 
	gt1
, 
c0_íåylo


118 
sw
 
	gt0
, 0(
	ga0
)

119 
j
 
ø


120 
sw
 
	gt1
, 0(
	ga1
)

121 .
íd
 
	géb_ªad


131 .
	gãxt


132 .
globl
 
	géb_¥obe


133 .
ty≥
 
	géb_¥obe
,@
	gfun˘i⁄


134 .
ít
 
éb_¥obe


135 
	géb_¥obe
:

136 
mtc0
 
a0
, 
c0_íåyhi


137 
mtc0
 
	ga1
, 
c0_íåylo


138 
s¢›


139 
s¢›


140 
ébp


141 
s¢›


142 
s¢›


143 
mfc0
 
	gt0
, 
c0_ödex


150 
bgez
 
	gt0
, 1f

151 
n›


152 
addi
 
	gv0
, 
	gz0
, -1

153 
j
 
ø


154 
	gn›


158 
™di
 
t1
, 
	gt0
, 
CIN_INDEX


159 
j
 
ø


160 
§a
 
	gv0
, 
	gt1
, 
	gCIN_INDEXSHIFT


161 .
íd
 
	géb_¥obe


178 .
	gãxt


179 .
globl
 
	géb_ª£t


180 .
ty≥
 
	géb_ª£t
,@
	gfun˘i⁄


181 .
ít
 
éb_ª£t


182 
	géb_ª£t
:

183 
li
 
t0
, 0

184 
li
 
	gt1
, 0x81000000

186 
mtc0
 
$0
, 
c0_íåylo


187 
mtc0
 
	gt1
, 
c0_íåyhi


188 
s¢›


189 
s¢›


190 
ébp


191 
s¢›


192 
s¢›


193 
mfc0
 
	gt2
, 
c0_ödex


194 
bgez
 
	gt2
, 1b

195 
addiu
 
	gt1
,Å1, 0x1000

196 
mtc0
 
	gt0
, 
c0_ödex


197 
s¢›


198 
s¢›


199 
addiu
 
	gt0
,Å0, 0x100

200 
b√
 
	gt0
, 0x4000, 1b

201 
ébwi


202 
j
 
ø


203 
	gn›


204 .
íd
 
	géb_ª£t


	@arch/sys161/dev/lamebus_machdep.c

30 
	~<ty≥s.h
>

31 
	~<kîn/uni°d.h
>

32 
	~<lib.h
>

33 
	~<mùs/•ecüÃeg.h
>

34 
	~<mùs/å≠‰ame.h
>

35 
	~<˝u.h
>

36 
	~<•l.h
>

37 
	~<˛ock.h
>

38 
	~<thªad.h
>

39 
	~<cuºít.h
>

40 
	~<memb¨.h
>

41 
	~<synch.h
>

42 
	~<maöbus.h
>

43 
	~<sys161/bus.h
>

44 
	~<œmebus/œmebus.h
>

45 
	~"autoc⁄f.h
"

53 
	#CPU_FREQUENCY
 25000000

	)

64 
	$mùs_timî_£t
(
uöt32_t
 
cou¡
)

70 
__asm
 volatile(

75 :: "r" (
cou¡
));

76 
	}
}

83 
œmebus_so·c
 *
	gœmebus
;

86 
	$maöbus_boŸ°øp
()

89 
	`KASSERT
(
cuπhªad
->
t_cur•l
 > 0);

92 
œmebus
 = 
	`œmebus_öô
();

95 
	`œmebus_föd_˝us
(
œmebus
);

100 
	`k¥ötf
("lamebus0 (system main bus)\n");

107 
	`•l0
();

113 
	`autoc⁄f_œmebus
(
œmebus
, 0);

118 
	`mùs_timî_£t
(
CPU_FREQUENCY
 / 
HZ
);

119 
	}
}

125 
	$maöbus_°¨t_˝us
()

127 
	`œmebus_°¨t_˝us
(
œmebus
);

128 
	}
}

136 
	$œmebus_m≠_¨ó
(
œmebus_so·c
 *
bus
, 
¶Ÿ
, 
uöt32_t
 
off£t
)

138 
uöt32_t
 
addªss
;

140 ()
bus
;

142 
	`KASSERT
(
¶Ÿ
 >0 && slŸ < 
LB_NSLOTS
);

144 
addªss
 = 
LB_BASEADDR
 + 
¶Ÿ
*
LB_SLOT_SIZE
 + 
off£t
;

145  (*)
addªss
;

146 
	}
}

151 
uöt32_t


152 
	$œmebus_ªad_ªgi°î
(
œmebus_so·c
 *
bus
, 
¶Ÿ
, 
uöt32_t
 
off£t
)

154 
uöt32_t
 *
±r
;

156 
±r
 = 
	`œmebus_m≠_¨ó
(
bus
, 
¶Ÿ
, 
off£t
);

162 
	`memb¨_lﬂd_lﬂd
();

164  *
±r
;

165 
	}
}

171 
	$œmebus_wrôe_ªgi°î
(
œmebus_so·c
 *
bus
, 
¶Ÿ
,

172 
uöt32_t
 
off£t
, uöt32_à
vÆ
)

174 
uöt32_t
 *
±r
;

176 
±r
 = 
	`œmebus_m≠_¨ó
(
bus
, 
¶Ÿ
, 
off£t
);

177 *
±r
 = 
vÆ
;

183 
	`memb¨_°‹e_°‹e
();

184 
	}
}

191 
	$maöbus_powîoff
()

199 
	`œmebus_powîoff
(
œmebus
);

200 
	}
}

206 
	$maöbus_ªboŸ
()

215 
	`k¥ötf
("CannotÑeboot -Öowering off instead, sorry.\n");

216 
	`maöbus_powîoff
();

217 
	}
}

225 
	$maöbus_hÆt
()

227 
	`˝u_hÆt
();

228 
	}
}

238 
	$maöbus_∑nic
()

240 
	`maöbus_powîoff
();

241 
	}
}

247 
uöt32_t


248 
	$maöbus_ømsize
()

250 
uöt32_t
 
ømsize
;

252 
ømsize
 = 
	`œmebus_ømsize
();

262 i‡(
ømsize
 > 508*1024*1024) {

263 
ømsize
 = 508*1024*1024;

266  
ømsize
;

267 
	}
}

273 
	$maöbus_£nd_ùi
(
˝u
 *
èrgë
)

275 
	`œmebus_as£π_ùi
(
œmebus
, 
èrgë
);

276 
	}
}

283 
	#LAMEBUS_IRQ_BIT
 0x00000400

	)

284 
	#LAMEBUS_IPI_BIT
 0x00000800

	)

285 
	#MIPS_TIMER_BIT
 0x00008000

	)

288 
	$maöbus_öãºu±
(
å≠‰ame
 *
tf
)

290 
uöt32_t
 
ˇu£
;

291 
boﬁ
 
£í
 = 
Ál£
;

294 
	`KASSERT
(
cuπhªad
->
t_cur•l
 > 0);

296 
ˇu£
 = 
tf
->
tf_ˇu£
;

297 i‡(
ˇu£
 & 
LAMEBUS_IRQ_BIT
) {

298 
	`œmebus_öãºu±
(
œmebus
);

299 
£í
 = 
åue
;

301 i‡(
ˇu£
 & 
LAMEBUS_IPI_BIT
) {

302 
	`öãΩro˚ss‹_öãºu±
();

303 
	`œmebus_˛ór_ùi
(
œmebus
, 
cur˝u
);

304 
£í
 = 
åue
;

306 i‡(
ˇu£
 & 
MIPS_TIMER_BIT
) {

308 
	`mùs_timî_£t
(
CPU_FREQUENCY
 / 
HZ
);

310 
	`h¨d˛ock
();

311 
£í
 = 
åue
;

314 i‡(!
£í
) {

315 i‡((
ˇu£
 & 
CCA_IRQS
) == 0) {

330 
	`∑nic
("Unknown interrupt; causeÑegister is %08x\n",

331 
ˇu£
);

334 
	}
}

	@arch/sys161/include/bus.h

30 #i‚de‡
_SYS161_BUS_H_


31 
	#_SYS161_BUS_H_


	)

40 
	~<machöe/vm.h
>

41 
	~<œmebus/œmebus.h
>

43 
	#bus_wrôe_ªgi°î
(
bus
, 
¶Ÿ
, 
off£t
, 
vÆ
) \

44 
	`œmebus_wrôe_ªgi°î
(
bus
, 
¶Ÿ
, 
off£t
, 
vÆ
)

	)

46 
	#bus_ªad_ªgi°î
(
bus
, 
¶Ÿ
, 
off£t
) \

47 
	`œmebus_ªad_ªgi°î
(
bus
, 
¶Ÿ
, 
off£t
)

	)

49 
	#bus_m≠_¨ó
(
bus
, 
¶Ÿ
, 
off£t
) \

50 
	`œmebus_m≠_¨ó
(
bus
, 
¶Ÿ
, 
off£t
)

	)

57 
	#LB_BASEADDR
 (
MIPS_KSEG1
 + 0x1„00000)

	)

	@arch/sys161/include/maxcpus.h

30 #i‚de‡
_SYS161_MAXCPUS_H_


31 
	#_SYS161_MAXCPUS_H_


	)

42 
	#MAXCPUS
 32

	)

	@arch/sys161/main/start.S

30 
	~<kîn/mùs/ªgdefs.h
>

31 
	~<mùs/•ecüÃeg.h
>

33 .
£t
 
	gn‹e‹dî


35 .
	gãxt


36 .
globl
 
	g__°¨t


37 .
ty≥
 
	g__°¨t
,@
	gfun˘i⁄


38 .
ít
 
__°¨t


39 
	g__°¨t
:

52 .
‰ame
 
•
, 24, 
	g$0


53 .
	gmask
 0x80000000, -4

54 
addiu
 
	g•
, sp, -24

55 
sw
 
	gø
, 20(
	g•
)

89 
œ
 
	gs0
, 
_íd


91 
move
 
	ga1
, 
a0


92 
move
 
	ga0
, 
s0


93 
jÆ
 
°r˝y


94 
n›


96 
move
 
	ga0
, 
s0


97 
jÆ
 
°æí


98 
n›


100 
add
 
	gt0
, 
	gs0
, 
v0


101 
addi
 
	gt0
,Å0, 1

104 
addi
 
	gt0
,Å0, 4095

105 
li
 
	gt1
, 0xfffff000

106 
™d
 
	gt0
,Å0, 
t1


108 
addi
 
	gt0
,Å0, 4096

110 
move
 
	g•
, 
t0


112 
sw
 
	gt0
, 
fú°‰ì


127 
addiu
 
	g•
, sp, -24

128 
sw
 
	g$0
, 20(
	g•
)

134 
li
 
	ga0
, 
EXADDR_UTLB


135 
œ
 
	ga1
, 
mùs_uéb_h™dÀr


136 
œ
 
	ga2
, 
mùs_uéb_íd


137 
sub
 
	ga2
,á2, 
a1


138 
jÆ
 
memmove


139 
n›


141 
li
 
	ga0
, 
EXADDR_GENERAL


142 
œ
 
	ga1
, 
mùs_gíîÆ_h™dÀr


143 
œ
 
	ga2
, 
mùs_gíîÆ_íd


144 
sub
 
	ga2
,á2, 
a1


145 
jÆ
 
memmove


146 
n›


152 
jÆ
 
mùs_Êushiˇche


153 
n›


158 
jÆ
 
éb_ª£t


159 
n›


164 
li
 
	gs7
, 0

190 
li
 
	gt0
, 
CST_IRQMASK


191 
mtc0
 
	gt0
, 
c0_°©us


201 
mtc0
 
	g$0
, 
c0_c⁄ãxt


209 
œ
 
	ggp
, 
_gp


215 
jÆ
 
kmaö


216 
move
 
	ga0
, 
	gs0


224 
œ
 
a0
, 
∑nic°r


225 
jÆ
 
∑nic


226 
n›


227 
	gj
 1b

228 
	gn›


229 .
íd
 
	g__°¨t


231 .
rd©a


232 
	g∑nic°r
:

233 .
asciz
 "kmainÑeturned\n"

238 .
ãxt


239 .
globl
 
˝u_°¨t_£c⁄d¨y


240 .
ty≥
 
˝u_°¨t_£c⁄d¨y
,@
	gfun˘i⁄


241 .
ít
 
˝u_°¨t_£c⁄d¨y


242 
	g˝u_°¨t_£c⁄d¨y
:

266 .
‰ame
 
•
, 24, 
	g$0


267 .
	gmask
 0x80000000, -4

268 
addiu
 
	g•
, sp, -24

269 
sw
 
	gø
, 20(
	g•
)

274 
lui
 
	gt0
, %
	$hi
(
˝u°acks
)

275 
¶l
 
v0
, 
a0
, 2

276 
addu
 
t0
,Å0, 
v0


277 
lw
 
•
, %
	$lo
(
˝u°acks
)(
t0
)

282 
lui
 
t0
, %
	$hi
(
˝uthªads
)

283 
¶l
 
v0
, 
a0
, 2

284 
addu
 
t0
,Å0, 
v0


285 
lw
 
s7
, %
	$lo
(
˝uthªads
)(
t0
)

290 
jÆ
 
éb_ª£t


291 
n›


296 
li
 
t0
, 
CST_IRQMASK


297 
mtc0
 
t0
, 
c0_°©us


303 
¶l
 
v0
, 
a0
, 
CTX_PTBASESHIFT


304 
mtc0
 
v0
, 
c0_c⁄ãxt


313 
li
 
v0
, 100000

314 
mtc0
 
v0
, 
c0_com∑ª


320 
œ
 
gp
, 
_gp


326 
addiu
 
•
, sp, -24

327 
sw
 
z0
, 20(
•
)

333 
j
 
˝u_h©ch


334 
n›


335 .
íd
 
˝u_°¨t_£c⁄d¨y


	@compile/DUMBVM/.depend.__printf.c

1 
	g__¥ötf
.
	go
: ../../../
comm⁄
/
libc
/
¥ötf
/
__¥ötf
.
c
 ../../
ö˛ude
/
ty≥s
.
h
 \

2 ../../
ö˛ude
/
kîn
/
ty≥s
.
h
 
ö˛udñöks
/kîn/
machöe
/types.h \

3 
ö˛udñöks
/
machöe
/
ty≥s
.
h
 ../../
ö˛ude
/
lib
.h ../../ö˛ude/
cdefs
.h \

4 
›t
-
nﬂs£πs
.
h
 ../../
ö˛ude
/
°d¨g
.h

	@compile/DUMBVM/.depend.adddi3.c

1 
	gadddi3
.
	go
: ../../../
comm⁄
/
gcc
-
mûlicode
/
adddi3
.
c
 \

2 ../../../
comm⁄
/
gcc
-
mûlicode
/
l⁄gl⁄g
.
h
 ../../
ö˛ude
/
ty≥s
.h \

3 ../../
ö˛ude
/
kîn
/
ty≥s
.
h
 
ö˛udñöks
/kîn/
machöe
/types.h \

4 
ö˛udñöks
/
machöe
/
ty≥s
.
h
 ../../
ö˛ude
/
ídün
.h \

5 ../../
ö˛ude
/
kîn
/
ídün
.
h
 
ö˛udñöks
/kîn/
machöe
/endian.h \

6 ../../
ö˛ude
/
limôs
.
h
 ../../ö˛ude/
kîn
/limits.h

	@compile/DUMBVM/.depend.anddi3.c

1 
	g™ddi3
.
	go
: ../../../
comm⁄
/
gcc
-
mûlicode
/
™ddi3
.
c
 \

2 ../../../
comm⁄
/
gcc
-
mûlicode
/
l⁄gl⁄g
.
h
 ../../
ö˛ude
/
ty≥s
.h \

3 ../../
ö˛ude
/
kîn
/
ty≥s
.
h
 
ö˛udñöks
/kîn/
machöe
/types.h \

4 
ö˛udñöks
/
machöe
/
ty≥s
.
h
 ../../
ö˛ude
/
ídün
.h \

5 ../../
ö˛ude
/
kîn
/
ídün
.
h
 
ö˛udñöks
/kîn/
machöe
/endian.h \

6 ../../
ö˛ude
/
limôs
.
h
 ../../ö˛ude/
kîn
/limits.h

	@compile/DUMBVM/.depend.array.c

1 
	g¨øy
.
	go
: ../../
lib
/
¨øy
.
c
 ../../
ö˛ude
/
ty≥s
.
h
 \

2 ../../
ö˛ude
/
kîn
/
ty≥s
.
h
 
ö˛udñöks
/kîn/
machöe
/types.h \

3 
ö˛udñöks
/
machöe
/
ty≥s
.
h
 ../../
ö˛ude
/
kîn
/
î∫o
.h \

4 ../../
ö˛ude
/
lib
.
h
 ../../ö˛ude/
cdefs
.h 
›t
-
nﬂs£πs
.h \

5 ../../
ö˛ude
/
¨øy
.
h


	@compile/DUMBVM/.depend.arraytest.c

1 
	g¨øyã°
.
	go
: ../../
ã°
/
¨øyã°
.
c
 ../../
ö˛ude
/
ty≥s
.
h
 \

2 ../../
ö˛ude
/
kîn
/
ty≥s
.
h
 
ö˛udñöks
/kîn/
machöe
/types.h \

3 
ö˛udñöks
/
machöe
/
ty≥s
.
h
 ../../
ö˛ude
/
lib
.h ../../ö˛ude/
cdefs
.h \

4 
›t
-
nﬂs£πs
.
h
 ../../
ö˛ude
/
¨øy
.h ../../ö˛ude/
ã°
.h

	@compile/DUMBVM/.depend.ashldi3.c

1 
	gashldi3
.
	go
: ../../../
comm⁄
/
gcc
-
mûlicode
/
ashldi3
.
c
 \

2 ../../../
comm⁄
/
gcc
-
mûlicode
/
l⁄gl⁄g
.
h
 ../../
ö˛ude
/
ty≥s
.h \

3 ../../
ö˛ude
/
kîn
/
ty≥s
.
h
 
ö˛udñöks
/kîn/
machöe
/types.h \

4 
ö˛udñöks
/
machöe
/
ty≥s
.
h
 ../../
ö˛ude
/
ídün
.h \

5 ../../
ö˛ude
/
kîn
/
ídün
.
h
 
ö˛udñöks
/kîn/
machöe
/endian.h \

6 ../../
ö˛ude
/
limôs
.
h
 ../../ö˛ude/
kîn
/limits.h

	@compile/DUMBVM/.depend.ashrdi3.c

1 
	gashrdi3
.
	go
: ../../../
comm⁄
/
gcc
-
mûlicode
/
ashrdi3
.
c
 \

2 ../../../
comm⁄
/
gcc
-
mûlicode
/
l⁄gl⁄g
.
h
 ../../
ö˛ude
/
ty≥s
.h \

3 ../../
ö˛ude
/
kîn
/
ty≥s
.
h
 
ö˛udñöks
/kîn/
machöe
/types.h \

4 
ö˛udñöks
/
machöe
/
ty≥s
.
h
 ../../
ö˛ude
/
ídün
.h \

5 ../../
ö˛ude
/
kîn
/
ídün
.
h
 
ö˛udñöks
/kîn/
machöe
/endian.h \

6 ../../
ö˛ude
/
limôs
.
h
 ../../ö˛ude/
kîn
/limits.h

	@compile/DUMBVM/.depend.atoi.c

1 
	g©oi
.
	go
: ../../../
comm⁄
/
libc
/
°dlib
/
©oi
.
c
 ../../
ö˛ude
/
ty≥s
.
h
 \

2 ../../
ö˛ude
/
kîn
/
ty≥s
.
h
 
ö˛udñöks
/kîn/
machöe
/types.h \

3 
ö˛udñöks
/
machöe
/
ty≥s
.
h
 ../../
ö˛ude
/
lib
.h ../../ö˛ude/
cdefs
.h \

4 
›t
-
nﬂs£πs
.
h


	@compile/DUMBVM/.depend.autoconf.c

1 
	gautoc⁄f
.
	go
: ../../
compûe
/
DUMBVM
/
autoc⁄f
.
c
 ../../
ö˛ude
/
ty≥s
.
h
 \

2 ../../
ö˛ude
/
kîn
/
ty≥s
.
h
 
ö˛udñöks
/kîn/
machöe
/types.h \

3 
ö˛udñöks
/
machöe
/
ty≥s
.
h
 ../../
ö˛ude
/
lib
.h ../../ö˛ude/
cdefs
.h \

4 
›t
-
nﬂs£πs
.
h
 ../../
compûe
/
DUMBVM
/
autoc⁄f
.h

	@compile/DUMBVM/.depend.beep.c

1 
	gbìp
.
	go
: ../../
dev
/
gíîic
/
bìp
.
c
 ../../
ö˛ude
/
ty≥s
.
h
 \

2 ../../
ö˛ude
/
kîn
/
ty≥s
.
h
 
ö˛udñöks
/kîn/
machöe
/types.h \

3 
ö˛udñöks
/
machöe
/
ty≥s
.
h
 ../../
ö˛ude
/
kîn
/
î∫o
.h \

4 ../../
ö˛ude
/
lib
.
h
 ../../ö˛ude/
cdefs
.h 
›t
-
nﬂs£πs
.h \

5 ../../
dev
/
gíîic
/
bìp
.
h
 
autoc⁄f
.h

	@compile/DUMBVM/.depend.beep_ltimer.c

1 
	gbìp_…imî
.
	go
: ../../
dev
/
œmebus
/
bìp_…imî
.
c
 ../../
ö˛ude
/
ty≥s
.
h
 \

2 ../../
ö˛ude
/
kîn
/
ty≥s
.
h
 
ö˛udñöks
/kîn/
machöe
/types.h \

3 
ö˛udñöks
/
machöe
/
ty≥s
.
h
 ../../
ö˛ude
/
lib
.h ../../ö˛ude/
cdefs
.h \

4 
›t
-
nﬂs£πs
.
h
 ../../
dev
/
gíîic
/
bìp
.h ../../dev/
œmebus
/
…imî
.h \

5 
autoc⁄f
.
h


	@compile/DUMBVM/.depend.bitmap.c

1 
	gbôm≠
.
	go
: ../../
lib
/
bôm≠
.
c
 ../../
ö˛ude
/
ty≥s
.
h
 \

2 ../../
ö˛ude
/
kîn
/
ty≥s
.
h
 
ö˛udñöks
/kîn/
machöe
/types.h \

3 
ö˛udñöks
/
machöe
/
ty≥s
.
h
 ../../
ö˛ude
/
kîn
/
î∫o
.h \

4 ../../
ö˛ude
/
lib
.
h
 ../../ö˛ude/
cdefs
.h 
›t
-
nﬂs£πs
.h \

5 ../../
ö˛ude
/
bôm≠
.
h


	@compile/DUMBVM/.depend.bitmaptest.c

1 
	gbôm≠ã°
.
	go
: ../../
ã°
/
bôm≠ã°
.
c
 ../../
ö˛ude
/
ty≥s
.
h
 \

2 ../../
ö˛ude
/
kîn
/
ty≥s
.
h
 
ö˛udñöks
/kîn/
machöe
/types.h \

3 
ö˛udñöks
/
machöe
/
ty≥s
.
h
 ../../
ö˛ude
/
lib
.h ../../ö˛ude/
cdefs
.h \

4 
›t
-
nﬂs£πs
.
h
 ../../
ö˛ude
/
bôm≠
.h ../../ö˛ude/
ã°
.h

	@compile/DUMBVM/.depend.bswap.c

1 
	gbsw≠
.
	go
: ../../
lib
/
bsw≠
.
c
 ../../
ö˛ude
/
ty≥s
.
h
 \

2 ../../
ö˛ude
/
kîn
/
ty≥s
.
h
 
ö˛udñöks
/kîn/
machöe
/types.h \

3 
ö˛udñöks
/
machöe
/
ty≥s
.
h
 ../../
ö˛ude
/
ídün
.h \

4 ../../
ö˛ude
/
kîn
/
ídün
.
h
 
ö˛udñöks
/kîn/
machöe
/endian.h

	@compile/DUMBVM/.depend.bzero.c

1 
	gbzîo
.
	go
: ../../../
comm⁄
/
libc
/
°rög
/
bzîo
.
c
 ../../
ö˛ude
/
ty≥s
.
h
 \

2 ../../
ö˛ude
/
kîn
/
ty≥s
.
h
 
ö˛udñöks
/kîn/
machöe
/types.h \

3 
ö˛udñöks
/
machöe
/
ty≥s
.
h
 ../../
ö˛ude
/
lib
.h ../../ö˛ude/
cdefs
.h \

4 
›t
-
nﬂs£πs
.
h


	@compile/DUMBVM/.depend.cache-mips161.S

1 
	gˇche
-
	gmùs161
.
	go
: ../../
¨ch
/
mùs
/
loc‹e
/
ˇche
-
mùs161
.
S
 \

2 
ö˛udñöks
/
kîn
/
mùs
/
ªgdefs
.
h


	@compile/DUMBVM/.depend.clock.c

1 
	g˛ock
.
	go
: ../../
thªad
/
˛ock
.
c
 ../../
ö˛ude
/
ty≥s
.
h
 \

2 ../../
ö˛ude
/
kîn
/
ty≥s
.
h
 
ö˛udñöks
/kîn/
machöe
/types.h \

3 
ö˛udñöks
/
machöe
/
ty≥s
.
h
 ../../
ö˛ude
/
lib
.h ../../ö˛ude/
cdefs
.h \

4 
›t
-
nﬂs£πs
.
h
 ../../
ö˛ude
/
˝u
.h ../../ö˛ude/
•ölock
.h \

5 
ö˛udñöks
/
machöe
/
•ölock
.
h
 ../../
ö˛ude
/
thªadli°
.h \

6 
ö˛udñöks
/
machöe
/
vm
.
h
 ../../
ö˛ude
/
wch™
.h ../../ö˛ude/
˛ock
.h \

7 ../../
ö˛ude
/
kîn
/
time
.
h
 
›t
-
synch¥obs
.h ../../ö˛ude/
thªad
.h \

8 ../../
ö˛ude
/
¨øy
.
h
 
ö˛udñöks
/
machöe
/
thªad
.h \

9 ../../
ö˛ude
/
£tjmp
.
h
 
ö˛udñöks
/
kîn
/
machöe
/setjmp.h \

10 ../../
ö˛ude
/
cuºít
.
h
 
ö˛udñöks
/
machöe
/current.h

	@compile/DUMBVM/.depend.cmpdi2.c

1 
	gcmpdi2
.
	go
: ../../../
comm⁄
/
gcc
-
mûlicode
/
cmpdi2
.
c
 \

2 ../../../
comm⁄
/
gcc
-
mûlicode
/
l⁄gl⁄g
.
h
 ../../
ö˛ude
/
ty≥s
.h \

3 ../../
ö˛ude
/
kîn
/
ty≥s
.
h
 
ö˛udñöks
/kîn/
machöe
/types.h \

4 
ö˛udñöks
/
machöe
/
ty≥s
.
h
 ../../
ö˛ude
/
ídün
.h \

5 ../../
ö˛ude
/
kîn
/
ídün
.
h
 
ö˛udñöks
/kîn/
machöe
/endian.h \

6 ../../
ö˛ude
/
limôs
.
h
 ../../ö˛ude/
kîn
/limits.h

	@compile/DUMBVM/.depend.con_lser.c

1 
	gc⁄_l£r
.
	go
: ../../
dev
/
œmebus
/
c⁄_l£r
.
c
 ../../
ö˛ude
/
ty≥s
.
h
 \

2 ../../
ö˛ude
/
kîn
/
ty≥s
.
h
 
ö˛udñöks
/kîn/
machöe
/types.h \

3 
ö˛udñöks
/
machöe
/
ty≥s
.
h
 ../../
ö˛ude
/
lib
.h ../../ö˛ude/
cdefs
.h \

4 
›t
-
nﬂs£πs
.
h
 ../../
dev
/
gíîic
/
c⁄sﬁe
.h ../../dev/
œmebus
/
l£r
.h \

5 ../../
ö˛ude
/
•ölock
.
h
 
ö˛udñöks
/
machöe
/•ölock.h 
autoc⁄f
.h

	@compile/DUMBVM/.depend.console.c

1 
	gc⁄sﬁe
.
	go
: ../../
dev
/
gíîic
/
c⁄sﬁe
.
c
 ../../
ö˛ude
/
ty≥s
.
h
 \

2 ../../
ö˛ude
/
kîn
/
ty≥s
.
h
 
ö˛udñöks
/kîn/
machöe
/types.h \

3 
ö˛udñöks
/
machöe
/
ty≥s
.
h
 ../../
ö˛ude
/
kîn
/
î∫o
.h \

4 ../../
ö˛ude
/
lib
.
h
 ../../ö˛ude/
cdefs
.h 
›t
-
nﬂs£πs
.h \

5 ../../
ö˛ude
/
uio
.
h
 ../../ö˛ude/
kîn
/
iovec
.h ../../ö˛ude/
˝u
.h \

6 ../../
ö˛ude
/
•ölock
.
h
 
ö˛udñöks
/
machöe
/spinlock.h \

7 ../../
ö˛ude
/
thªadli°
.
h
 
ö˛udñöks
/
machöe
/
vm
.h \

8 ../../
ö˛ude
/
thªad
.
h
 ../../ö˛ude/
¨øy
.h \

9 
ö˛udñöks
/
machöe
/
thªad
.
h
 ../../
ö˛ude
/
£tjmp
.h \

10 
ö˛udñöks
/
kîn
/
machöe
/
£tjmp
.
h
 ../../
ö˛ude
/
cuºít
.h \

11 
ö˛udñöks
/
machöe
/
cuºít
.
h
 ../../
ö˛ude
/
synch
.h \

12 ../../
dev
/
gíîic
/
c⁄sﬁe
.
h
 ../../
ö˛ude
/
vfs
.h ../../ö˛ude/
devi˚
.h \

13 
autoc⁄f
.
h


	@compile/DUMBVM/.depend.copyinout.c

1 
	gc›yöout
.
	go
: ../../
vm
/
c›yöout
.
c
 ../../
ö˛ude
/
ty≥s
.
h
 \

2 ../../
ö˛ude
/
kîn
/
ty≥s
.
h
 
ö˛udñöks
/kîn/
machöe
/types.h \

3 
ö˛udñöks
/
machöe
/
ty≥s
.
h
 ../../
ö˛ude
/
kîn
/
î∫o
.h \

4 ../../
ö˛ude
/
lib
.
h
 ../../ö˛ude/
cdefs
.h 
›t
-
nﬂs£πs
.h \

5 ../../
ö˛ude
/
£tjmp
.
h
 
ö˛udñöks
/
kîn
/
machöe
/setjmp.h \

6 ../../
ö˛ude
/
thªad
.
h
 ../../ö˛ude/
¨øy
.h ../../ö˛ude/
•ölock
.h \

7 
ö˛udñöks
/
machöe
/
•ölock
.
h
 ../../
ö˛ude
/
thªadli°
.h \

8 
ö˛udñöks
/
machöe
/
thªad
.
h
 ../../
ö˛ude
/
cuºít
.h \

9 
ö˛udñöks
/
machöe
/
cuºít
.
h
 ../../
ö˛ude
/
vm
.h \

10 
ö˛udñöks
/
machöe
/
vm
.
h
 ../../
ö˛ude
/
c›yöout
.h

	@compile/DUMBVM/.depend.cpu.c

1 
	g˝u
.
	go
: ../../
¨ch
/
mùs
/
thªad
/
˝u
.
c
 ../../
ö˛ude
/
ty≥s
.
h
 \

2 ../../
ö˛ude
/
kîn
/
ty≥s
.
h
 
ö˛udñöks
/kîn/
machöe
/types.h \

3 
ö˛udñöks
/
machöe
/
ty≥s
.
h
 ../../
ö˛ude
/
lib
.h ../../ö˛ude/
cdefs
.h \

4 
›t
-
nﬂs£πs
.
h
 
ö˛udñöks
/
mùs
/
•ecüÃeg
.h \

5 
ö˛udñöks
/
mùs
/
å≠‰ame
.
h
 in˛udñöks/
∂©f‹m
/
max˝us
.h \

6 ../../
ö˛ude
/
˝u
.
h
 ../../ö˛ude/
•ölock
.h \

7 
ö˛udñöks
/
machöe
/
•ölock
.
h
 ../../
ö˛ude
/
thªadli°
.h \

8 
ö˛udñöks
/
machöe
/
vm
.
h
 ../../
ö˛ude
/
thªad
.h ../../ö˛ude/
¨øy
.h \

9 
ö˛udñöks
/
machöe
/
thªad
.
h
 ../../
ö˛ude
/
£tjmp
.h \

10 
ö˛udñöks
/
kîn
/
machöe
/
£tjmp
.
h


	@compile/DUMBVM/.depend.device.c

1 
	gdevi˚
.
	go
: ../../
vfs
/
devi˚
.
c
 ../../
ö˛ude
/
ty≥s
.
h
 \

2 ../../
ö˛ude
/
kîn
/
ty≥s
.
h
 
ö˛udñöks
/kîn/
machöe
/types.h \

3 
ö˛udñöks
/
machöe
/
ty≥s
.
h
 ../../
ö˛ude
/
kîn
/
î∫o
.h \

4 ../../
ö˛ude
/
kîn
/
f˙é
.
h
 ../../ö˛ude/
°©
.h \

5 ../../
ö˛ude
/
kîn
/
°©
.
h
 ../../ö˛ude/kîn/
°©ty≥s
.h \

6 ../../
ö˛ude
/
lib
.
h
 ../../ö˛ude/
cdefs
.h 
›t
-
nﬂs£πs
.h \

7 ../../
ö˛ude
/
uio
.
h
 ../../ö˛ude/
kîn
/
iovec
.h ../../ö˛ude/
synch
.h \

8 ../../
ö˛ude
/
•ölock
.
h
 
ö˛udñöks
/
machöe
/spinlock.h \

9 ../../
ö˛ude
/
vnode
.
h
 ../../ö˛ude/
devi˚
.h

	@compile/DUMBVM/.depend.devnull.c

1 
	gdevnuŒ
.
	go
: ../../
vfs
/
devnuŒ
.
c
 ../../
ö˛ude
/
ty≥s
.
h
 \

2 ../../
ö˛ude
/
kîn
/
ty≥s
.
h
 
ö˛udñöks
/kîn/
machöe
/types.h \

3 
ö˛udñöks
/
machöe
/
ty≥s
.
h
 ../../
ö˛ude
/
kîn
/
î∫o
.h \

4 ../../
ö˛ude
/
lib
.
h
 ../../ö˛ude/
cdefs
.h 
›t
-
nﬂs£πs
.h \

5 ../../
ö˛ude
/
uio
.
h
 ../../ö˛ude/
kîn
/
iovec
.h ../../ö˛ude/
vfs
.h \

6 ../../
ö˛ude
/
¨øy
.
h
 ../../ö˛ude/
devi˚
.h

	@compile/DUMBVM/.depend.divdi3.c

1 
	gdivdi3
.
	go
: ../../../
comm⁄
/
gcc
-
mûlicode
/
divdi3
.
c
 \

2 ../../../
comm⁄
/
gcc
-
mûlicode
/
l⁄gl⁄g
.
h
 ../../
ö˛ude
/
ty≥s
.h \

3 ../../
ö˛ude
/
kîn
/
ty≥s
.
h
 
ö˛udñöks
/kîn/
machöe
/types.h \

4 
ö˛udñöks
/
machöe
/
ty≥s
.
h
 ../../
ö˛ude
/
ídün
.h \

5 ../../
ö˛ude
/
kîn
/
ídün
.
h
 
ö˛udñöks
/kîn/
machöe
/endian.h \

6 ../../
ö˛ude
/
limôs
.
h
 ../../ö˛ude/
kîn
/limits.h

	@compile/DUMBVM/.depend.dumbvm.c

1 
	gdumbvm
.
	go
: ../../
¨ch
/
mùs
/
vm
/
dumbvm
.
c
 ../../
ö˛ude
/
ty≥s
.
h
 \

2 ../../
ö˛ude
/
kîn
/
ty≥s
.
h
 
ö˛udñöks
/kîn/
machöe
/types.h \

3 
ö˛udñöks
/
machöe
/
ty≥s
.
h
 ../../
ö˛ude
/
kîn
/
î∫o
.h \

4 ../../
ö˛ude
/
lib
.
h
 ../../ö˛ude/
cdefs
.h 
›t
-
nﬂs£πs
.h \

5 ../../
ö˛ude
/
•l
.
h
 ../../ö˛ude/
•ölock
.h \

6 
ö˛udñöks
/
machöe
/
•ölock
.
h
 ../../
ö˛ude
/
¥oc
.h \

7 ../../
ö˛ude
/
thªad
.
h
 ../../ö˛ude/
¨øy
.h ../../ö˛ude/
thªadli°
.h \

8 
ö˛udñöks
/
machöe
/
thªad
.
h
 ../../
ö˛ude
/
£tjmp
.h \

9 
ö˛udñöks
/
kîn
/
machöe
/
£tjmp
.
h
 ../../
ö˛ude
/
fûëabÀ
.h \

10 ../../
ö˛ude
/
vnode
.
h
 ../../ö˛ude/
synch
.h ../../ö˛ude/
pid
.h \

11 ../../
ö˛ude
/
bôm≠
.
h
 ../../ö˛ude/
cuºít
.h \

12 
ö˛udñöks
/
machöe
/
cuºít
.
h
 in˛udñöks/
mùs
/
éb
.h \

13 ../../
ö˛ude
/
addr•a˚
.
h
 ../../ö˛ude/
vm
.h 
ö˛udñöks
/
machöe
/vm.h \

14 
›t
-
dumbvm
.
h


	@compile/DUMBVM/.depend.emu.c

1 
	gemu
.
	go
: ../../
dev
/
œmebus
/
emu
.
c
 ../../
ö˛ude
/
ty≥s
.
h
 \

2 ../../
ö˛ude
/
kîn
/
ty≥s
.
h
 
ö˛udñöks
/kîn/
machöe
/types.h \

3 
ö˛udñöks
/
machöe
/
ty≥s
.
h
 ../../
ö˛ude
/
kîn
/
î∫o
.h \

4 ../../
ö˛ude
/
kîn
/
f˙é
.
h
 ../../ö˛ude/
°©
.h \

5 ../../
ö˛ude
/
kîn
/
°©
.
h
 ../../ö˛ude/kîn/
°©ty≥s
.h \

6 ../../
ö˛ude
/
lib
.
h
 ../../ö˛ude/
cdefs
.h 
›t
-
nﬂs£πs
.h \

7 ../../
ö˛ude
/
¨øy
.
h
 ../../ö˛ude/
uio
.h ../../ö˛ude/
kîn
/
iovec
.h \

8 ../../
ö˛ude
/
memb¨
.
h
 
ö˛udñöks
/
machöe
/membar.h \

9 ../../
ö˛ude
/
synch
.
h
 ../../ö˛ude/
•ölock
.h \

10 
ö˛udñöks
/
machöe
/
•ölock
.
h
 ../../
dev
/
œmebus
/
emu
.h \

11 
ö˛udñöks
/
∂©f‹m
/
bus
.
h
 in˛udñöks/
machöe
/
vm
.h \

12 ../../
dev
/
œmebus
/œmebus.
h
 ../../
ö˛ude
/
˝u
.h \

13 ../../
ö˛ude
/
thªadli°
.
h
 ../../ö˛ude/
vfs
.h ../../ö˛ude/
emufs
.h \

14 ../../
ö˛ude
/
fs
.
h
 ../../ö˛ude/
vnode
.h 
autoc⁄f
.h

	@compile/DUMBVM/.depend.emu_att.c

1 
	gemu_©t
.
	go
: ../../
dev
/
œmebus
/
emu_©t
.
c
 ../../
ö˛ude
/
ty≥s
.
h
 \

2 ../../
ö˛ude
/
kîn
/
ty≥s
.
h
 
ö˛udñöks
/kîn/
machöe
/types.h \

3 
ö˛udñöks
/
machöe
/
ty≥s
.
h
 ../../
ö˛ude
/
lib
.h ../../ö˛ude/
cdefs
.h \

4 
›t
-
nﬂs£πs
.
h
 ../../
dev
/
œmebus
/œmebus.h ../../
ö˛ude
/
˝u
.h \

5 ../../
ö˛ude
/
•ölock
.
h
 
ö˛udñöks
/
machöe
/spinlock.h \

6 ../../
ö˛ude
/
thªadli°
.
h
 
ö˛udñöks
/
machöe
/
vm
.h \

7 ../../
dev
/
œmebus
/
emu
.
h
 
autoc⁄f
.h

	@compile/DUMBVM/.depend.exception-mips1.S

1 
	gex˚±i⁄
-
	gmùs1
.
	go
: ../../
¨ch
/
mùs
/
loc‹e
/
ex˚±i⁄
-
mùs1
.
S
 \

2 
ö˛udñöks
/
kîn
/
mùs
/
ªgdefs
.
h
 in˛udñöks/mùs/
•ecüÃeg
.h

	@compile/DUMBVM/.depend.filetable.c

1 
	gfûëabÀ
.
	go
: ../../
fûëabÀ
/fûëabÀ.
c
 ../../
ö˛ude
/fûëabÀ.
h
 \

2 ../../
ö˛ude
/
ty≥s
.
h
 ../../ö˛ude/
kîn
/types.h \

3 
ö˛udñöks
/
kîn
/
machöe
/
ty≥s
.
h
 includelinks/machine/types.h \

4 ../../
ö˛ude
/
vnode
.
h
 ../../ö˛ude/
•ölock
.h ../../ö˛ude/
cdefs
.h \

5 
ö˛udñöks
/
machöe
/
•ölock
.
h
 ../../
ö˛ude
/
synch
.h \

6 ../../
ö˛ude
/
¨øy
.
h
 ../../ö˛ude/
lib
.h 
›t
-
nﬂs£πs
.h

	@compile/DUMBVM/.depend.fstest.c

1 
	gf°e°
.
	go
: ../../
ã°
/
f°e°
.
c
 ../../
ö˛ude
/
ty≥s
.
h
 \

2 ../../
ö˛ude
/
kîn
/
ty≥s
.
h
 
ö˛udñöks
/kîn/
machöe
/types.h \

3 
ö˛udñöks
/
machöe
/
ty≥s
.
h
 ../../
ö˛ude
/
kîn
/
î∫o
.h \

4 ../../
ö˛ude
/
kîn
/
f˙é
.
h
 ../../ö˛ude/
lib
.h ../../ö˛ude/
cdefs
.h \

5 
›t
-
nﬂs£πs
.
h
 ../../
ö˛ude
/
uio
.h ../../ö˛ude/
kîn
/
iovec
.h \

6 ../../
ö˛ude
/
thªad
.
h
 ../../ö˛ude/
¨øy
.h ../../ö˛ude/
•ölock
.h \

7 
ö˛udñöks
/
machöe
/
•ölock
.
h
 ../../
ö˛ude
/
thªadli°
.h \

8 
ö˛udñöks
/
machöe
/
thªad
.
h
 ../../
ö˛ude
/
£tjmp
.h \

9 
ö˛udñöks
/
kîn
/
machöe
/
£tjmp
.
h
 ../../
ö˛ude
/
synch
.h \

10 ../../
ö˛ude
/
vfs
.
h
 ../../ö˛ude/
fs
.h ../../ö˛ude/
vnode
.h \

11 ../../
ö˛ude
/
ã°
.
h


	@compile/DUMBVM/.depend.iordi3.c

1 
	gi‹di3
.
	go
: ../../../
comm⁄
/
gcc
-
mûlicode
/
i‹di3
.
c
 \

2 ../../../
comm⁄
/
gcc
-
mûlicode
/
l⁄gl⁄g
.
h
 ../../
ö˛ude
/
ty≥s
.h \

3 ../../
ö˛ude
/
kîn
/
ty≥s
.
h
 
ö˛udñöks
/kîn/
machöe
/types.h \

4 
ö˛udñöks
/
machöe
/
ty≥s
.
h
 ../../
ö˛ude
/
ídün
.h \

5 ../../
ö˛ude
/
kîn
/
ídün
.
h
 
ö˛udñöks
/kîn/
machöe
/endian.h \

6 ../../
ö˛ude
/
limôs
.
h
 ../../ö˛ude/
kîn
/limits.h

	@compile/DUMBVM/.depend.kgets.c

1 
	gkgës
.
	go
: ../../
lib
/
kgës
.
c
 ../../
ö˛ude
/
ty≥s
.
h
 \

2 ../../
ö˛ude
/
kîn
/
ty≥s
.
h
 
ö˛udñöks
/kîn/
machöe
/types.h \

3 
ö˛udñöks
/
machöe
/
ty≥s
.
h
 ../../
ö˛ude
/
lib
.h ../../ö˛ude/
cdefs
.h \

4 
›t
-
nﬂs£πs
.
h


	@compile/DUMBVM/.depend.kmalloc.c

1 
	gkmÆloc
.
	go
: ../../
vm
/
kmÆloc
.
c
 ../../
ö˛ude
/
ty≥s
.
h
 \

2 ../../
ö˛ude
/
kîn
/
ty≥s
.
h
 
ö˛udñöks
/kîn/
machöe
/types.h \

3 
ö˛udñöks
/
machöe
/
ty≥s
.
h
 ../../
ö˛ude
/
lib
.h ../../ö˛ude/
cdefs
.h \

4 
›t
-
nﬂs£πs
.
h
 ../../
ö˛ude
/
•ölock
.h 
ö˛udñöks
/
machöe
/spinlock.h \

5 ../../
ö˛ude
/
vm
.
h
 
ö˛udñöks
/
machöe
/vm.h

	@compile/DUMBVM/.depend.kprintf.c

1 
	gk¥ötf
.
	go
: ../../
lib
/
k¥ötf
.
c
 ../../
ö˛ude
/
ty≥s
.
h
 \

2 ../../
ö˛ude
/
kîn
/
ty≥s
.
h
 
ö˛udñöks
/kîn/
machöe
/types.h \

3 
ö˛udñöks
/
machöe
/
ty≥s
.
h
 ../../
ö˛ude
/
kîn
/
uni°d
.h \

4 ../../
ö˛ude
/
°d¨g
.
h
 ../../ö˛ude/
cdefs
.h ../../ö˛ude/
lib
.h \

5 
›t
-
nﬂs£πs
.
h
 ../../
ö˛ude
/
•l
.h ../../ö˛ude/
˝u
.h \

6 ../../
ö˛ude
/
•ölock
.
h
 
ö˛udñöks
/
machöe
/spinlock.h \

7 ../../
ö˛ude
/
thªadli°
.
h
 
ö˛udñöks
/
machöe
/
vm
.h \

8 ../../
ö˛ude
/
thªad
.
h
 ../../ö˛ude/
¨øy
.h \

9 
ö˛udñöks
/
machöe
/
thªad
.
h
 ../../
ö˛ude
/
£tjmp
.h \

10 
ö˛udñöks
/
kîn
/
machöe
/
£tjmp
.
h
 ../../
ö˛ude
/
cuºít
.h \

11 
ö˛udñöks
/
machöe
/
cuºít
.
h
 ../../
ö˛ude
/
synch
.h \

12 ../../
ö˛ude
/
maöbus
.
h
 ../../ö˛ude/
vfs
.h

	@compile/DUMBVM/.depend.lamebus.c

1 
	gœmebus
.
	go
: ../../
dev
/
œmebus
/œmebus.
c
 ../../
ö˛ude
/
ty≥s
.
h
 \

2 ../../
ö˛ude
/
kîn
/
ty≥s
.
h
 
ö˛udñöks
/kîn/
machöe
/types.h \

3 
ö˛udñöks
/
machöe
/
ty≥s
.
h
 ../../
ö˛ude
/
lib
.h ../../ö˛ude/
cdefs
.h \

4 
›t
-
nﬂs£πs
.
h
 ../../
ö˛ude
/
˝u
.h ../../ö˛ude/
•ölock
.h \

5 
ö˛udñöks
/
machöe
/
•ölock
.
h
 ../../
ö˛ude
/
thªadli°
.h \

6 
ö˛udñöks
/
machöe
/
vm
.
h
 ../../
ö˛ude
/
memb¨
.h \

7 
ö˛udñöks
/
machöe
/
memb¨
.
h
 ../../
ö˛ude
/
cuºít
.h \

8 
ö˛udñöks
/
machöe
/
cuºít
.
h
 ../../
ö˛ude
/
thªad
.h \

9 ../../
ö˛ude
/
¨øy
.
h
 
ö˛udñöks
/
machöe
/
thªad
.h \

10 ../../
ö˛ude
/
£tjmp
.
h
 
ö˛udñöks
/
kîn
/
machöe
/setjmp.h \

11 ../../
dev
/
œmebus
/œmebus.
h


	@compile/DUMBVM/.depend.lamebus_machdep.c

1 
	gœmebus_machdï
.
	go
: ../../
¨ch
/
sys161
/
dev
/
œmebus_machdï
.
c
 \

2 ../../
ö˛ude
/
ty≥s
.
h
 ../../ö˛ude/
kîn
/types.h \

3 
ö˛udñöks
/
kîn
/
machöe
/
ty≥s
.
h
 includelinks/machine/types.h \

4 ../../
ö˛ude
/
kîn
/
uni°d
.
h
 ../../ö˛ude/
lib
.h ../../ö˛ude/
cdefs
.h \

5 
›t
-
nﬂs£πs
.
h
 
ö˛udñöks
/
mùs
/
•ecüÃeg
.h \

6 
ö˛udñöks
/
mùs
/
å≠‰ame
.
h
 ../../
ö˛ude
/
˝u
.h \

7 ../../
ö˛ude
/
•ölock
.
h
 
ö˛udñöks
/
machöe
/spinlock.h \

8 ../../
ö˛ude
/
thªadli°
.
h
 
ö˛udñöks
/
machöe
/
vm
.h ../../ö˛ude/
•l
.h \

9 ../../
ö˛ude
/
˛ock
.
h
 ../../ö˛ude/
kîn
/
time
.h 
›t
-
synch¥obs
.h \

10 ../../
ö˛ude
/
thªad
.
h
 ../../ö˛ude/
¨øy
.h \

11 
ö˛udñöks
/
machöe
/
thªad
.
h
 ../../
ö˛ude
/
£tjmp
.h \

12 
ö˛udñöks
/
kîn
/
machöe
/
£tjmp
.
h
 ../../
ö˛ude
/
cuºít
.h \

13 
ö˛udñöks
/
machöe
/
cuºít
.
h
 ../../
ö˛ude
/
memb¨
.h \

14 
ö˛udñöks
/
machöe
/
memb¨
.
h
 ../../
ö˛ude
/
synch
.h \

15 ../../
ö˛ude
/
maöbus
.
h
 
ö˛udñöks
/
sys161
/
bus
.h \

16 ../../
dev
/
œmebus
/œmebus.
h
 
autoc⁄f
.h

	@compile/DUMBVM/.depend.lhd.c

1 
	glhd
.
	go
: ../../
dev
/
œmebus
/
lhd
.
c
 ../../
ö˛ude
/
ty≥s
.
h
 \

2 ../../
ö˛ude
/
kîn
/
ty≥s
.
h
 
ö˛udñöks
/kîn/
machöe
/types.h \

3 
ö˛udñöks
/
machöe
/
ty≥s
.
h
 ../../
ö˛ude
/
kîn
/
î∫o
.h \

4 ../../
ö˛ude
/
lib
.
h
 ../../ö˛ude/
cdefs
.h 
›t
-
nﬂs£πs
.h \

5 ../../
ö˛ude
/
uio
.
h
 ../../ö˛ude/
kîn
/
iovec
.h ../../ö˛ude/
memb¨
.h \

6 
ö˛udñöks
/
machöe
/
memb¨
.
h
 ../../
ö˛ude
/
synch
.h \

7 ../../
ö˛ude
/
•ölock
.
h
 
ö˛udñöks
/
machöe
/spinlock.h \

8 
ö˛udñöks
/
∂©f‹m
/
bus
.
h
 in˛udñöks/
machöe
/
vm
.h \

9 ../../
dev
/
œmebus
/œmebus.
h
 ../../
ö˛ude
/
˝u
.h \

10 ../../
ö˛ude
/
thªadli°
.
h
 ../../ö˛ude/
vfs
.h ../../ö˛ude/
¨øy
.h \

11 ../../
dev
/
œmebus
/
lhd
.
h
 ../../
ö˛ude
/
devi˚
.h 
autoc⁄f
.h

	@compile/DUMBVM/.depend.lhd_att.c

1 
	glhd_©t
.
	go
: ../../
dev
/
œmebus
/
lhd_©t
.
c
 ../../
ö˛ude
/
ty≥s
.
h
 \

2 ../../
ö˛ude
/
kîn
/
ty≥s
.
h
 
ö˛udñöks
/kîn/
machöe
/types.h \

3 
ö˛udñöks
/
machöe
/
ty≥s
.
h
 ../../
ö˛ude
/
lib
.h ../../ö˛ude/
cdefs
.h \

4 
›t
-
nﬂs£πs
.
h
 ../../
dev
/
œmebus
/œmebus.h ../../
ö˛ude
/
˝u
.h \

5 ../../
ö˛ude
/
•ölock
.
h
 
ö˛udñöks
/
machöe
/spinlock.h \

6 ../../
ö˛ude
/
thªadli°
.
h
 
ö˛udñöks
/
machöe
/
vm
.h \

7 ../../
dev
/
œmebus
/
lhd
.
h
 ../../
ö˛ude
/
devi˚
.h 
autoc⁄f
.h

	@compile/DUMBVM/.depend.loadelf.c

1 
	glﬂdñf
.
	go
: ../../
sysˇŒ
/
lﬂdñf
.
c
 ../../
ö˛ude
/
ty≥s
.
h
 \

2 ../../
ö˛ude
/
kîn
/
ty≥s
.
h
 
ö˛udñöks
/kîn/
machöe
/types.h \

3 
ö˛udñöks
/
machöe
/
ty≥s
.
h
 ../../
ö˛ude
/
kîn
/
î∫o
.h \

4 ../../
ö˛ude
/
lib
.
h
 ../../ö˛ude/
cdefs
.h 
›t
-
nﬂs£πs
.h \

5 ../../
ö˛ude
/
uio
.
h
 ../../ö˛ude/
kîn
/
iovec
.h ../../ö˛ude/
¥oc
.h \

6 ../../
ö˛ude
/
•ölock
.
h
 
ö˛udñöks
/
machöe
/spinlock.h \

7 ../../
ö˛ude
/
thªad
.
h
 ../../ö˛ude/
¨øy
.h ../../ö˛ude/
thªadli°
.h \

8 
ö˛udñöks
/
machöe
/
thªad
.
h
 ../../
ö˛ude
/
£tjmp
.h \

9 
ö˛udñöks
/
kîn
/
machöe
/
£tjmp
.
h
 ../../
ö˛ude
/
fûëabÀ
.h \

10 ../../
ö˛ude
/
vnode
.
h
 ../../ö˛ude/
synch
.h ../../ö˛ude/
pid
.h \

11 ../../
ö˛ude
/
bôm≠
.
h
 ../../ö˛ude/
cuºít
.h \

12 
ö˛udñöks
/
machöe
/
cuºít
.
h
 ../../
ö˛ude
/
addr•a˚
.h \

13 ../../
ö˛ude
/
vm
.
h
 
ö˛udñöks
/
machöe
/vm.h 
›t
-
dumbvm
.h \

14 ../../
ö˛ude
/
ñf
.
h
 
ö˛udñöks
/
machöe
/elf.h

	@compile/DUMBVM/.depend.lrandom.c

1 
	gÃ™dom
.
	go
: ../../
dev
/
œmebus
/
Ã™dom
.
c
 ../../
ö˛ude
/
ty≥s
.
h
 \

2 ../../
ö˛ude
/
kîn
/
ty≥s
.
h
 
ö˛udñöks
/kîn/
machöe
/types.h \

3 
ö˛udñöks
/
machöe
/
ty≥s
.
h
 ../../
ö˛ude
/
lib
.h ../../ö˛ude/
cdefs
.h \

4 
›t
-
nﬂs£πs
.
h
 ../../
ö˛ude
/
uio
.h ../../ö˛ude/
kîn
/
iovec
.h \

5 
ö˛udñöks
/
∂©f‹m
/
bus
.
h
 in˛udñöks/
machöe
/
vm
.h \

6 ../../
dev
/
œmebus
/œmebus.
h
 ../../
ö˛ude
/
˝u
.h ../../ö˛ude/
•ölock
.h \

7 
ö˛udñöks
/
machöe
/
•ölock
.
h
 ../../
ö˛ude
/
thªadli°
.h \

8 ../../
dev
/
œmebus
/
Ã™dom
.
h
 
autoc⁄f
.h

	@compile/DUMBVM/.depend.lrandom_att.c

1 
	gÃ™dom_©t
.
	go
: ../../
dev
/
œmebus
/
Ã™dom_©t
.
c
 ../../
ö˛ude
/
ty≥s
.
h
 \

2 ../../
ö˛ude
/
kîn
/
ty≥s
.
h
 
ö˛udñöks
/kîn/
machöe
/types.h \

3 
ö˛udñöks
/
machöe
/
ty≥s
.
h
 ../../
ö˛ude
/
lib
.h ../../ö˛ude/
cdefs
.h \

4 
›t
-
nﬂs£πs
.
h
 ../../
dev
/
œmebus
/œmebus.h ../../
ö˛ude
/
˝u
.h \

5 ../../
ö˛ude
/
•ölock
.
h
 
ö˛udñöks
/
machöe
/spinlock.h \

6 ../../
ö˛ude
/
thªadli°
.
h
 
ö˛udñöks
/
machöe
/
vm
.h \

7 ../../
dev
/
œmebus
/
Ã™dom
.
h
 
autoc⁄f
.h

	@compile/DUMBVM/.depend.lser.c

1 
	gl£r
.
	go
: ../../
dev
/
œmebus
/
l£r
.
c
 ../../
ö˛ude
/
ty≥s
.
h
 \

2 ../../
ö˛ude
/
kîn
/
ty≥s
.
h
 
ö˛udñöks
/kîn/
machöe
/types.h \

3 
ö˛udñöks
/
machöe
/
ty≥s
.
h
 ../../
ö˛ude
/
lib
.h ../../ö˛ude/
cdefs
.h \

4 
›t
-
nﬂs£πs
.
h
 ../../
ö˛ude
/
•ölock
.h 
ö˛udñöks
/
machöe
/spinlock.h \

5 
ö˛udñöks
/
∂©f‹m
/
bus
.
h
 in˛udñöks/
machöe
/
vm
.h \

6 ../../
dev
/
œmebus
/œmebus.
h
 ../../
ö˛ude
/
˝u
.h \

7 ../../
ö˛ude
/
thªadli°
.
h
 ../../
dev
/
œmebus
/
l£r
.h 
autoc⁄f
.h

	@compile/DUMBVM/.depend.lser_att.c

1 
	gl£r_©t
.
	go
: ../../
dev
/
œmebus
/
l£r_©t
.
c
 ../../
ö˛ude
/
ty≥s
.
h
 \

2 ../../
ö˛ude
/
kîn
/
ty≥s
.
h
 
ö˛udñöks
/kîn/
machöe
/types.h \

3 
ö˛udñöks
/
machöe
/
ty≥s
.
h
 ../../
ö˛ude
/
lib
.h ../../ö˛ude/
cdefs
.h \

4 
›t
-
nﬂs£πs
.
h
 ../../
dev
/
œmebus
/œmebus.h ../../
ö˛ude
/
˝u
.h \

5 ../../
ö˛ude
/
•ölock
.
h
 
ö˛udñöks
/
machöe
/spinlock.h \

6 ../../
ö˛ude
/
thªadli°
.
h
 
ö˛udñöks
/
machöe
/
vm
.h \

7 ../../
dev
/
œmebus
/
l£r
.
h
 
autoc⁄f
.h

	@compile/DUMBVM/.depend.lshldi3.c

1 
	glshldi3
.
	go
: ../../../
comm⁄
/
gcc
-
mûlicode
/
lshldi3
.
c
 \

2 ../../../
comm⁄
/
gcc
-
mûlicode
/
l⁄gl⁄g
.
h
 ../../
ö˛ude
/
ty≥s
.h \

3 ../../
ö˛ude
/
kîn
/
ty≥s
.
h
 
ö˛udñöks
/kîn/
machöe
/types.h \

4 
ö˛udñöks
/
machöe
/
ty≥s
.
h
 ../../
ö˛ude
/
ídün
.h \

5 ../../
ö˛ude
/
kîn
/
ídün
.
h
 
ö˛udñöks
/kîn/
machöe
/endian.h \

6 ../../
ö˛ude
/
limôs
.
h
 ../../ö˛ude/
kîn
/limits.h

	@compile/DUMBVM/.depend.lshrdi3.c

1 
	glshrdi3
.
	go
: ../../../
comm⁄
/
gcc
-
mûlicode
/
lshrdi3
.
c
 \

2 ../../../
comm⁄
/
gcc
-
mûlicode
/
l⁄gl⁄g
.
h
 ../../
ö˛ude
/
ty≥s
.h \

3 ../../
ö˛ude
/
kîn
/
ty≥s
.
h
 
ö˛udñöks
/kîn/
machöe
/types.h \

4 
ö˛udñöks
/
machöe
/
ty≥s
.
h
 ../../
ö˛ude
/
ídün
.h \

5 ../../
ö˛ude
/
kîn
/
ídün
.
h
 
ö˛udñöks
/kîn/
machöe
/endian.h \

6 ../../
ö˛ude
/
limôs
.
h
 ../../ö˛ude/
kîn
/limits.h

	@compile/DUMBVM/.depend.ltimer.c

1 
	g…imî
.
	go
: ../../
dev
/
œmebus
/
…imî
.
c
 ../../
ö˛ude
/
ty≥s
.
h
 \

2 ../../
ö˛ude
/
kîn
/
ty≥s
.
h
 
ö˛udñöks
/kîn/
machöe
/types.h \

3 
ö˛udñöks
/
machöe
/
ty≥s
.
h
 ../../
ö˛ude
/
lib
.h ../../ö˛ude/
cdefs
.h \

4 
›t
-
nﬂs£πs
.
h
 ../../
ö˛ude
/
•l
.h ../../ö˛ude/
˛ock
.h \

5 ../../
ö˛ude
/
kîn
/
time
.
h
 
›t
-
synch¥obs
.h 
ö˛udñöks
/
∂©f‹m
/
bus
.h \

6 
ö˛udñöks
/
machöe
/
vm
.
h
 ../../
dev
/
œmebus
/lamebus.h \

7 ../../
ö˛ude
/
˝u
.
h
 ../../ö˛ude/
•ölock
.h \

8 
ö˛udñöks
/
machöe
/
•ölock
.
h
 ../../
ö˛ude
/
thªadli°
.h \

9 ../../
dev
/
œmebus
/
…imî
.
h
 
autoc⁄f
.h

	@compile/DUMBVM/.depend.ltimer_att.c

1 
	g…imî_©t
.
	go
: ../../
dev
/
œmebus
/
…imî_©t
.
c
 ../../
ö˛ude
/
ty≥s
.
h
 \

2 ../../
ö˛ude
/
kîn
/
ty≥s
.
h
 
ö˛udñöks
/kîn/
machöe
/types.h \

3 
ö˛udñöks
/
machöe
/
ty≥s
.
h
 ../../
ö˛ude
/
lib
.h ../../ö˛ude/
cdefs
.h \

4 
›t
-
nﬂs£πs
.
h
 ../../
dev
/
œmebus
/œmebus.h ../../
ö˛ude
/
˝u
.h \

5 ../../
ö˛ude
/
•ölock
.
h
 
ö˛udñöks
/
machöe
/spinlock.h \

6 ../../
ö˛ude
/
thªadli°
.
h
 
ö˛udñöks
/
machöe
/
vm
.h \

7 ../../
dev
/
œmebus
/
…imî
.
h
 
autoc⁄f
.h

	@compile/DUMBVM/.depend.ltrace.c

1 
	g…ø˚
.
	go
: ../../
dev
/
œmebus
/
…ø˚
.
c
 ../../
ö˛ude
/
ty≥s
.
h
 \

2 ../../
ö˛ude
/
kîn
/
ty≥s
.
h
 
ö˛udñöks
/kîn/
machöe
/types.h \

3 
ö˛udñöks
/
machöe
/
ty≥s
.
h
 ../../
ö˛ude
/
lib
.h ../../ö˛ude/
cdefs
.h \

4 
›t
-
nﬂs£πs
.
h
 
ö˛udñöks
/
∂©f‹m
/
bus
.h in˛udñöks/
machöe
/
vm
.h \

5 ../../
dev
/
œmebus
/œmebus.
h
 ../../
ö˛ude
/
˝u
.h ../../ö˛ude/
•ölock
.h \

6 
ö˛udñöks
/
machöe
/
•ölock
.
h
 ../../
ö˛ude
/
thªadli°
.h \

7 ../../
dev
/
œmebus
/
…ø˚
.
h
 
autoc⁄f
.h

	@compile/DUMBVM/.depend.ltrace_att.c

1 
	g…ø˚_©t
.
	go
: ../../
dev
/
œmebus
/
…ø˚_©t
.
c
 ../../
ö˛ude
/
ty≥s
.
h
 \

2 ../../
ö˛ude
/
kîn
/
ty≥s
.
h
 
ö˛udñöks
/kîn/
machöe
/types.h \

3 
ö˛udñöks
/
machöe
/
ty≥s
.
h
 ../../
ö˛ude
/
lib
.h ../../ö˛ude/
cdefs
.h \

4 
›t
-
nﬂs£πs
.
h
 ../../
dev
/
œmebus
/œmebus.h ../../
ö˛ude
/
˝u
.h \

5 ../../
ö˛ude
/
•ölock
.
h
 
ö˛udñöks
/
machöe
/spinlock.h \

6 ../../
ö˛ude
/
thªadli°
.
h
 
ö˛udñöks
/
machöe
/
vm
.h \

7 ../../
dev
/
œmebus
/
…ø˚
.
h
 
autoc⁄f
.h

	@compile/DUMBVM/.depend.main.c

1 
	gmaö
.
	go
: ../../
maö
/maö.
c
 ../../
ö˛ude
/
ty≥s
.
h
 \

2 ../../
ö˛ude
/
kîn
/
ty≥s
.
h
 
ö˛udñöks
/kîn/
machöe
/types.h \

3 
ö˛udñöks
/
machöe
/
ty≥s
.
h
 ../../
ö˛ude
/
kîn
/
î∫o
.h \

4 ../../
ö˛ude
/
kîn
/
ªboŸ
.
h
 ../../ö˛ude/kîn/
uni°d
.h \

5 ../../
ö˛ude
/
lib
.
h
 ../../ö˛ude/
cdefs
.h 
›t
-
nﬂs£πs
.h \

6 ../../
ö˛ude
/
•l
.
h
 ../../ö˛ude/
˛ock
.h ../../ö˛ude/
kîn
/
time
.h \

7 
›t
-
synch¥obs
.
h
 ../../
ö˛ude
/
thªad
.h ../../ö˛ude/
¨øy
.h \

8 ../../
ö˛ude
/
•ölock
.
h
 
ö˛udñöks
/
machöe
/spinlock.h \

9 ../../
ö˛ude
/
thªadli°
.
h
 
ö˛udñöks
/
machöe
/
thªad
.h \

10 ../../
ö˛ude
/
£tjmp
.
h
 
ö˛udñöks
/
kîn
/
machöe
/setjmp.h \

11 ../../
ö˛ude
/
¥oc
.
h
 ../../ö˛ude/
fûëabÀ
.h ../../ö˛ude/
vnode
.h \

12 ../../
ö˛ude
/
synch
.
h
 ../../ö˛ude/
pid
.h ../../ö˛ude/
bôm≠
.h \

13 ../../
ö˛ude
/
cuºít
.
h
 
ö˛udñöks
/
machöe
/current.h \

14 ../../
ö˛ude
/
vm
.
h
 
ö˛udñöks
/
machöe
/vm.h ../../ö˛ude/
maöbus
.h \

15 ../../
ö˛ude
/
vfs
.
h
 ../../ö˛ude/
devi˚
.h ../../ö˛ude/
sysˇŒ
.h \

16 ../../
ö˛ude
/
ã°
.
h
 ../../ö˛ude/
vîsi⁄
.h 
autoc⁄f
.h \

17 ../../
ö˛ude
/
limôs
.
h
 ../../ö˛ude/
kîn
/limits.h

	@compile/DUMBVM/.depend.malloctest.c

1 
	gmÆlo˘e°
.
	go
: ../../
ã°
/
mÆlo˘e°
.
c
 ../../
ö˛ude
/
ty≥s
.
h
 \

2 ../../
ö˛ude
/
kîn
/
ty≥s
.
h
 
ö˛udñöks
/kîn/
machöe
/types.h \

3 
ö˛udñöks
/
machöe
/
ty≥s
.
h
 ../../
ö˛ude
/
kîn
/
î∫o
.h \

4 ../../
ö˛ude
/
lib
.
h
 ../../ö˛ude/
cdefs
.h 
›t
-
nﬂs£πs
.h \

5 ../../
ö˛ude
/
thªad
.
h
 ../../ö˛ude/
¨øy
.h ../../ö˛ude/
•ölock
.h \

6 
ö˛udñöks
/
machöe
/
•ölock
.
h
 ../../
ö˛ude
/
thªadli°
.h \

7 
ö˛udñöks
/
machöe
/
thªad
.
h
 ../../
ö˛ude
/
£tjmp
.h \

8 
ö˛udñöks
/
kîn
/
machöe
/
£tjmp
.
h
 ../../
ö˛ude
/
synch
.h \

9 ../../
ö˛ude
/
vm
.
h
 
ö˛udñöks
/
machöe
/vm.h ../../ö˛ude/
ã°
.h \

10 
›t
-
dumbvm
.
h


	@compile/DUMBVM/.depend.memcpy.c

1 
	gmem˝y
.
	go
: ../../../
comm⁄
/
libc
/
°rög
/
mem˝y
.
c
 ../../
ö˛ude
/
ty≥s
.
h
 \

2 ../../
ö˛ude
/
kîn
/
ty≥s
.
h
 
ö˛udñöks
/kîn/
machöe
/types.h \

3 
ö˛udñöks
/
machöe
/
ty≥s
.
h
 ../../
ö˛ude
/
lib
.h ../../ö˛ude/
cdefs
.h \

4 
›t
-
nﬂs£πs
.
h


	@compile/DUMBVM/.depend.memmove.c

1 
	gmemmove
.
	go
: ../../../
comm⁄
/
libc
/
°rög
/
memmove
.
c
 ../../
ö˛ude
/
ty≥s
.
h
 \

2 ../../
ö˛ude
/
kîn
/
ty≥s
.
h
 
ö˛udñöks
/kîn/
machöe
/types.h \

3 
ö˛udñöks
/
machöe
/
ty≥s
.
h
 ../../
ö˛ude
/
lib
.h ../../ö˛ude/
cdefs
.h \

4 
›t
-
nﬂs£πs
.
h


	@compile/DUMBVM/.depend.memset.c

1 
	gmem£t
.
	go
: ../../../
comm⁄
/
libc
/
°rög
/
mem£t
.
c
 ../../
ö˛ude
/
ty≥s
.
h
 \

2 ../../
ö˛ude
/
kîn
/
ty≥s
.
h
 
ö˛udñöks
/kîn/
machöe
/types.h \

3 
ö˛udñöks
/
machöe
/
ty≥s
.
h
 ../../
ö˛ude
/
lib
.h ../../ö˛ude/
cdefs
.h \

4 
›t
-
nﬂs£πs
.
h


	@compile/DUMBVM/.depend.menu.c

1 
	gmíu
.
	go
: ../../
maö
/
míu
.
c
 ../../
ö˛ude
/
ty≥s
.
h
 \

2 ../../
ö˛ude
/
kîn
/
ty≥s
.
h
 
ö˛udñöks
/kîn/
machöe
/types.h \

3 
ö˛udñöks
/
machöe
/
ty≥s
.
h
 ../../
ö˛ude
/
kîn
/
î∫o
.h \

4 ../../
ö˛ude
/
kîn
/
ªboŸ
.
h
 ../../ö˛ude/kîn/
uni°d
.h \

5 ../../
ö˛ude
/
limôs
.
h
 ../../ö˛ude/
kîn
/limôs.h ../../ö˛ude/
lib
.h \

6 ../../
ö˛ude
/
cdefs
.
h
 
›t
-
nﬂs£πs
.h ../../ö˛ude/
uio
.h \

7 ../../
ö˛ude
/
kîn
/
iovec
.
h
 ../../ö˛ude/
˛ock
.h \

8 ../../
ö˛ude
/
kîn
/
time
.
h
 
›t
-
synch¥obs
.h ../../ö˛ude/
thªad
.h \

9 ../../
ö˛ude
/
¨øy
.
h
 ../../ö˛ude/
•ölock
.h \

10 
ö˛udñöks
/
machöe
/
•ölock
.
h
 ../../
ö˛ude
/
thªadli°
.h \

11 
ö˛udñöks
/
machöe
/
thªad
.
h
 ../../
ö˛ude
/
£tjmp
.h \

12 
ö˛udñöks
/
kîn
/
machöe
/
£tjmp
.
h
 ../../
ö˛ude
/
¥oc
.h \

13 ../../
ö˛ude
/
fûëabÀ
.
h
 ../../ö˛ude/
vnode
.h ../../ö˛ude/
synch
.h \

14 ../../
ö˛ude
/
pid
.
h
 ../../ö˛ude/
bôm≠
.h ../../ö˛ude/
vfs
.h \

15 ../../
ö˛ude
/
sfs
.
h
 ../../ö˛ude/
fs
.h ../../ö˛ude/
kîn
/sfs.h \

16 ../../
ö˛ude
/
sysˇŒ
.
h
 ../../ö˛ude/
ã°
.h 
›t
-
sfs
.h o±-
√t
.h

	@compile/DUMBVM/.depend.misc.c

1 
	gmisc
.
	go
: ../../
lib
/
misc
.
c
 ../../
ö˛ude
/
ty≥s
.
h
 ../../ö˛ude/
kîn
/types.h \

2 
ö˛udñöks
/
kîn
/
machöe
/
ty≥s
.
h
 includelinks/machine/types.h \

3 ../../
ö˛ude
/
kîn
/
îrmsg
.
h
 ../../ö˛ude/
lib
.h ../../ö˛ude/
cdefs
.h \

4 
›t
-
nﬂs£πs
.
h


	@compile/DUMBVM/.depend.moddi3.c

1 
	gmoddi3
.
	go
: ../../../
comm⁄
/
gcc
-
mûlicode
/
moddi3
.
c
 \

2 ../../../
comm⁄
/
gcc
-
mûlicode
/
l⁄gl⁄g
.
h
 ../../
ö˛ude
/
ty≥s
.h \

3 ../../
ö˛ude
/
kîn
/
ty≥s
.
h
 
ö˛udñöks
/kîn/
machöe
/types.h \

4 
ö˛udñöks
/
machöe
/
ty≥s
.
h
 ../../
ö˛ude
/
ídün
.h \

5 ../../
ö˛ude
/
kîn
/
ídün
.
h
 
ö˛udñöks
/kîn/
machöe
/endian.h \

6 ../../
ö˛ude
/
limôs
.
h
 ../../ö˛ude/
kîn
/limits.h

	@compile/DUMBVM/.depend.muldi3.c

1 
	gmuldi3
.
	go
: ../../../
comm⁄
/
gcc
-
mûlicode
/
muldi3
.
c
 \

2 ../../../
comm⁄
/
gcc
-
mûlicode
/
l⁄gl⁄g
.
h
 ../../
ö˛ude
/
ty≥s
.h \

3 ../../
ö˛ude
/
kîn
/
ty≥s
.
h
 
ö˛udñöks
/kîn/
machöe
/types.h \

4 
ö˛udñöks
/
machöe
/
ty≥s
.
h
 ../../
ö˛ude
/
ídün
.h \

5 ../../
ö˛ude
/
kîn
/
ídün
.
h
 
ö˛udñöks
/kîn/
machöe
/endian.h \

6 ../../
ö˛ude
/
limôs
.
h
 ../../ö˛ude/
kîn
/limits.h

	@compile/DUMBVM/.depend.negdi2.c

1 
	g√gdi2
.
	go
: ../../../
comm⁄
/
gcc
-
mûlicode
/
√gdi2
.
c
 \

2 ../../../
comm⁄
/
gcc
-
mûlicode
/
l⁄gl⁄g
.
h
 ../../
ö˛ude
/
ty≥s
.h \

3 ../../
ö˛ude
/
kîn
/
ty≥s
.
h
 
ö˛udñöks
/kîn/
machöe
/types.h \

4 
ö˛udñöks
/
machöe
/
ty≥s
.
h
 ../../
ö˛ude
/
ídün
.h \

5 ../../
ö˛ude
/
kîn
/
ídün
.
h
 
ö˛udñöks
/kîn/
machöe
/endian.h \

6 ../../
ö˛ude
/
limôs
.
h
 ../../ö˛ude/
kîn
/limits.h

	@compile/DUMBVM/.depend.notdi2.c

1 
	gnŸdi2
.
	go
: ../../../
comm⁄
/
gcc
-
mûlicode
/
nŸdi2
.
c
 \

2 ../../../
comm⁄
/
gcc
-
mûlicode
/
l⁄gl⁄g
.
h
 ../../
ö˛ude
/
ty≥s
.h \

3 ../../
ö˛ude
/
kîn
/
ty≥s
.
h
 
ö˛udñöks
/kîn/
machöe
/types.h \

4 
ö˛udñöks
/
machöe
/
ty≥s
.
h
 ../../
ö˛ude
/
ídün
.h \

5 ../../
ö˛ude
/
kîn
/
ídün
.
h
 
ö˛udñöks
/kîn/
machöe
/endian.h \

6 ../../
ö˛ude
/
limôs
.
h
 ../../ö˛ude/
kîn
/limits.h

	@compile/DUMBVM/.depend.proc.c

1 
	g¥oc
.
	go
: ../../
¥oc
/¥oc.
c
 ../../
ö˛ude
/
ty≥s
.
h
 \

2 ../../
ö˛ude
/
kîn
/
ty≥s
.
h
 
ö˛udñöks
/kîn/
machöe
/types.h \

3 
ö˛udñöks
/
machöe
/
ty≥s
.
h
 ../../
ö˛ude
/
•l
.h ../../ö˛ude/
cdefs
.h \

4 ../../
ö˛ude
/
¥oc
.
h
 ../../ö˛ude/
•ölock
.h \

5 
ö˛udñöks
/
machöe
/
•ölock
.
h
 ../../
ö˛ude
/
thªad
.h \

6 ../../
ö˛ude
/
¨øy
.
h
 ../../ö˛ude/
lib
.h 
›t
-
nﬂs£πs
.h \

7 ../../
ö˛ude
/
thªadli°
.
h
 
ö˛udñöks
/
machöe
/
thªad
.h \

8 ../../
ö˛ude
/
£tjmp
.
h
 
ö˛udñöks
/
kîn
/
machöe
/setjmp.h \

9 ../../
ö˛ude
/
fûëabÀ
.
h
 ../../ö˛ude/
vnode
.h ../../ö˛ude/
synch
.h \

10 ../../
ö˛ude
/
pid
.
h
 ../../ö˛ude/
bôm≠
.h ../../ö˛ude/
cuºít
.h \

11 
ö˛udñöks
/
machöe
/
cuºít
.
h
 ../../
ö˛ude
/
addr•a˚
.h \

12 ../../
ö˛ude
/
vm
.
h
 
ö˛udñöks
/
machöe
/vm.h 
›t
-
dumbvm
.h \

13 ../../
ö˛ude
/
limôs
.
h
 ../../ö˛ude/
kîn
/limits.h \

14 ../../
ö˛ude
/
kîn
/
f˙é
.
h
 ../../ö˛ude/
vfs
.h ../../ö˛ude/
sysˇŒ
.h

	@compile/DUMBVM/.depend.qdivrem.c

1 
	gqdivªm
.
	go
: ../../../
comm⁄
/
gcc
-
mûlicode
/
qdivªm
.
c
 \

2 ../../../
comm⁄
/
gcc
-
mûlicode
/
l⁄gl⁄g
.
h
 ../../
ö˛ude
/
ty≥s
.h \

3 ../../
ö˛ude
/
kîn
/
ty≥s
.
h
 
ö˛udñöks
/kîn/
machöe
/types.h \

4 
ö˛udñöks
/
machöe
/
ty≥s
.
h
 ../../
ö˛ude
/
ídün
.h \

5 ../../
ö˛ude
/
kîn
/
ídün
.
h
 
ö˛udñöks
/kîn/
machöe
/endian.h \

6 ../../
ö˛ude
/
limôs
.
h
 ../../ö˛ude/
kîn
/limits.h

	@compile/DUMBVM/.depend.ram.c

1 
	gøm
.
	go
: ../../
¨ch
/
mùs
/
vm
/
øm
.
c
 ../../
ö˛ude
/
ty≥s
.
h
 \

2 ../../
ö˛ude
/
kîn
/
ty≥s
.
h
 
ö˛udñöks
/kîn/
machöe
/types.h \

3 
ö˛udñöks
/
machöe
/
ty≥s
.
h
 ../../
ö˛ude
/
lib
.h ../../ö˛ude/
cdefs
.h \

4 
›t
-
nﬂs£πs
.
h
 ../../
ö˛ude
/
vm
.h 
ö˛udñöks
/
machöe
/vm.h \

5 ../../
ö˛ude
/
maöbus
.
h


	@compile/DUMBVM/.depend.random.c

1 
	gøndom
.
	go
: ../../
dev
/
gíîic
/
øndom
.
c
 ../../
ö˛ude
/
ty≥s
.
h
 \

2 ../../
ö˛ude
/
kîn
/
ty≥s
.
h
 
ö˛udñöks
/kîn/
machöe
/types.h \

3 
ö˛udñöks
/
machöe
/
ty≥s
.
h
 ../../
ö˛ude
/
kîn
/
î∫o
.h \

4 ../../
ö˛ude
/
kîn
/
f˙é
.
h
 ../../ö˛ude/
lib
.h ../../ö˛ude/
cdefs
.h \

5 
›t
-
nﬂs£πs
.
h
 ../../
ö˛ude
/
uio
.h ../../ö˛ude/
kîn
/
iovec
.h \

6 ../../
ö˛ude
/
vfs
.
h
 ../../ö˛ude/
¨øy
.h ../../
dev
/
gíîic
/
øndom
.h \

7 ../../
ö˛ude
/
devi˚
.
h
 
autoc⁄f
.h

	@compile/DUMBVM/.depend.random_lrandom.c

1 
	gøndom_Ã™dom
.
	go
: ../../
dev
/
œmebus
/
øndom_Ã™dom
.
c
 \

2 ../../
ö˛ude
/
ty≥s
.
h
 ../../ö˛ude/
kîn
/types.h \

3 
ö˛udñöks
/
kîn
/
machöe
/
ty≥s
.
h
 includelinks/machine/types.h \

4 ../../
ö˛ude
/
lib
.
h
 ../../ö˛ude/
cdefs
.h 
›t
-
nﬂs£πs
.h \

5 ../../
dev
/
gíîic
/
øndom
.
h
 ../../
ö˛ude
/
devi˚
.h \

6 ../../
dev
/
œmebus
/
Ã™dom
.
h
 
autoc⁄f
.h

	@compile/DUMBVM/.depend.rtclock.c

1 
	gπ˛ock
.
	go
: ../../
dev
/
gíîic
/
π˛ock
.
c
 ../../
ö˛ude
/
ty≥s
.
h
 \

2 ../../
ö˛ude
/
kîn
/
ty≥s
.
h
 
ö˛udñöks
/kîn/
machöe
/types.h \

3 
ö˛udñöks
/
machöe
/
ty≥s
.
h
 ../../
ö˛ude
/
kîn
/
î∫o
.h \

4 ../../
ö˛ude
/
lib
.
h
 ../../ö˛ude/
cdefs
.h 
›t
-
nﬂs£πs
.h \

5 ../../
ö˛ude
/
˛ock
.
h
 ../../ö˛ude/
kîn
/
time
.h 
›t
-
synch¥obs
.h \

6 ../../
dev
/
gíîic
/
π˛ock
.
h
 
autoc⁄f
.h

	@compile/DUMBVM/.depend.rtclock_ltimer.c

1 
	gπ˛ock_…imî
.
	go
: ../../
dev
/
œmebus
/
π˛ock_…imî
.
c
 \

2 ../../
ö˛ude
/
ty≥s
.
h
 ../../ö˛ude/
kîn
/types.h \

3 
ö˛udñöks
/
kîn
/
machöe
/
ty≥s
.
h
 includelinks/machine/types.h \

4 ../../
ö˛ude
/
lib
.
h
 ../../ö˛ude/
cdefs
.h 
›t
-
nﬂs£πs
.h \

5 ../../
dev
/
gíîic
/
π˛ock
.
h
 ../../dev/
œmebus
/
…imî
.h 
autoc⁄f
.h

	@compile/DUMBVM/.depend.runprogram.c

1 
	gru≈rogøm
.
	go
: ../../
sysˇŒ
/
ru≈rogøm
.
c
 ../../
ö˛ude
/
ty≥s
.
h
 \

2 ../../
ö˛ude
/
kîn
/
ty≥s
.
h
 
ö˛udñöks
/kîn/
machöe
/types.h \

3 
ö˛udñöks
/
machöe
/
ty≥s
.
h
 ../../
ö˛ude
/
kîn
/
î∫o
.h \

4 ../../
ö˛ude
/
kîn
/
f˙é
.
h
 ../../ö˛ude/
lib
.h ../../ö˛ude/
cdefs
.h \

5 
›t
-
nﬂs£πs
.
h
 ../../
ö˛ude
/
¥oc
.h ../../ö˛ude/
•ölock
.h \

6 
ö˛udñöks
/
machöe
/
•ölock
.
h
 ../../
ö˛ude
/
thªad
.h \

7 ../../
ö˛ude
/
¨øy
.
h
 ../../ö˛ude/
thªadli°
.h \

8 
ö˛udñöks
/
machöe
/
thªad
.
h
 ../../
ö˛ude
/
£tjmp
.h \

9 
ö˛udñöks
/
kîn
/
machöe
/
£tjmp
.
h
 ../../
ö˛ude
/
fûëabÀ
.h \

10 ../../
ö˛ude
/
vnode
.
h
 ../../ö˛ude/
synch
.h ../../ö˛ude/
pid
.h \

11 ../../
ö˛ude
/
bôm≠
.
h
 ../../ö˛ude/
cuºít
.h \

12 
ö˛udñöks
/
machöe
/
cuºít
.
h
 ../../
ö˛ude
/
addr•a˚
.h \

13 ../../
ö˛ude
/
vm
.
h
 
ö˛udñöks
/
machöe
/vm.h 
›t
-
dumbvm
.h \

14 ../../
ö˛ude
/
vfs
.
h
 ../../ö˛ude/
sysˇŒ
.h ../../ö˛ude/
ã°
.h

	@compile/DUMBVM/.depend.semfs_fsops.c

1 
	g£mfs_fs›s
.
	go
: ../../
fs
/
£mfs
/
£mfs_fs›s
.
c
 ../../
ö˛ude
/
ty≥s
.
h
 \

2 ../../
ö˛ude
/
kîn
/
ty≥s
.
h
 
ö˛udñöks
/kîn/
machöe
/types.h \

3 
ö˛udñöks
/
machöe
/
ty≥s
.
h
 ../../
ö˛ude
/
kîn
/
î∫o
.h \

4 ../../
ö˛ude
/
synch
.
h
 ../../ö˛ude/
•ölock
.h ../../ö˛ude/
cdefs
.h \

5 
ö˛udñöks
/
machöe
/
•ölock
.
h
 ../../
ö˛ude
/
vfs
.h \

6 ../../
ö˛ude
/
¨øy
.
h
 ../../ö˛ude/
lib
.h 
›t
-
nﬂs£πs
.h \

7 ../../
ö˛ude
/
fs
.
h
 ../../ö˛ude/
vnode
.h ../../fs/
£mfs
/semfs.h

	@compile/DUMBVM/.depend.semfs_obj.c

1 
	g£mfs_obj
.
	go
: ../../
fs
/
£mfs
/
£mfs_obj
.
c
 ../../
ö˛ude
/
ty≥s
.
h
 \

2 ../../
ö˛ude
/
kîn
/
ty≥s
.
h
 
ö˛udñöks
/kîn/
machöe
/types.h \

3 
ö˛udñöks
/
machöe
/
ty≥s
.
h
 ../../
ö˛ude
/
kîn
/
î∫o
.h \

4 ../../
ö˛ude
/
synch
.
h
 ../../ö˛ude/
•ölock
.h ../../ö˛ude/
cdefs
.h \

5 
ö˛udñöks
/
machöe
/
•ölock
.
h
 ../../
fs
/
£mfs
/semfs.h \

6 ../../
ö˛ude
/
¨øy
.
h
 ../../ö˛ude/
lib
.h 
›t
-
nﬂs£πs
.h \

7 ../../
ö˛ude
/
fs
.
h
 ../../ö˛ude/
vnode
.h

	@compile/DUMBVM/.depend.semfs_vnops.c

1 
	g£mfs_vn›s
.
	go
: ../../
fs
/
£mfs
/
£mfs_vn›s
.
c
 ../../
ö˛ude
/
ty≥s
.
h
 \

2 ../../
ö˛ude
/
kîn
/
ty≥s
.
h
 
ö˛udñöks
/kîn/
machöe
/types.h \

3 
ö˛udñöks
/
machöe
/
ty≥s
.
h
 ../../
ö˛ude
/
kîn
/
î∫o
.h \

4 ../../
ö˛ude
/
kîn
/
f˙é
.
h
 ../../ö˛ude/
°©
.h \

5 ../../
ö˛ude
/
kîn
/
°©
.
h
 ../../ö˛ude/kîn/
°©ty≥s
.h \

6 ../../
ö˛ude
/
uio
.
h
 ../../ö˛ude/
kîn
/
iovec
.h ../../ö˛ude/
synch
.h \

7 ../../
ö˛ude
/
•ölock
.
h
 ../../ö˛ude/
cdefs
.h \

8 
ö˛udñöks
/
machöe
/
•ölock
.
h
 ../../
ö˛ude
/
thªad
.h \

9 ../../
ö˛ude
/
¨øy
.
h
 ../../ö˛ude/
lib
.h 
›t
-
nﬂs£πs
.h \

10 ../../
ö˛ude
/
thªadli°
.
h
 
ö˛udñöks
/
machöe
/
thªad
.h \

11 ../../
ö˛ude
/
£tjmp
.
h
 
ö˛udñöks
/
kîn
/
machöe
/setjmp.h \

12 ../../
ö˛ude
/
¥oc
.
h
 ../../ö˛ude/
fûëabÀ
.h ../../ö˛ude/
vnode
.h \

13 ../../
ö˛ude
/
pid
.
h
 ../../ö˛ude/
bôm≠
.h ../../ö˛ude/
cuºít
.h \

14 
ö˛udñöks
/
machöe
/
cuºít
.
h
 ../../
ö˛ude
/
vfs
.h \

15 ../../
fs
/
£mfs
/£mfs.
h
 ../../
ö˛ude
/fs.h

	@compile/DUMBVM/.depend.setjmp.S

1 
	g£tjmp
.
	go
: ../../../
comm⁄
/
libc
/
¨ch
/
mùs
/
£tjmp
.
S
 \

2 
ö˛udñöks
/
kîn
/
mùs
/
ªgdefs
.
h


	@compile/DUMBVM/.depend.sfs_balloc.c

1 
	gsfs_bÆloc
.
	go
: ../../
fs
/
sfs
/
sfs_bÆloc
.
c
 ../../
ö˛ude
/
ty≥s
.
h
 \

2 ../../
ö˛ude
/
kîn
/
ty≥s
.
h
 
ö˛udñöks
/kîn/
machöe
/types.h \

3 
ö˛udñöks
/
machöe
/
ty≥s
.
h
 ../../
ö˛ude
/
lib
.h ../../ö˛ude/
cdefs
.h \

4 
›t
-
nﬂs£πs
.
h
 ../../
ö˛ude
/
bôm≠
.h ../../ö˛ude/
sfs
.h \

5 ../../
ö˛ude
/
fs
.
h
 ../../ö˛ude/
vnode
.h ../../ö˛ude/
•ölock
.h \

6 
ö˛udñöks
/
machöe
/
•ölock
.
h
 ../../
ö˛ude
/
kîn
/
sfs
.h \

7 ../../
fs
/
sfs
/
sf•riv©e
.
h
 ../../
ö˛ude
/
uio
.h ../../ö˛ude/
kîn
/
iovec
.h

	@compile/DUMBVM/.depend.sfs_bmap.c

1 
	gsfs_bm≠
.
	go
: ../../
fs
/
sfs
/
sfs_bm≠
.
c
 ../../
ö˛ude
/
ty≥s
.
h
 \

2 ../../
ö˛ude
/
kîn
/
ty≥s
.
h
 
ö˛udñöks
/kîn/
machöe
/types.h \

3 
ö˛udñöks
/
machöe
/
ty≥s
.
h
 ../../
ö˛ude
/
kîn
/
î∫o
.h \

4 ../../
ö˛ude
/
lib
.
h
 ../../ö˛ude/
cdefs
.h 
›t
-
nﬂs£πs
.h \

5 ../../
ö˛ude
/
vfs
.
h
 ../../ö˛ude/
¨øy
.h ../../ö˛ude/
sfs
.h \

6 ../../
ö˛ude
/
fs
.
h
 ../../ö˛ude/
vnode
.h ../../ö˛ude/
•ölock
.h \

7 
ö˛udñöks
/
machöe
/
•ölock
.
h
 ../../
ö˛ude
/
kîn
/
sfs
.h \

8 ../../
fs
/
sfs
/
sf•riv©e
.
h
 ../../
ö˛ude
/
uio
.h ../../ö˛ude/
kîn
/
iovec
.h

	@compile/DUMBVM/.depend.sfs_dir.c

1 
	gsfs_dú
.
	go
: ../../
fs
/
sfs
/
sfs_dú
.
c
 ../../
ö˛ude
/
ty≥s
.
h
 \

2 ../../
ö˛ude
/
kîn
/
ty≥s
.
h
 
ö˛udñöks
/kîn/
machöe
/types.h \

3 
ö˛udñöks
/
machöe
/
ty≥s
.
h
 ../../
ö˛ude
/
kîn
/
î∫o
.h \

4 ../../
ö˛ude
/
lib
.
h
 ../../ö˛ude/
cdefs
.h 
›t
-
nﬂs£πs
.h \

5 ../../
ö˛ude
/
vfs
.
h
 ../../ö˛ude/
¨øy
.h ../../ö˛ude/
sfs
.h \

6 ../../
ö˛ude
/
fs
.
h
 ../../ö˛ude/
vnode
.h ../../ö˛ude/
•ölock
.h \

7 
ö˛udñöks
/
machöe
/
•ölock
.
h
 ../../
ö˛ude
/
kîn
/
sfs
.h \

8 ../../
fs
/
sfs
/
sf•riv©e
.
h
 ../../
ö˛ude
/
uio
.h ../../ö˛ude/
kîn
/
iovec
.h

	@compile/DUMBVM/.depend.sfs_fsops.c

1 
	gsfs_fs›s
.
	go
: ../../
fs
/
sfs
/
sfs_fs›s
.
c
 ../../
ö˛ude
/
ty≥s
.
h
 \

2 ../../
ö˛ude
/
kîn
/
ty≥s
.
h
 
ö˛udñöks
/kîn/
machöe
/types.h \

3 
ö˛udñöks
/
machöe
/
ty≥s
.
h
 ../../
ö˛ude
/
kîn
/
î∫o
.h \

4 ../../
ö˛ude
/
lib
.
h
 ../../ö˛ude/
cdefs
.h 
›t
-
nﬂs£πs
.h \

5 ../../
ö˛ude
/
¨øy
.
h
 ../../ö˛ude/
bôm≠
.h ../../ö˛ude/
uio
.h \

6 ../../
ö˛ude
/
kîn
/
iovec
.
h
 ../../ö˛ude/
vfs
.h ../../ö˛ude/
devi˚
.h \

7 ../../
ö˛ude
/
sfs
.
h
 ../../ö˛ude/
fs
.h ../../ö˛ude/
vnode
.h \

8 ../../
ö˛ude
/
•ölock
.
h
 
ö˛udñöks
/
machöe
/spinlock.h \

9 ../../
ö˛ude
/
kîn
/
sfs
.
h
 ../../
fs
/sfs/
sf•riv©e
.h

	@compile/DUMBVM/.depend.sfs_inode.c

1 
	gsfs_öode
.
	go
: ../../
fs
/
sfs
/
sfs_öode
.
c
 ../../
ö˛ude
/
ty≥s
.
h
 \

2 ../../
ö˛ude
/
kîn
/
ty≥s
.
h
 
ö˛udñöks
/kîn/
machöe
/types.h \

3 
ö˛udñöks
/
machöe
/
ty≥s
.
h
 ../../
ö˛ude
/
kîn
/
î∫o
.h \

4 ../../
ö˛ude
/
lib
.
h
 ../../ö˛ude/
cdefs
.h 
›t
-
nﬂs£πs
.h \

5 ../../
ö˛ude
/
vfs
.
h
 ../../ö˛ude/
¨øy
.h ../../ö˛ude/
sfs
.h \

6 ../../
ö˛ude
/
fs
.
h
 ../../ö˛ude/
vnode
.h ../../ö˛ude/
•ölock
.h \

7 
ö˛udñöks
/
machöe
/
•ölock
.
h
 ../../
ö˛ude
/
kîn
/
sfs
.h \

8 ../../
fs
/
sfs
/
sf•riv©e
.
h
 ../../
ö˛ude
/
uio
.h ../../ö˛ude/
kîn
/
iovec
.h

	@compile/DUMBVM/.depend.sfs_io.c

1 
	gsfs_io
.
	go
: ../../
fs
/
sfs
/
sfs_io
.
c
 ../../
ö˛ude
/
ty≥s
.
h
 \

2 ../../
ö˛ude
/
kîn
/
ty≥s
.
h
 
ö˛udñöks
/kîn/
machöe
/types.h \

3 
ö˛udñöks
/
machöe
/
ty≥s
.
h
 ../../
ö˛ude
/
kîn
/
î∫o
.h \

4 ../../
ö˛ude
/
lib
.
h
 ../../ö˛ude/
cdefs
.h 
›t
-
nﬂs£πs
.h \

5 ../../
ö˛ude
/
uio
.
h
 ../../ö˛ude/
kîn
/
iovec
.h ../../ö˛ude/
vfs
.h \

6 ../../
ö˛ude
/
¨øy
.
h
 ../../ö˛ude/
devi˚
.h ../../ö˛ude/
sfs
.h \

7 ../../
ö˛ude
/
fs
.
h
 ../../ö˛ude/
vnode
.h ../../ö˛ude/
•ölock
.h \

8 
ö˛udñöks
/
machöe
/
•ölock
.
h
 ../../
ö˛ude
/
kîn
/
sfs
.h \

9 ../../
fs
/
sfs
/
sf•riv©e
.
h


	@compile/DUMBVM/.depend.sfs_vnops.c

1 
	gsfs_vn›s
.
	go
: ../../
fs
/
sfs
/
sfs_vn›s
.
c
 ../../
ö˛ude
/
ty≥s
.
h
 \

2 ../../
ö˛ude
/
kîn
/
ty≥s
.
h
 
ö˛udñöks
/kîn/
machöe
/types.h \

3 
ö˛udñöks
/
machöe
/
ty≥s
.
h
 ../../
ö˛ude
/
kîn
/
î∫o
.h \

4 ../../
ö˛ude
/
kîn
/
f˙é
.
h
 ../../ö˛ude/
°©
.h \

5 ../../
ö˛ude
/
kîn
/
°©
.
h
 ../../ö˛ude/kîn/
°©ty≥s
.h \

6 ../../
ö˛ude
/
lib
.
h
 ../../ö˛ude/
cdefs
.h 
›t
-
nﬂs£πs
.h \

7 ../../
ö˛ude
/
uio
.
h
 ../../ö˛ude/
kîn
/
iovec
.h ../../ö˛ude/
vfs
.h \

8 ../../
ö˛ude
/
¨øy
.
h
 ../../ö˛ude/
sfs
.h ../../ö˛ude/
fs
.h \

9 ../../
ö˛ude
/
vnode
.
h
 ../../ö˛ude/
•ölock
.h \

10 
ö˛udñöks
/
machöe
/
•ölock
.
h
 ../../
ö˛ude
/
kîn
/
sfs
.h \

11 ../../
fs
/
sfs
/
sf•riv©e
.
h


	@compile/DUMBVM/.depend.snprintf.c

1 
	g¢¥ötf
.
	go
: ../../../
comm⁄
/
libc
/
¥ötf
/
¢¥ötf
.
c
 ../../
ö˛ude
/
ty≥s
.
h
 \

2 ../../
ö˛ude
/
kîn
/
ty≥s
.
h
 
ö˛udñöks
/kîn/
machöe
/types.h \

3 
ö˛udñöks
/
machöe
/
ty≥s
.
h
 ../../
ö˛ude
/
lib
.h ../../ö˛ude/
cdefs
.h \

4 
›t
-
nﬂs£πs
.
h
 ../../
ö˛ude
/
°d¨g
.h

	@compile/DUMBVM/.depend.spinlock.c

1 
	g•ölock
.
	go
: ../../
thªad
/
•ölock
.
c
 ../../
ö˛ude
/
ty≥s
.
h
 \

2 ../../
ö˛ude
/
kîn
/
ty≥s
.
h
 
ö˛udñöks
/kîn/
machöe
/types.h \

3 
ö˛udñöks
/
machöe
/
ty≥s
.
h
 ../../
ö˛ude
/
lib
.h ../../ö˛ude/
cdefs
.h \

4 
›t
-
nﬂs£πs
.
h
 ../../
ö˛ude
/
˝u
.h ../../ö˛ude/
•ölock
.h \

5 
ö˛udñöks
/
machöe
/
•ölock
.
h
 ../../
ö˛ude
/
thªadli°
.h \

6 
ö˛udñöks
/
machöe
/
vm
.
h
 ../../
ö˛ude
/
•l
.h ../../ö˛ude/
memb¨
.h \

7 
ö˛udñöks
/
machöe
/
memb¨
.
h
 ../../
ö˛ude
/
cuºít
.h \

8 
ö˛udñöks
/
machöe
/
cuºít
.
h
 ../../
ö˛ude
/
thªad
.h \

9 ../../
ö˛ude
/
¨øy
.
h
 
ö˛udñöks
/
machöe
/
thªad
.h \

10 ../../
ö˛ude
/
£tjmp
.
h
 
ö˛udñöks
/
kîn
/
machöe
/setjmp.h

	@compile/DUMBVM/.depend.spl.c

1 
	g•l
.
	go
: ../../
thªad
/
•l
.
c
 ../../
ö˛ude
/
ty≥s
.
h
 \

2 ../../
ö˛ude
/
kîn
/
ty≥s
.
h
 
ö˛udñöks
/kîn/
machöe
/types.h \

3 
ö˛udñöks
/
machöe
/
ty≥s
.
h
 ../../
ö˛ude
/
lib
.h ../../ö˛ude/
cdefs
.h \

4 
›t
-
nﬂs£πs
.
h
 ../../
ö˛ude
/
˝u
.h ../../ö˛ude/
•ölock
.h \

5 
ö˛udñöks
/
machöe
/
•ölock
.
h
 ../../
ö˛ude
/
thªadli°
.h \

6 
ö˛udñöks
/
machöe
/
vm
.
h
 ../../
ö˛ude
/
•l
.h ../../ö˛ude/
thªad
.h \

7 ../../
ö˛ude
/
¨øy
.
h
 
ö˛udñöks
/
machöe
/
thªad
.h \

8 ../../
ö˛ude
/
£tjmp
.
h
 
ö˛udñöks
/
kîn
/
machöe
/setjmp.h \

9 ../../
ö˛ude
/
cuºít
.
h
 
ö˛udñöks
/
machöe
/current.h

	@compile/DUMBVM/.depend.start.S

1 
	g°¨t
.
	go
: ../../
¨ch
/
sys161
/
maö
/
°¨t
.
S
 
ö˛udñöks
/
kîn
/
mùs
/
ªgdefs
.
h
 \

2 
ö˛udñöks
/
mùs
/
•ecüÃeg
.
h


	@compile/DUMBVM/.depend.strcat.c

1 
	g°rˇt
.
	go
: ../../../
comm⁄
/
libc
/
°rög
/
°rˇt
.
c
 ../../
ö˛ude
/
ty≥s
.
h
 \

2 ../../
ö˛ude
/
kîn
/
ty≥s
.
h
 
ö˛udñöks
/kîn/
machöe
/types.h \

3 
ö˛udñöks
/
machöe
/
ty≥s
.
h
 ../../
ö˛ude
/
lib
.h ../../ö˛ude/
cdefs
.h \

4 
›t
-
nﬂs£πs
.
h


	@compile/DUMBVM/.depend.strchr.c

1 
	g°rchr
.
	go
: ../../../
comm⁄
/
libc
/
°rög
/
°rchr
.
c
 ../../
ö˛ude
/
ty≥s
.
h
 \

2 ../../
ö˛ude
/
kîn
/
ty≥s
.
h
 
ö˛udñöks
/kîn/
machöe
/types.h \

3 
ö˛udñöks
/
machöe
/
ty≥s
.
h
 ../../
ö˛ude
/
lib
.h ../../ö˛ude/
cdefs
.h \

4 
›t
-
nﬂs£πs
.
h


	@compile/DUMBVM/.depend.strcmp.c

1 
	g°rcmp
.
	go
: ../../../
comm⁄
/
libc
/
°rög
/
°rcmp
.
c
 ../../
ö˛ude
/
ty≥s
.
h
 \

2 ../../
ö˛ude
/
kîn
/
ty≥s
.
h
 
ö˛udñöks
/kîn/
machöe
/types.h \

3 
ö˛udñöks
/
machöe
/
ty≥s
.
h
 ../../
ö˛ude
/
lib
.h ../../ö˛ude/
cdefs
.h \

4 
›t
-
nﬂs£πs
.
h


	@compile/DUMBVM/.depend.strcpy.c

1 
	g°r˝y
.
	go
: ../../../
comm⁄
/
libc
/
°rög
/
°r˝y
.
c
 ../../
ö˛ude
/
ty≥s
.
h
 \

2 ../../
ö˛ude
/
kîn
/
ty≥s
.
h
 
ö˛udñöks
/kîn/
machöe
/types.h \

3 
ö˛udñöks
/
machöe
/
ty≥s
.
h
 ../../
ö˛ude
/
lib
.h ../../ö˛ude/
cdefs
.h \

4 
›t
-
nﬂs£πs
.
h


	@compile/DUMBVM/.depend.strlen.c

1 
	g°æí
.
	go
: ../../../
comm⁄
/
libc
/
°rög
/
°æí
.
c
 ../../
ö˛ude
/
ty≥s
.
h
 \

2 ../../
ö˛ude
/
kîn
/
ty≥s
.
h
 
ö˛udñöks
/kîn/
machöe
/types.h \

3 
ö˛udñöks
/
machöe
/
ty≥s
.
h
 ../../
ö˛ude
/
lib
.h ../../ö˛ude/
cdefs
.h \

4 
›t
-
nﬂs£πs
.
h


	@compile/DUMBVM/.depend.strrchr.c

1 
	g°ºchr
.
	go
: ../../../
comm⁄
/
libc
/
°rög
/
°ºchr
.
c
 ../../
ö˛ude
/
ty≥s
.
h
 \

2 ../../
ö˛ude
/
kîn
/
ty≥s
.
h
 
ö˛udñöks
/kîn/
machöe
/types.h \

3 
ö˛udñöks
/
machöe
/
ty≥s
.
h
 ../../
ö˛ude
/
lib
.h ../../ö˛ude/
cdefs
.h \

4 
›t
-
nﬂs£πs
.
h


	@compile/DUMBVM/.depend.strtok_r.c

1 
	g°πok_r
.
	go
: ../../../
comm⁄
/
libc
/
°rög
/
°πok_r
.
c
 ../../
ö˛ude
/
ty≥s
.
h
 \

2 ../../
ö˛ude
/
kîn
/
ty≥s
.
h
 
ö˛udñöks
/kîn/
machöe
/types.h \

3 
ö˛udñöks
/
machöe
/
ty≥s
.
h
 ../../
ö˛ude
/
lib
.h ../../ö˛ude/
cdefs
.h \

4 
›t
-
nﬂs£πs
.
h


	@compile/DUMBVM/.depend.subdi3.c

1 
	gsubdi3
.
	go
: ../../../
comm⁄
/
gcc
-
mûlicode
/
subdi3
.
c
 \

2 ../../../
comm⁄
/
gcc
-
mûlicode
/
l⁄gl⁄g
.
h
 ../../
ö˛ude
/
ty≥s
.h \

3 ../../
ö˛ude
/
kîn
/
ty≥s
.
h
 
ö˛udñöks
/kîn/
machöe
/types.h \

4 
ö˛udñöks
/
machöe
/
ty≥s
.
h
 ../../
ö˛ude
/
ídün
.h \

5 ../../
ö˛ude
/
kîn
/
ídün
.
h
 
ö˛udñöks
/kîn/
machöe
/endian.h \

6 ../../
ö˛ude
/
limôs
.
h
 ../../ö˛ude/
kîn
/limits.h

	@compile/DUMBVM/.depend.switch.S

1 .
	go
: ../../
¨ch
/
mùs
/
thªad
/.
S
 \

2 
ö˛udñöks
/
kîn
/
mùs
/
ªgdefs
.
h


	@compile/DUMBVM/.depend.switchframe.c

1 
	gswôch‰ame
.
	go
: ../../
¨ch
/
mùs
/
thªad
/
swôch‰ame
.
c
 ../../
ö˛ude
/
ty≥s
.
h
 \

2 ../../
ö˛ude
/
kîn
/
ty≥s
.
h
 
ö˛udñöks
/kîn/
machöe
/types.h \

3 
ö˛udñöks
/
machöe
/
ty≥s
.
h
 ../../
ö˛ude
/
lib
.h ../../ö˛ude/
cdefs
.h \

4 
›t
-
nﬂs£πs
.
h
 ../../
ö˛ude
/
thªad
.h ../../ö˛ude/
¨øy
.h \

5 ../../
ö˛ude
/
•ölock
.
h
 
ö˛udñöks
/
machöe
/spinlock.h \

6 ../../
ö˛ude
/
thªadli°
.
h
 
ö˛udñöks
/
machöe
/
thªad
.h \

7 ../../
ö˛ude
/
£tjmp
.
h
 
ö˛udñöks
/
kîn
/
machöe
/setjmp.h \

8 ../../
ö˛ude
/
thªad¥iv©e
.
h
 ../../
¨ch
/
mùs
/
thªad
/
swôch‰ame
.h

	@compile/DUMBVM/.depend.synch.c

1 
	gsynch
.
	go
: ../../
thªad
/
synch
.
c
 ../../
ö˛ude
/
ty≥s
.
h
 \

2 ../../
ö˛ude
/
kîn
/
ty≥s
.
h
 
ö˛udñöks
/kîn/
machöe
/types.h \

3 
ö˛udñöks
/
machöe
/
ty≥s
.
h
 ../../
ö˛ude
/
lib
.h ../../ö˛ude/
cdefs
.h \

4 
›t
-
nﬂs£πs
.
h
 ../../
ö˛ude
/
•ölock
.h 
ö˛udñöks
/
machöe
/spinlock.h \

5 ../../
ö˛ude
/
wch™
.
h
 ../../ö˛ude/
thªad
.h ../../ö˛ude/
¨øy
.h \

6 ../../
ö˛ude
/
thªadli°
.
h
 
ö˛udñöks
/
machöe
/
thªad
.h \

7 ../../
ö˛ude
/
£tjmp
.
h
 
ö˛udñöks
/
kîn
/
machöe
/setjmp.h \

8 ../../
ö˛ude
/
cuºít
.
h
 
ö˛udñöks
/
machöe
/current.h \

9 ../../
ö˛ude
/
synch
.
h


	@compile/DUMBVM/.depend.synchtest.c

1 
	gsynchã°
.
	go
: ../../
ã°
/
synchã°
.
c
 ../../
ö˛ude
/
ty≥s
.
h
 \

2 ../../
ö˛ude
/
kîn
/
ty≥s
.
h
 
ö˛udñöks
/kîn/
machöe
/types.h \

3 
ö˛udñöks
/
machöe
/
ty≥s
.
h
 ../../
ö˛ude
/
lib
.h ../../ö˛ude/
cdefs
.h \

4 
›t
-
nﬂs£πs
.
h
 ../../
ö˛ude
/
˛ock
.h ../../ö˛ude/
kîn
/
time
.h \

5 
›t
-
synch¥obs
.
h
 ../../
ö˛ude
/
thªad
.h ../../ö˛ude/
¨øy
.h \

6 ../../
ö˛ude
/
•ölock
.
h
 
ö˛udñöks
/
machöe
/spinlock.h \

7 ../../
ö˛ude
/
thªadli°
.
h
 
ö˛udñöks
/
machöe
/
thªad
.h \

8 ../../
ö˛ude
/
£tjmp
.
h
 
ö˛udñöks
/
kîn
/
machöe
/setjmp.h \

9 ../../
ö˛ude
/
synch
.
h
 ../../ö˛ude/
ã°
.h

	@compile/DUMBVM/.depend.sys___getcwd.c

1 
	gsys___gëcwd
.
	go
: ../../
sysˇŒ
/
sys___gëcwd
.
c
 ../../
ö˛ude
/
ty≥s
.
h
 \

2 ../../
ö˛ude
/
kîn
/
ty≥s
.
h
 
ö˛udñöks
/kîn/
machöe
/types.h \

3 
ö˛udñöks
/
machöe
/
ty≥s
.
h
 ../../
ö˛ude
/
sysˇŒ
.h \

4 ../../
ö˛ude
/
cdefs
.
h
 ../../ö˛ude/
uio
.h ../../ö˛ude/
kîn
/
iovec
.h \

5 ../../
ö˛ude
/
vfs
.
h
 ../../ö˛ude/
¨øy
.h ../../ö˛ude/
lib
.h \

6 
›t
-
nﬂs£πs
.
h
 ../../
ö˛ude
/
kîn
/
î∫o
.h ../../ö˛ude/
c›yöout
.h

	@compile/DUMBVM/.depend.sys_chdir.c

1 
	gsys_chdú
.
	go
: ../../
sysˇŒ
/
sys_chdú
.
c
 ../../
ö˛ude
/
ty≥s
.
h
 \

2 ../../
ö˛ude
/
kîn
/
ty≥s
.
h
 
ö˛udñöks
/kîn/
machöe
/types.h \

3 
ö˛udñöks
/
machöe
/
ty≥s
.
h
 ../../
ö˛ude
/
sysˇŒ
.h \

4 ../../
ö˛ude
/
cdefs
.
h
 ../../ö˛ude/
vfs
.h ../../ö˛ude/
¨øy
.h \

5 ../../
ö˛ude
/
lib
.
h
 
›t
-
nﬂs£πs
.h ../../ö˛ude/
kîn
/
î∫o
.h \

6 ../../
ö˛ude
/
c›yöout
.
h


	@compile/DUMBVM/.depend.sys_close.c

1 
	gsys_˛o£
.
	go
: ../../
sysˇŒ
/
sys_˛o£
.
c
 ../../
ö˛ude
/
ty≥s
.
h
 \

2 ../../
ö˛ude
/
kîn
/
ty≥s
.
h
 
ö˛udñöks
/kîn/
machöe
/types.h \

3 
ö˛udñöks
/
machöe
/
ty≥s
.
h
 ../../
ö˛ude
/
sysˇŒ
.h \

4 ../../
ö˛ude
/
cdefs
.
h
 ../../ö˛ude/
cuºít
.h \

5 
ö˛udñöks
/
machöe
/
cuºít
.
h
 ../../
ö˛ude
/
thªad
.h \

6 ../../
ö˛ude
/
¨øy
.
h
 ../../ö˛ude/
lib
.h 
›t
-
nﬂs£πs
.h \

7 ../../
ö˛ude
/
•ölock
.
h
 
ö˛udñöks
/
machöe
/spinlock.h \

8 ../../
ö˛ude
/
thªadli°
.
h
 
ö˛udñöks
/
machöe
/
thªad
.h \

9 ../../
ö˛ude
/
£tjmp
.
h
 
ö˛udñöks
/
kîn
/
machöe
/setjmp.h \

10 ../../
ö˛ude
/
limôs
.
h
 ../../ö˛ude/
kîn
/limôs.h ../../ö˛ude/
vnode
.h \

11 ../../
ö˛ude
/
vfs
.
h
 ../../ö˛ude/
fûëabÀ
.h ../../ö˛ude/
synch
.h \

12 ../../
ö˛ude
/
¥oc
.
h
 ../../ö˛ude/
pid
.h ../../ö˛ude/
bôm≠
.h \

13 ../../
ö˛ude
/
kîn
/
î∫o
.
h


	@compile/DUMBVM/.depend.sys_dup2.c

1 
	gsys_dup2
.
	go
: ../../
sysˇŒ
/
sys_dup2
.
c
 ../../
ö˛ude
/
ty≥s
.
h
 \

2 ../../
ö˛ude
/
kîn
/
ty≥s
.
h
 
ö˛udñöks
/kîn/
machöe
/types.h \

3 
ö˛udñöks
/
machöe
/
ty≥s
.
h
 ../../
ö˛ude
/
sysˇŒ
.h \

4 ../../
ö˛ude
/
cdefs
.
h
 ../../ö˛ude/
lib
.h 
›t
-
nﬂs£πs
.h \

5 ../../
ö˛ude
/
fûëabÀ
.
h
 ../../ö˛ude/
vnode
.h ../../ö˛ude/
•ölock
.h \

6 
ö˛udñöks
/
machöe
/
•ölock
.
h
 ../../
ö˛ude
/
synch
.h \

7 ../../
ö˛ude
/
¨øy
.
h
 ../../ö˛ude/
cuºít
.h \

8 
ö˛udñöks
/
machöe
/
cuºít
.
h
 ../../
ö˛ude
/
thªad
.h \

9 ../../
ö˛ude
/
thªadli°
.
h
 
ö˛udñöks
/
machöe
/
thªad
.h \

10 ../../
ö˛ude
/
£tjmp
.
h
 
ö˛udñöks
/
kîn
/
machöe
/setjmp.h \

11 ../../
ö˛ude
/
¥oc
.
h
 ../../ö˛ude/
pid
.h ../../ö˛ude/
bôm≠
.h \

12 ../../
ö˛ude
/
kîn
/
î∫o
.
h
 ../../ö˛ude/
limôs
.h \

13 ../../
ö˛ude
/
kîn
/
limôs
.
h


	@compile/DUMBVM/.depend.sys_lseek.c

1 
	gsys_l£ek
.
	go
: ../../
sysˇŒ
/
sys_l£ek
.
c
 ../../
ö˛ude
/
ty≥s
.
h
 \

2 ../../
ö˛ude
/
kîn
/
ty≥s
.
h
 
ö˛udñöks
/kîn/
machöe
/types.h \

3 
ö˛udñöks
/
machöe
/
ty≥s
.
h
 ../../
ö˛ude
/
sysˇŒ
.h \

4 ../../
ö˛ude
/
cdefs
.
h
 ../../ö˛ude/
cuºít
.h \

5 
ö˛udñöks
/
machöe
/
cuºít
.
h
 ../../
ö˛ude
/
thªad
.h \

6 ../../
ö˛ude
/
¨øy
.
h
 ../../ö˛ude/
lib
.h 
›t
-
nﬂs£πs
.h \

7 ../../
ö˛ude
/
•ölock
.
h
 
ö˛udñöks
/
machöe
/spinlock.h \

8 ../../
ö˛ude
/
thªadli°
.
h
 
ö˛udñöks
/
machöe
/
thªad
.h \

9 ../../
ö˛ude
/
£tjmp
.
h
 
ö˛udñöks
/
kîn
/
machöe
/setjmp.h \

10 ../../
ö˛ude
/
fûëabÀ
.
h
 ../../ö˛ude/
vnode
.h ../../ö˛ude/
synch
.h \

11 ../../
ö˛ude
/
¥oc
.
h
 ../../ö˛ude/
pid
.h ../../ö˛ude/
bôm≠
.h \

12 ../../
ö˛ude
/
kîn
/
£ek
.
h
 ../../ö˛ude/kîn/
°©
.h \

13 ../../
ö˛ude
/
kîn
/
î∫o
.
h
 ../../ö˛ude/kîn/
°©ty≥s
.h

	@compile/DUMBVM/.depend.sys_open.c

1 
	gsys_›í
.
	go
: ../../
sysˇŒ
/
sys_›í
.
c
 ../../
ö˛ude
/
ty≥s
.
h
 \

2 ../../
ö˛ude
/
kîn
/
ty≥s
.
h
 
ö˛udñöks
/kîn/
machöe
/types.h \

3 
ö˛udñöks
/
machöe
/
ty≥s
.
h
 ../../
ö˛ude
/
sysˇŒ
.h \

4 ../../
ö˛ude
/
cdefs
.
h
 ../../ö˛ude/
cuºít
.h \

5 
ö˛udñöks
/
machöe
/
cuºít
.
h
 ../../
ö˛ude
/
thªad
.h \

6 ../../
ö˛ude
/
¨øy
.
h
 ../../ö˛ude/
lib
.h 
›t
-
nﬂs£πs
.h \

7 ../../
ö˛ude
/
•ölock
.
h
 
ö˛udñöks
/
machöe
/spinlock.h \

8 ../../
ö˛ude
/
thªadli°
.
h
 
ö˛udñöks
/
machöe
/
thªad
.h \

9 ../../
ö˛ude
/
£tjmp
.
h
 
ö˛udñöks
/
kîn
/
machöe
/setjmp.h \

10 ../../
ö˛ude
/
limôs
.
h
 ../../ö˛ude/
kîn
/limôs.h ../../ö˛ude/
vnode
.h \

11 ../../
ö˛ude
/
vfs
.
h
 ../../ö˛ude/
fûëabÀ
.h ../../ö˛ude/
synch
.h \

12 ../../
ö˛ude
/
¥oc
.
h
 ../../ö˛ude/
pid
.h ../../ö˛ude/
bôm≠
.h \

13 ../../
ö˛ude
/
kîn
/
î∫o
.
h
 ../../ö˛ude/kîn/
°©
.h \

14 ../../
ö˛ude
/
kîn
/
f˙é
.
h
 ../../ö˛ude/
c›yöout
.h

	@compile/DUMBVM/.depend.sys_read.c

1 
	gsys_ªad
.
	go
: ../../
sysˇŒ
/
sys_ªad
.
c
 ../../
ö˛ude
/
ty≥s
.
h
 \

2 ../../
ö˛ude
/
kîn
/
ty≥s
.
h
 
ö˛udñöks
/kîn/
machöe
/types.h \

3 
ö˛udñöks
/
machöe
/
ty≥s
.
h
 ../../
ö˛ude
/
sysˇŒ
.h \

4 ../../
ö˛ude
/
cdefs
.
h
 ../../ö˛ude/
cuºít
.h \

5 
ö˛udñöks
/
machöe
/
cuºít
.
h
 ../../
ö˛ude
/
thªad
.h \

6 ../../
ö˛ude
/
¨øy
.
h
 ../../ö˛ude/
lib
.h 
›t
-
nﬂs£πs
.h \

7 ../../
ö˛ude
/
•ölock
.
h
 
ö˛udñöks
/
machöe
/spinlock.h \

8 ../../
ö˛ude
/
thªadli°
.
h
 
ö˛udñöks
/
machöe
/
thªad
.h \

9 ../../
ö˛ude
/
£tjmp
.
h
 
ö˛udñöks
/
kîn
/
machöe
/setjmp.h \

10 ../../
ö˛ude
/
limôs
.
h
 ../../ö˛ude/
kîn
/limôs.h ../../ö˛ude/
vnode
.h \

11 ../../
ö˛ude
/
vfs
.
h
 ../../ö˛ude/
fûëabÀ
.h ../../ö˛ude/
synch
.h \

12 ../../
ö˛ude
/
¥oc
.
h
 ../../ö˛ude/
pid
.h ../../ö˛ude/
bôm≠
.h \

13 ../../
ö˛ude
/
kîn
/
î∫o
.
h
 ../../ö˛ude/
uio
.h \

14 ../../
ö˛ude
/
kîn
/
iovec
.
h
 ../../ö˛ude/kîn/
f˙é
.h \

15 ../../
ö˛ude
/
c›yöout
.
h


	@compile/DUMBVM/.depend.sys_write.c

1 
	gsys_wrôe
.
	go
: ../../
sysˇŒ
/
sys_wrôe
.
c
 ../../
ö˛ude
/
ty≥s
.
h
 \

2 ../../
ö˛ude
/
kîn
/
ty≥s
.
h
 
ö˛udñöks
/kîn/
machöe
/types.h \

3 
ö˛udñöks
/
machöe
/
ty≥s
.
h
 ../../
ö˛ude
/
sysˇŒ
.h \

4 ../../
ö˛ude
/
cdefs
.
h
 ../../ö˛ude/
lib
.h 
›t
-
nﬂs£πs
.h \

5 ../../
ö˛ude
/
vnode
.
h
 ../../ö˛ude/
•ölock
.h \

6 
ö˛udñöks
/
machöe
/
•ölock
.
h
 ../../
ö˛ude
/
uio
.h \

7 ../../
ö˛ude
/
kîn
/
iovec
.
h
 ../../ö˛ude/
¨øy
.h ../../ö˛ude/
cuºít
.h \

8 
ö˛udñöks
/
machöe
/
cuºít
.
h
 ../../
ö˛ude
/
thªad
.h \

9 ../../
ö˛ude
/
thªadli°
.
h
 
ö˛udñöks
/
machöe
/
thªad
.h \

10 ../../
ö˛ude
/
£tjmp
.
h
 
ö˛udñöks
/
kîn
/
machöe
/setjmp.h \

11 ../../
ö˛ude
/
fûëabÀ
.
h
 ../../ö˛ude/
synch
.h ../../ö˛ude/
¥oc
.h \

12 ../../
ö˛ude
/
pid
.
h
 ../../ö˛ude/
bôm≠
.h ../../ö˛ude/
kîn
/
î∫o
.h \

13 ../../
ö˛ude
/
kîn
/
f˙é
.
h
 ../../ö˛ude/
c›yöout
.h

	@compile/DUMBVM/.depend.syscall.c

1 
	gsysˇŒ
.
	go
: ../../
¨ch
/
mùs
/
sysˇŒ
/sysˇŒ.
c
 ../../
ö˛ude
/
ty≥s
.
h
 \

2 ../../
ö˛ude
/
kîn
/
ty≥s
.
h
 
ö˛udñöks
/kîn/
machöe
/types.h \

3 
ö˛udñöks
/
machöe
/
ty≥s
.
h
 ../../
ö˛ude
/
kîn
/
î∫o
.h \

4 ../../
ö˛ude
/
kîn
/
sysˇŒ
.
h
 ../../ö˛ude/
lib
.h ../../ö˛ude/
cdefs
.h \

5 
›t
-
nﬂs£πs
.
h
 
ö˛udñöks
/
mùs
/
å≠‰ame
.h ../../
ö˛ude
/
thªad
.h \

6 ../../
ö˛ude
/
¨øy
.
h
 ../../ö˛ude/
•ölock
.h \

7 
ö˛udñöks
/
machöe
/
•ölock
.
h
 ../../
ö˛ude
/
thªadli°
.h \

8 
ö˛udñöks
/
machöe
/
thªad
.
h
 ../../
ö˛ude
/
£tjmp
.h \

9 
ö˛udñöks
/
kîn
/
machöe
/
£tjmp
.
h
 ../../
ö˛ude
/
cuºít
.h \

10 
ö˛udñöks
/
machöe
/
cuºít
.
h
 ../../
ö˛ude
/
sysˇŒ
.h \

11 ../../
ö˛ude
/
ídün
.
h
 ../../ö˛ude/
kîn
/endian.h \

12 
ö˛udñöks
/
kîn
/
machöe
/
ídün
.
h
 ../../
ö˛ude
/
c›yöout
.h

	@compile/DUMBVM/.depend.thread.c

1 
	gthªad
.
	go
: ../../
thªad
/thªad.
c
 ../../
ö˛ude
/
ty≥s
.
h
 \

2 ../../
ö˛ude
/
kîn
/
ty≥s
.
h
 
ö˛udñöks
/kîn/
machöe
/types.h \

3 
ö˛udñöks
/
machöe
/
ty≥s
.
h
 ../../
ö˛ude
/
kîn
/
î∫o
.h \

4 ../../
ö˛ude
/
lib
.
h
 ../../ö˛ude/
cdefs
.h 
›t
-
nﬂs£πs
.h \

5 ../../
ö˛ude
/
¨øy
.
h
 ../../ö˛ude/
˝u
.h ../../ö˛ude/
•ölock
.h \

6 
ö˛udñöks
/
machöe
/
•ölock
.
h
 ../../
ö˛ude
/
thªadli°
.h \

7 
ö˛udñöks
/
machöe
/
vm
.
h
 ../../
ö˛ude
/
•l
.h ../../ö˛ude/
wch™
.h \

8 ../../
ö˛ude
/
thªad
.
h
 
ö˛udñöks
/
machöe
/thread.h \

9 ../../
ö˛ude
/
£tjmp
.
h
 
ö˛udñöks
/
kîn
/
machöe
/setjmp.h \

10 ../../
ö˛ude
/
thªad¥iv©e
.
h
 ../../ö˛ude/
¥oc
.h \

11 ../../
ö˛ude
/
fûëabÀ
.
h
 ../../ö˛ude/
vnode
.h ../../ö˛ude/
synch
.h \

12 ../../
ö˛ude
/
pid
.
h
 ../../ö˛ude/
bôm≠
.h ../../ö˛ude/
cuºít
.h \

13 
ö˛udñöks
/
machöe
/
cuºít
.
h
 ../../
ö˛ude
/
addr•a˚
.h \

14 ../../
ö˛ude
/
vm
.
h
 
›t
-
dumbvm
.h ../../ö˛ude/
maöbus
.h o±-
synch¥obs
.h

	@compile/DUMBVM/.depend.thread_machdep.c

1 
	gthªad_machdï
.
	go
: ../../
¨ch
/
mùs
/
thªad
/
thªad_machdï
.
c
 \

2 ../../
ö˛ude
/
ty≥s
.
h
 ../../ö˛ude/
kîn
/types.h \

3 
ö˛udñöks
/
kîn
/
machöe
/
ty≥s
.
h
 includelinks/machine/types.h \

4 ../../
ö˛ude
/
lib
.
h
 ../../ö˛ude/
cdefs
.h 
›t
-
nﬂs£πs
.h \

5 ../../
ö˛ude
/
thªad
.
h
 ../../ö˛ude/
¨øy
.h ../../ö˛ude/
•ölock
.h \

6 
ö˛udñöks
/
machöe
/
•ölock
.
h
 ../../
ö˛ude
/
thªadli°
.h \

7 
ö˛udñöks
/
machöe
/
thªad
.
h
 ../../
ö˛ude
/
£tjmp
.h \

8 
ö˛udñöks
/
kîn
/
machöe
/
£tjmp
.
h
 ../../
ö˛ude
/
thªad¥iv©e
.h

	@compile/DUMBVM/.depend.threadlist.c

1 
	gthªadli°
.
	go
: ../../
thªad
/
thªadli°
.
c
 ../../
ö˛ude
/
ty≥s
.
h
 \

2 ../../
ö˛ude
/
kîn
/
ty≥s
.
h
 
ö˛udñöks
/kîn/
machöe
/types.h \

3 
ö˛udñöks
/
machöe
/
ty≥s
.
h
 ../../
ö˛ude
/
lib
.h ../../ö˛ude/
cdefs
.h \

4 
›t
-
nﬂs£πs
.
h
 ../../
ö˛ude
/
thªad
.h ../../ö˛ude/
¨øy
.h \

5 ../../
ö˛ude
/
•ölock
.
h
 
ö˛udñöks
/
machöe
/spinlock.h \

6 ../../
ö˛ude
/
thªadli°
.
h
 
ö˛udñöks
/
machöe
/
thªad
.h \

7 ../../
ö˛ude
/
£tjmp
.
h
 
ö˛udñöks
/
kîn
/
machöe
/setjmp.h

	@compile/DUMBVM/.depend.threadlisttest.c

1 
	gthªadli°ã°
.
	go
: ../../
ã°
/
thªadli°ã°
.
c
 ../../
ö˛ude
/
ty≥s
.
h
 \

2 ../../
ö˛ude
/
kîn
/
ty≥s
.
h
 
ö˛udñöks
/kîn/
machöe
/types.h \

3 
ö˛udñöks
/
machöe
/
ty≥s
.
h
 ../../
ö˛ude
/
lib
.h ../../ö˛ude/
cdefs
.h \

4 
›t
-
nﬂs£πs
.
h
 ../../
ö˛ude
/
thªad
.h ../../ö˛ude/
¨øy
.h \

5 ../../
ö˛ude
/
•ölock
.
h
 
ö˛udñöks
/
machöe
/spinlock.h \

6 ../../
ö˛ude
/
thªadli°
.
h
 
ö˛udñöks
/
machöe
/
thªad
.h \

7 ../../
ö˛ude
/
£tjmp
.
h
 
ö˛udñöks
/
kîn
/
machöe
/setjmp.h \

8 ../../
ö˛ude
/
ã°
.
h


	@compile/DUMBVM/.depend.threadstart.S

1 
	gthªad°¨t
.
	go
: ../../
¨ch
/
mùs
/
thªad
/
thªad°¨t
.
S
 \

2 
ö˛udñöks
/
kîn
/
mùs
/
ªgdefs
.
h


	@compile/DUMBVM/.depend.threadtest.c

1 
	gthªadã°
.
	go
: ../../
ã°
/
thªadã°
.
c
 ../../
ö˛ude
/
ty≥s
.
h
 \

2 ../../
ö˛ude
/
kîn
/
ty≥s
.
h
 
ö˛udñöks
/kîn/
machöe
/types.h \

3 
ö˛udñöks
/
machöe
/
ty≥s
.
h
 ../../
ö˛ude
/
lib
.h ../../ö˛ude/
cdefs
.h \

4 
›t
-
nﬂs£πs
.
h
 ../../
ö˛ude
/
thªad
.h ../../ö˛ude/
¨øy
.h \

5 ../../
ö˛ude
/
•ölock
.
h
 
ö˛udñöks
/
machöe
/spinlock.h \

6 ../../
ö˛ude
/
thªadli°
.
h
 
ö˛udñöks
/
machöe
/
thªad
.h \

7 ../../
ö˛ude
/
£tjmp
.
h
 
ö˛udñöks
/
kîn
/
machöe
/setjmp.h \

8 ../../
ö˛ude
/
synch
.
h
 ../../ö˛ude/
ã°
.h

	@compile/DUMBVM/.depend.time.c

1 
	gtime
.
	go
: ../../
lib
/
time
.
c
 ../../
ö˛ude
/
ty≥s
.
h
 ../../ö˛ude/
kîn
/types.h \

2 
ö˛udñöks
/
kîn
/
machöe
/
ty≥s
.
h
 includelinks/machine/types.h \

3 ../../
ö˛ude
/
˛ock
.
h
 ../../ö˛ude/
kîn
/
time
.h 
›t
-
synch¥obs
.h

	@compile/DUMBVM/.depend.time_syscalls.c

1 
	gtime_sysˇŒs
.
	go
: ../../
sysˇŒ
/
time_sysˇŒs
.
c
 ../../
ö˛ude
/
ty≥s
.
h
 \

2 ../../
ö˛ude
/
kîn
/
ty≥s
.
h
 
ö˛udñöks
/kîn/
machöe
/types.h \

3 
ö˛udñöks
/
machöe
/
ty≥s
.
h
 ../../
ö˛ude
/
˛ock
.h \

4 ../../
ö˛ude
/
kîn
/
time
.
h
 
›t
-
synch¥obs
.h ../../ö˛ude/
c›yöout
.h \

5 ../../
ö˛ude
/
sysˇŒ
.
h
 ../../ö˛ude/
cdefs
.h

	@compile/DUMBVM/.depend.tlb-mips161.S

1 
	géb
-
	gmùs161
.
	go
: ../../
¨ch
/
mùs
/
vm
/
éb
-
mùs161
.
S
 \

2 
ö˛udñöks
/
kîn
/
mùs
/
ªgdefs
.
h
 in˛udñöks/mùs/
•ecüÃeg
.h

	@compile/DUMBVM/.depend.trap.c

1 
	gå≠
.
	go
: ../../
¨ch
/
mùs
/
loc‹e
/
å≠
.
c
 ../../
ö˛ude
/
ty≥s
.
h
 \

2 ../../
ö˛ude
/
kîn
/
ty≥s
.
h
 
ö˛udñöks
/kîn/
machöe
/types.h \

3 
ö˛udñöks
/
machöe
/
ty≥s
.
h
 ../../
ö˛ude
/
sig«l
.h \

4 
ö˛udñöks
/
kîn
/
machöe
/
sig«l
.
h
 ../../
ö˛ude
/kern/signal.h \

5 ../../
ö˛ude
/
lib
.
h
 ../../ö˛ude/
cdefs
.h 
›t
-
nﬂs£πs
.h \

6 
ö˛udñöks
/
mùs
/
•ecüÃeg
.
h
 in˛udñöks/mùs/
å≠‰ame
.h \

7 ../../
ö˛ude
/
˝u
.
h
 ../../ö˛ude/
•ölock
.h \

8 
ö˛udñöks
/
machöe
/
•ölock
.
h
 ../../
ö˛ude
/
thªadli°
.h \

9 
ö˛udñöks
/
machöe
/
vm
.
h
 ../../
ö˛ude
/
•l
.h ../../ö˛ude/
thªad
.h \

10 ../../
ö˛ude
/
¨øy
.
h
 
ö˛udñöks
/
machöe
/
thªad
.h \

11 ../../
ö˛ude
/
£tjmp
.
h
 
ö˛udñöks
/
kîn
/
machöe
/setjmp.h \

12 ../../
ö˛ude
/
cuºít
.
h
 
ö˛udñöks
/
machöe
/current.h \

13 ../../
ö˛ude
/
vm
.
h
 ../../ö˛ude/
maöbus
.h ../../ö˛ude/
sysˇŒ
.h \

14 ../../
ö˛ude
/
c›yöout
.
h


	@compile/DUMBVM/.depend.tt3.c

1 
	gâ3
.
	go
: ../../
ã°
/
â3
.
c
 ../../
ö˛ude
/
ty≥s
.
h
 ../../ö˛ude/
kîn
/types.h \

2 
ö˛udñöks
/
kîn
/
machöe
/
ty≥s
.
h
 includelinks/machine/types.h \

3 ../../
ö˛ude
/
lib
.
h
 ../../ö˛ude/
cdefs
.h 
›t
-
nﬂs£πs
.h \

4 ../../
ö˛ude
/
wch™
.
h
 ../../ö˛ude/
thªad
.h ../../ö˛ude/
¨øy
.h \

5 ../../
ö˛ude
/
•ölock
.
h
 
ö˛udñöks
/
machöe
/spinlock.h \

6 ../../
ö˛ude
/
thªadli°
.
h
 
ö˛udñöks
/
machöe
/
thªad
.h \

7 ../../
ö˛ude
/
£tjmp
.
h
 
ö˛udñöks
/
kîn
/
machöe
/setjmp.h \

8 ../../
ö˛ude
/
synch
.
h
 ../../ö˛ude/
ã°
.h 
›t
-
synch¥obs
.h

	@compile/DUMBVM/.depend.ucmpdi2.c

1 
	gucmpdi2
.
	go
: ../../../
comm⁄
/
gcc
-
mûlicode
/
ucmpdi2
.
c
 \

2 ../../../
comm⁄
/
gcc
-
mûlicode
/
l⁄gl⁄g
.
h
 ../../
ö˛ude
/
ty≥s
.h \

3 ../../
ö˛ude
/
kîn
/
ty≥s
.
h
 
ö˛udñöks
/kîn/
machöe
/types.h \

4 
ö˛udñöks
/
machöe
/
ty≥s
.
h
 ../../
ö˛ude
/
ídün
.h \

5 ../../
ö˛ude
/
kîn
/
ídün
.
h
 
ö˛udñöks
/kîn/
machöe
/endian.h \

6 ../../
ö˛ude
/
limôs
.
h
 ../../ö˛ude/
kîn
/limits.h

	@compile/DUMBVM/.depend.udivdi3.c

1 
	gudivdi3
.
	go
: ../../../
comm⁄
/
gcc
-
mûlicode
/
udivdi3
.
c
 \

2 ../../../
comm⁄
/
gcc
-
mûlicode
/
l⁄gl⁄g
.
h
 ../../
ö˛ude
/
ty≥s
.h \

3 ../../
ö˛ude
/
kîn
/
ty≥s
.
h
 
ö˛udñöks
/kîn/
machöe
/types.h \

4 
ö˛udñöks
/
machöe
/
ty≥s
.
h
 ../../
ö˛ude
/
ídün
.h \

5 ../../
ö˛ude
/
kîn
/
ídün
.
h
 
ö˛udñöks
/kîn/
machöe
/endian.h \

6 ../../
ö˛ude
/
limôs
.
h
 ../../ö˛ude/
kîn
/limits.h

	@compile/DUMBVM/.depend.uio.c

1 
	guio
.
	go
: ../../
lib
/
uio
.
c
 ../../
ö˛ude
/
ty≥s
.
h
 ../../ö˛ude/
kîn
/types.h \

2 
ö˛udñöks
/
kîn
/
machöe
/
ty≥s
.
h
 includelinks/machine/types.h \

3 ../../
ö˛ude
/
lib
.
h
 ../../ö˛ude/
cdefs
.h 
›t
-
nﬂs£πs
.h \

4 ../../
ö˛ude
/
uio
.
h
 ../../ö˛ude/
kîn
/
iovec
.h ../../ö˛ude/
¥oc
.h \

5 ../../
ö˛ude
/
•ölock
.
h
 
ö˛udñöks
/
machöe
/spinlock.h \

6 ../../
ö˛ude
/
thªad
.
h
 ../../ö˛ude/
¨øy
.h ../../ö˛ude/
thªadli°
.h \

7 
ö˛udñöks
/
machöe
/
thªad
.
h
 ../../
ö˛ude
/
£tjmp
.h \

8 
ö˛udñöks
/
kîn
/
machöe
/
£tjmp
.
h
 ../../
ö˛ude
/
fûëabÀ
.h \

9 ../../
ö˛ude
/
vnode
.
h
 ../../ö˛ude/
synch
.h ../../ö˛ude/
pid
.h \

10 ../../
ö˛ude
/
bôm≠
.
h
 ../../ö˛ude/
cuºít
.h \

11 
ö˛udñöks
/
machöe
/
cuºít
.
h
 ../../
ö˛ude
/
c›yöout
.h

	@compile/DUMBVM/.depend.umoddi3.c

1 
	gumoddi3
.
	go
: ../../../
comm⁄
/
gcc
-
mûlicode
/
umoddi3
.
c
 \

2 ../../../
comm⁄
/
gcc
-
mûlicode
/
l⁄gl⁄g
.
h
 ../../
ö˛ude
/
ty≥s
.h \

3 ../../
ö˛ude
/
kîn
/
ty≥s
.
h
 
ö˛udñöks
/kîn/
machöe
/types.h \

4 
ö˛udñöks
/
machöe
/
ty≥s
.
h
 ../../
ö˛ude
/
ídün
.h \

5 ../../
ö˛ude
/
kîn
/
ídün
.
h
 
ö˛udñöks
/kîn/
machöe
/endian.h \

6 ../../
ö˛ude
/
limôs
.
h
 ../../ö˛ude/
kîn
/limits.h

	@compile/DUMBVM/.depend.vfscwd.c

1 
	gvfscwd
.
	go
: ../../
vfs
/
vfscwd
.
c
 ../../
ö˛ude
/
ty≥s
.
h
 \

2 ../../
ö˛ude
/
kîn
/
ty≥s
.
h
 
ö˛udñöks
/kîn/
machöe
/types.h \

3 
ö˛udñöks
/
machöe
/
ty≥s
.
h
 ../../
ö˛ude
/
kîn
/
î∫o
.h \

4 ../../
ö˛ude
/
°©
.
h
 ../../ö˛ude/
kîn
/stat.h \

5 ../../
ö˛ude
/
kîn
/
°©ty≥s
.
h
 ../../ö˛ude/
lib
.h ../../ö˛ude/
cdefs
.h \

6 
›t
-
nﬂs£πs
.
h
 ../../
ö˛ude
/
uio
.h ../../ö˛ude/
kîn
/
iovec
.h \

7 ../../
ö˛ude
/
¥oc
.
h
 ../../ö˛ude/
•ölock
.h \

8 
ö˛udñöks
/
machöe
/
•ölock
.
h
 ../../
ö˛ude
/
thªad
.h \

9 ../../
ö˛ude
/
¨øy
.
h
 ../../ö˛ude/
thªadli°
.h \

10 
ö˛udñöks
/
machöe
/
thªad
.
h
 ../../
ö˛ude
/
£tjmp
.h \

11 
ö˛udñöks
/
kîn
/
machöe
/
£tjmp
.
h
 ../../
ö˛ude
/
fûëabÀ
.h \

12 ../../
ö˛ude
/
vnode
.
h
 ../../ö˛ude/
synch
.h ../../ö˛ude/
pid
.h \

13 ../../
ö˛ude
/
bôm≠
.
h
 ../../ö˛ude/
cuºít
.h \

14 
ö˛udñöks
/
machöe
/
cuºít
.
h
 ../../
ö˛ude
/
vfs
.h ../../ö˛ude/
fs
.h

	@compile/DUMBVM/.depend.vfsfail.c

1 
	gvfsÁû
.
	go
: ../../
vfs
/
vfsÁû
.
c
 ../../
ö˛ude
/
ty≥s
.
h
 \

2 ../../
ö˛ude
/
kîn
/
ty≥s
.
h
 
ö˛udñöks
/kîn/
machöe
/types.h \

3 
ö˛udñöks
/
machöe
/
ty≥s
.
h
 ../../
ö˛ude
/
kîn
/
î∫o
.h \

4 ../../
ö˛ude
/
vnode
.
h
 ../../ö˛ude/
•ölock
.h ../../ö˛ude/
cdefs
.h \

5 
ö˛udñöks
/
machöe
/
•ölock
.
h


	@compile/DUMBVM/.depend.vfslist.c

1 
	gvf¶i°
.
	go
: ../../
vfs
/
vf¶i°
.
c
 ../../
ö˛ude
/
ty≥s
.
h
 \

2 ../../
ö˛ude
/
kîn
/
ty≥s
.
h
 
ö˛udñöks
/kîn/
machöe
/types.h \

3 
ö˛udñöks
/
machöe
/
ty≥s
.
h
 ../../
ö˛ude
/
kîn
/
î∫o
.h \

4 ../../
ö˛ude
/
lib
.
h
 ../../ö˛ude/
cdefs
.h 
›t
-
nﬂs£πs
.h \

5 ../../
ö˛ude
/
¨øy
.
h
 ../../ö˛ude/
synch
.h ../../ö˛ude/
•ölock
.h \

6 
ö˛udñöks
/
machöe
/
•ölock
.
h
 ../../
ö˛ude
/
vfs
.h ../../ö˛ude/
fs
.h \

7 ../../
ö˛ude
/
vnode
.
h
 ../../ö˛ude/
devi˚
.h

	@compile/DUMBVM/.depend.vfslookup.c

1 
	gvf¶ookup
.
	go
: ../../
vfs
/
vf¶ookup
.
c
 ../../
ö˛ude
/
ty≥s
.
h
 \

2 ../../
ö˛ude
/
kîn
/
ty≥s
.
h
 
ö˛udñöks
/kîn/
machöe
/types.h \

3 
ö˛udñöks
/
machöe
/
ty≥s
.
h
 ../../
ö˛ude
/
kîn
/
î∫o
.h \

4 ../../
ö˛ude
/
limôs
.
h
 ../../ö˛ude/
kîn
/limôs.h ../../ö˛ude/
lib
.h \

5 ../../
ö˛ude
/
cdefs
.
h
 
›t
-
nﬂs£πs
.h ../../ö˛ude/
synch
.h \

6 ../../
ö˛ude
/
•ölock
.
h
 
ö˛udñöks
/
machöe
/spinlock.h \

7 ../../
ö˛ude
/
vfs
.
h
 ../../ö˛ude/
¨øy
.h ../../ö˛ude/
fs
.h \

8 ../../
ö˛ude
/
vnode
.
h


	@compile/DUMBVM/.depend.vfspath.c

1 
	gvf•©h
.
	go
: ../../
vfs
/
vf•©h
.
c
 ../../
ö˛ude
/
ty≥s
.
h
 \

2 ../../
ö˛ude
/
kîn
/
ty≥s
.
h
 
ö˛udñöks
/kîn/
machöe
/types.h \

3 
ö˛udñöks
/
machöe
/
ty≥s
.
h
 ../../
ö˛ude
/
kîn
/
î∫o
.h \

4 ../../
ö˛ude
/
kîn
/
f˙é
.
h
 ../../ö˛ude/
limôs
.h \

5 ../../
ö˛ude
/
kîn
/
limôs
.
h
 ../../ö˛ude/
lib
.h ../../ö˛ude/
cdefs
.h \

6 
›t
-
nﬂs£πs
.
h
 ../../
ö˛ude
/
vfs
.h ../../ö˛ude/
¨øy
.h \

7 ../../
ö˛ude
/
vnode
.
h
 ../../ö˛ude/
•ölock
.h \

8 
ö˛udñöks
/
machöe
/
•ölock
.
h


	@compile/DUMBVM/.depend.vnode.c

1 
	gvnode
.
	go
: ../../
vfs
/
vnode
.
c
 ../../
ö˛ude
/
ty≥s
.
h
 \

2 ../../
ö˛ude
/
kîn
/
ty≥s
.
h
 
ö˛udñöks
/kîn/
machöe
/types.h \

3 
ö˛udñöks
/
machöe
/
ty≥s
.
h
 ../../
ö˛ude
/
kîn
/
î∫o
.h \

4 ../../
ö˛ude
/
lib
.
h
 ../../ö˛ude/
cdefs
.h 
›t
-
nﬂs£πs
.h \

5 ../../
ö˛ude
/
synch
.
h
 ../../ö˛ude/
•ölock
.h \

6 
ö˛udñöks
/
machöe
/
•ölock
.
h
 ../../
ö˛ude
/
vfs
.h \

7 ../../
ö˛ude
/
¨øy
.
h
 ../../ö˛ude/
vnode
.h

	@compile/DUMBVM/.depend.xordi3.c

1 
	gx‹di3
.
	go
: ../../../
comm⁄
/
gcc
-
mûlicode
/
x‹di3
.
c
 \

2 ../../../
comm⁄
/
gcc
-
mûlicode
/
l⁄gl⁄g
.
h
 ../../
ö˛ude
/
ty≥s
.h \

3 ../../
ö˛ude
/
kîn
/
ty≥s
.
h
 
ö˛udñöks
/kîn/
machöe
/types.h \

4 
ö˛udñöks
/
machöe
/
ty≥s
.
h
 ../../
ö˛ude
/
ídün
.h \

5 ../../
ö˛ude
/
kîn
/
ídün
.
h
 
ö˛udñöks
/kîn/
machöe
/endian.h \

6 ../../
ö˛ude
/
limôs
.
h
 ../../ö˛ude/
kîn
/limits.h

	@compile/DUMBVM/autoconf.c

2 
	~<ty≥s.h
>

3 
	~<lib.h
>

4 
	~"autoc⁄f.h
"

6 
autoc⁄f_bìp
(
bìp_so·c
 *, );

7 
autoc⁄f_c⁄
(
c⁄_so·c
 *, );

8 
autoc⁄f_emu
(
emu_so·c
 *, );

9 
autoc⁄f_lhd
(
lhd_so·c
 *, );

10 
autoc⁄f_Ã™dom
(
Ã™dom_so·c
 *, );

11 
autoc⁄f_l£r
(
l£r_so·c
 *, );

12 
autoc⁄f_…imî
(
…imî_so·c
 *, );

13 
autoc⁄f_…ø˚
(
…ø˚_so·c
 *, );

14 
autoc⁄f_øndom
(
øndom_so·c
 *, );

15 
autoc⁄f_π˛ock
(
π˛ock_so·c
 *, );

16 
	g√xtunô_bìp
;

17 
	g√xtunô_c⁄
;

18 
	g√xtunô_emu
;

19 
	g√xtunô_lhd
;

20 
	g√xtunô_Ã™dom
;

21 
	g√xtunô_l£r
;

22 
	g√xtunô_…imî
;

23 
	g√xtunô_…ø˚
;

24 
	g√xtunô_øndom
;

25 
	g√xtunô_π˛ock
;

29 
	$åy©èch_emu_to_œmebus
(
devunô
, 
œmebus_so·c
 *
bus
, 
busunô
)

31 
emu_so·c
 *
dev
;

32 
ªsu…
;

34 
dev
 = 
	`©èch_emu_to_œmebus
(
devunô
, 
bus
);

35 i‡(
dev
==
NULL
) {

38 
	`k¥ötf
("emu%dáàœmebus%d", 
devunô
, 
busunô
);

39 
ªsu…
 = 
	`c⁄fig_emu
(
dev
, 
devunô
);

40 i‡(
ªsu…
 != 0) {

41 
	`k¥ötf
(": %s\n", 
	`°ªº‹
(
ªsu…
));

43  
ªsu…
;

45 
	`k¥ötf
("\n");

46 
√xtunô_emu
 = 
devunô
+1;

47 
	`autoc⁄f_emu
(
dev
, 
devunô
);

49 
	}
}

53 
	$åy©èch_…ø˚_to_œmebus
(
devunô
, 
œmebus_so·c
 *
bus
, 
busunô
)

55 
…ø˚_so·c
 *
dev
;

56 
ªsu…
;

58 
dev
 = 
	`©èch_…ø˚_to_œmebus
(
devunô
, 
bus
);

59 i‡(
dev
==
NULL
) {

62 
	`k¥ötf
("…ø˚%dáàœmebus%d", 
devunô
, 
busunô
);

63 
ªsu…
 = 
	`c⁄fig_…ø˚
(
dev
, 
devunô
);

64 i‡(
ªsu…
 != 0) {

65 
	`k¥ötf
(": %s\n", 
	`°ªº‹
(
ªsu…
));

67  
ªsu…
;

69 
	`k¥ötf
("\n");

70 
√xtunô_…ø˚
 = 
devunô
+1;

71 
	`autoc⁄f_…ø˚
(
dev
, 
devunô
);

73 
	}
}

77 
	$åy©èch_…imî_to_œmebus
(
devunô
, 
œmebus_so·c
 *
bus
, 
busunô
)

79 
…imî_so·c
 *
dev
;

80 
ªsu…
;

82 
dev
 = 
	`©èch_…imî_to_œmebus
(
devunô
, 
bus
);

83 i‡(
dev
==
NULL
) {

86 
	`k¥ötf
("…imî%dáàœmebus%d", 
devunô
, 
busunô
);

87 
ªsu…
 = 
	`c⁄fig_…imî
(
dev
, 
devunô
);

88 i‡(
ªsu…
 != 0) {

89 
	`k¥ötf
(": %s\n", 
	`°ªº‹
(
ªsu…
));

91  
ªsu…
;

93 
	`k¥ötf
("\n");

94 
√xtunô_…imî
 = 
devunô
+1;

95 
	`autoc⁄f_…imî
(
dev
, 
devunô
);

97 
	}
}

101 
	$åy©èch_Ã™dom_to_œmebus
(
devunô
, 
œmebus_so·c
 *
bus
, 
busunô
)

103 
Ã™dom_so·c
 *
dev
;

104 
ªsu…
;

106 
dev
 = 
	`©èch_Ã™dom_to_œmebus
(
devunô
, 
bus
);

107 i‡(
dev
==
NULL
) {

110 
	`k¥ötf
("Ã™dom%dáàœmebus%d", 
devunô
, 
busunô
);

111 
ªsu…
 = 
	`c⁄fig_Ã™dom
(
dev
, 
devunô
);

112 i‡(
ªsu…
 != 0) {

113 
	`k¥ötf
(": %s\n", 
	`°ªº‹
(
ªsu…
));

115  
ªsu…
;

117 
	`k¥ötf
("\n");

118 
√xtunô_Ã™dom
 = 
devunô
+1;

119 
	`autoc⁄f_Ã™dom
(
dev
, 
devunô
);

121 
	}
}

125 
	$åy©èch_lhd_to_œmebus
(
devunô
, 
œmebus_so·c
 *
bus
, 
busunô
)

127 
lhd_so·c
 *
dev
;

128 
ªsu…
;

130 
dev
 = 
	`©èch_lhd_to_œmebus
(
devunô
, 
bus
);

131 i‡(
dev
==
NULL
) {

134 
	`k¥ötf
("lhd%dáàœmebus%d", 
devunô
, 
busunô
);

135 
ªsu…
 = 
	`c⁄fig_lhd
(
dev
, 
devunô
);

136 i‡(
ªsu…
 != 0) {

137 
	`k¥ötf
(": %s\n", 
	`°ªº‹
(
ªsu…
));

139  
ªsu…
;

141 
	`k¥ötf
("\n");

142 
√xtunô_lhd
 = 
devunô
+1;

143 
	`autoc⁄f_lhd
(
dev
, 
devunô
);

145 
	}
}

149 
	$åy©èch_l£r_to_œmebus
(
devunô
, 
œmebus_so·c
 *
bus
, 
busunô
)

151 
l£r_so·c
 *
dev
;

152 
ªsu…
;

154 
dev
 = 
	`©èch_l£r_to_œmebus
(
devunô
, 
bus
);

155 i‡(
dev
==
NULL
) {

158 
	`k¥ötf
("l£r%dáàœmebus%d", 
devunô
, 
busunô
);

159 
ªsu…
 = 
	`c⁄fig_l£r
(
dev
, 
devunô
);

160 i‡(
ªsu…
 != 0) {

161 
	`k¥ötf
(": %s\n", 
	`°ªº‹
(
ªsu…
));

163  
ªsu…
;

165 
	`k¥ötf
("\n");

166 
√xtunô_l£r
 = 
devunô
+1;

167 
	`autoc⁄f_l£r
(
dev
, 
devunô
);

169 
	}
}

173 
	$åy©èch_bìp_to_…imî
(
devunô
, 
…imî_so·c
 *
bus
, 
busunô
)

175 
bìp_so·c
 *
dev
;

176 
ªsu…
;

178 
dev
 = 
	`©èch_bìp_to_…imî
(
devunô
, 
bus
);

179 i‡(
dev
==
NULL
) {

182 
	`k¥ötf
("bìp%dáà…imî%d", 
devunô
, 
busunô
);

183 
ªsu…
 = 
	`c⁄fig_bìp
(
dev
, 
devunô
);

184 i‡(
ªsu…
 != 0) {

185 
	`k¥ötf
(": %s\n", 
	`°ªº‹
(
ªsu…
));

187  
ªsu…
;

189 
	`k¥ötf
("\n");

190 
√xtunô_bìp
 = 
devunô
+1;

191 
	`autoc⁄f_bìp
(
dev
, 
devunô
);

193 
	}
}

197 
	$åy©èch_c⁄_to_l£r
(
devunô
, 
l£r_so·c
 *
bus
, 
busunô
)

199 
c⁄_so·c
 *
dev
;

200 
ªsu…
;

202 
dev
 = 
	`©èch_c⁄_to_l£r
(
devunô
, 
bus
);

203 i‡(
dev
==
NULL
) {

206 
	`k¥ötf
("c⁄%dáàl£r%d", 
devunô
, 
busunô
);

207 
ªsu…
 = 
	`c⁄fig_c⁄
(
dev
, 
devunô
);

208 i‡(
ªsu…
 != 0) {

209 
	`k¥ötf
(": %s\n", 
	`°ªº‹
(
ªsu…
));

211  
ªsu…
;

213 
	`k¥ötf
("\n");

214 
√xtunô_c⁄
 = 
devunô
+1;

215 
	`autoc⁄f_c⁄
(
dev
, 
devunô
);

217 
	}
}

221 
	$åy©èch_π˛ock_to_…imî
(
devunô
, 
…imî_so·c
 *
bus
, 
busunô
)

223 
π˛ock_so·c
 *
dev
;

224 
ªsu…
;

226 
dev
 = 
	`©èch_π˛ock_to_…imî
(
devunô
, 
bus
);

227 i‡(
dev
==
NULL
) {

230 
	`k¥ötf
("π˛ock%dáà…imî%d", 
devunô
, 
busunô
);

231 
ªsu…
 = 
	`c⁄fig_π˛ock
(
dev
, 
devunô
);

232 i‡(
ªsu…
 != 0) {

233 
	`k¥ötf
(": %s\n", 
	`°ªº‹
(
ªsu…
));

235  
ªsu…
;

237 
	`k¥ötf
("\n");

238 
√xtunô_π˛ock
 = 
devunô
+1;

239 
	`autoc⁄f_π˛ock
(
dev
, 
devunô
);

241 
	}
}

245 
	$åy©èch_øndom_to_Ã™dom
(
devunô
, 
Ã™dom_so·c
 *
bus
, 
busunô
)

247 
øndom_so·c
 *
dev
;

248 
ªsu…
;

250 
dev
 = 
	`©èch_øndom_to_Ã™dom
(
devunô
, 
bus
);

251 i‡(
dev
==
NULL
) {

254 
	`k¥ötf
("øndom%dáàÃ™dom%d", 
devunô
, 
busunô
);

255 
ªsu…
 = 
	`c⁄fig_øndom
(
dev
, 
devunô
);

256 i‡(
ªsu…
 != 0) {

257 
	`k¥ötf
(": %s\n", 
	`°ªº‹
(
ªsu…
));

259  
ªsu…
;

261 
	`k¥ötf
("\n");

262 
√xtunô_øndom
 = 
devunô
+1;

263 
	`autoc⁄f_øndom
(
dev
, 
devunô
);

265 
	}
}

270 
	$autoc⁄f_π˛ock
(
π˛ock_so·c
 *
bus
, 
busunô
)

272 ()
bus
; ()
busunô
;

273 
	}
}

277 
	$autoc⁄f_Ã™dom
(
Ã™dom_so·c
 *
bus
, 
busunô
)

279 ()
bus
; ()
busunô
;

281 i‡(
√xtunô_øndom
 <= 0) {

282 
	`åy©èch_øndom_to_Ã™dom
(0, 
bus
, 
busunô
);

285 
	}
}

289 
	$autoc⁄f_…ø˚
(
…ø˚_so·c
 *
bus
, 
busunô
)

291 ()
bus
; ()
busunô
;

292 
	}
}

296 
	$autoc⁄f_emu
(
emu_so·c
 *
bus
, 
busunô
)

298 ()
bus
; ()
busunô
;

299 
	}
}

303 
	$autoc⁄f_øndom
(
øndom_so·c
 *
bus
, 
busunô
)

305 ()
bus
; ()
busunô
;

306 
	}
}

310 
	$autoc⁄f_lhd
(
lhd_so·c
 *
bus
, 
busunô
)

312 ()
bus
; ()
busunô
;

313 
	}
}

317 
	$autoc⁄f_bìp
(
bìp_so·c
 *
bus
, 
busunô
)

319 ()
bus
; ()
busunô
;

320 
	}
}

323 
	$autoc⁄f_œmebus
(
œmebus_so·c
 *
bus
, 
busunô
)

325 ()
bus
; ()
busunô
;

327 
ªsu…
, 
devunô
=
√xtunô_emu
;

329 
ªsu…
 = 
	`åy©èch_emu_to_œmebus
(
devunô
, 
bus
, 
busunô
);

330 
devunô
++;

331 } 
ªsu…
==0);

334 
ªsu…
, 
devunô
=
√xtunô_…ø˚
;

336 
ªsu…
 = 
	`åy©èch_…ø˚_to_œmebus
(
devunô
, 
bus
, 
busunô
);

337 
devunô
++;

338 } 
ªsu…
==0);

341 
ªsu…
, 
devunô
=
√xtunô_…imî
;

343 
ªsu…
 = 
	`åy©èch_…imî_to_œmebus
(
devunô
, 
bus
, 
busunô
);

344 
devunô
++;

345 } 
ªsu…
==0);

348 
ªsu…
, 
devunô
=
√xtunô_Ã™dom
;

350 
ªsu…
 = 
	`åy©èch_Ã™dom_to_œmebus
(
devunô
, 
bus
, 
busunô
);

351 
devunô
++;

352 } 
ªsu…
==0);

355 
ªsu…
, 
devunô
=
√xtunô_lhd
;

357 
ªsu…
 = 
	`åy©èch_lhd_to_œmebus
(
devunô
, 
bus
, 
busunô
);

358 
devunô
++;

359 } 
ªsu…
==0);

362 
ªsu…
, 
devunô
=
√xtunô_l£r
;

364 
ªsu…
 = 
	`åy©èch_l£r_to_œmebus
(
devunô
, 
bus
, 
busunô
);

365 
devunô
++;

366 } 
ªsu…
==0);

368 
	}
}

372 
	$autoc⁄f_l£r
(
l£r_so·c
 *
bus
, 
busunô
)

374 ()
bus
; ()
busunô
;

376 i‡(
√xtunô_c⁄
 <= 0) {

377 
	`åy©èch_c⁄_to_l£r
(0, 
bus
, 
busunô
);

380 
	}
}

384 
	$autoc⁄f_c⁄
(
c⁄_so·c
 *
bus
, 
busunô
)

386 ()
bus
; ()
busunô
;

387 
	}
}

391 
	$autoc⁄f_…imî
(
…imî_so·c
 *
bus
, 
busunô
)

393 ()
bus
; ()
busunô
;

395 i‡(
√xtunô_bìp
 <= 0) {

396 
	`åy©èch_bìp_to_…imî
(0, 
bus
, 
busunô
);

400 i‡(
√xtunô_π˛ock
 <= 0) {

401 
	`åy©èch_π˛ock_to_…imî
(0, 
bus
, 
busunô
);

404 
	}
}

407 
	$p£udoc⁄fig
()

409 
	}
}

	@compile/DUMBVM/autoconf.h

2 #i‚de‡
_AUTOCONF_H_


3 
	#_AUTOCONF_H_


	)

5 
	gœmebus_so·c
;

6 
	gemu_so·c
;

7 
	g…ø˚_so·c
;

8 
	g…imî_so·c
;

9 
	gÃ™dom_so·c
;

10 
	glhd_so·c
;

11 
	gl£r_so·c
;

12 
	gbìp_so·c
;

13 
	gc⁄_so·c
;

14 
	gπ˛ock_so·c
;

15 
	gøndom_so·c
;

17 
autoc⁄f_œmebus
(
œmebus_so·c
 *
dev
, 
unô
);

19 
emu_so·c
 *
©èch_emu_to_œmebus
(
devunô
, 
œmebus_so·c
 *
bus
);

20 
…ø˚_so·c
 *
©èch_…ø˚_to_œmebus
(
devunô
, 
œmebus_so·c
 *
bus
);

21 
…imî_so·c
 *
©èch_…imî_to_œmebus
(
devunô
, 
œmebus_so·c
 *
bus
);

22 
Ã™dom_so·c
 *
©èch_Ã™dom_to_œmebus
(
devunô
, 
œmebus_so·c
 *
bus
);

23 
lhd_so·c
 *
©èch_lhd_to_œmebus
(
devunô
, 
œmebus_so·c
 *
bus
);

24 
l£r_so·c
 *
©èch_l£r_to_œmebus
(
devunô
, 
œmebus_so·c
 *
bus
);

25 
bìp_so·c
 *
©èch_bìp_to_…imî
(
devunô
, 
…imî_so·c
 *
bus
);

26 
c⁄_so·c
 *
©èch_c⁄_to_l£r
(
devunô
, 
l£r_so·c
 *
bus
);

27 
π˛ock_so·c
 *
©èch_π˛ock_to_…imî
(
devunô
, 
…imî_so·c
 *
bus
);

28 
øndom_so·c
 *
©èch_øndom_to_Ã™dom
(
devunô
, 
Ã™dom_so·c
 *
bus
);

30 
c⁄fig_emu
(
emu_so·c
 *
dev
, 
unô
);

31 
c⁄fig_…ø˚
(
…ø˚_so·c
 *
dev
, 
unô
);

32 
c⁄fig_…imî
(
…imî_so·c
 *
dev
, 
unô
);

33 
c⁄fig_Ã™dom
(
Ã™dom_so·c
 *
dev
, 
unô
);

34 
c⁄fig_lhd
(
lhd_so·c
 *
dev
, 
unô
);

35 
c⁄fig_l£r
(
l£r_so·c
 *
dev
, 
unô
);

36 
c⁄fig_bìp
(
bìp_so·c
 *
dev
, 
unô
);

37 
c⁄fig_c⁄
(
c⁄_so·c
 *
dev
, 
unô
);

38 
c⁄fig_π˛ock
(
π˛ock_so·c
 *
dev
, 
unô
);

39 
c⁄fig_øndom
(
øndom_so·c
 *
dev
, 
unô
);

41 
p£udoc⁄fig
();

	@compile/DUMBVM/opt-dumbvm.h

2 #i‚de‡
_OPT_DUMBVM_H_


3 
	#_OPT_DUMBVM_H_


	)

4 
	#OPT_DUMBVM
 1

	)

	@compile/DUMBVM/opt-net.h

2 #i‚de‡
_OPT_NET_H_


3 
	#_OPT_NET_H_


	)

4 
	#OPT_NET
 0

	)

	@compile/DUMBVM/opt-netfs.h

2 #i‚de‡
_OPT_NETFS_H_


3 
	#_OPT_NETFS_H_


	)

4 
	#OPT_NETFS
 0

	)

	@compile/DUMBVM/opt-noasserts.h

2 #i‚de‡
_OPT_NOASSERTS_H_


3 
	#_OPT_NOASSERTS_H_


	)

4 
	#OPT_NOASSERTS
 0

	)

	@compile/DUMBVM/opt-semfs.h

2 #i‚de‡
_OPT_SEMFS_H_


3 
	#_OPT_SEMFS_H_


	)

4 
	#OPT_SEMFS
 1

	)

	@compile/DUMBVM/opt-sfs.h

2 #i‚de‡
_OPT_SFS_H_


3 
	#_OPT_SFS_H_


	)

4 
	#OPT_SFS
 1

	)

	@compile/DUMBVM/opt-synchprobs.h

2 #i‚de‡
_OPT_SYNCHPROBS_H_


3 
	#_OPT_SYNCHPROBS_H_


	)

4 
	#OPT_SYNCHPROBS
 0

	)

	@compile/DUMBVM/vers.c

2 c⁄° 
	gbuûdvîsi⁄
 = 368;

3 c⁄° 
	gbuûdc⁄fig
[] = "DUMBVM";

	@dev/generic/beep.c

30 
	~<ty≥s.h
>

31 
	~<kîn/î∫o.h
>

32 
	~<lib.h
>

33 
	~<gíîic/bìp.h
>

34 
	~"autoc⁄f.h
"

47 
bìp_so·c
 *
	gthe_bìp
 = 
NULL
;

50 
	$c⁄fig_bìp
(
bìp_so·c
 *
bs
, 
unô
)

53 i‡(
unô
!=0) {

54  
ENODEV
;

57 
	`KASSERT
(
the_bìp
==
NULL
);

58 
the_bìp
 = 
bs
;

60 
	}
}

63 
	$bìp
()

65 i‡(
the_bìp
!=
NULL
) {

66 
the_bìp
->
	`bs_bìp
—he_bìp->
bs_devd©a
);

69 
	`k¥ötf
("beep: Warning:Ço beep device\n");

71 
	}
}

	@dev/generic/beep.h

30 #i‚de‡
_GENERIC_BEEP_H_


31 
	#_GENERIC_BEEP_H_


	)

38 
	sbìp_so·c
 {

39 *
	mbs_devd©a
;

40 (*
	mbs_bìp
)(*
	mdevd©a
);

	@dev/generic/console.c

50 
	~<ty≥s.h
>

51 
	~<kîn/î∫o.h
>

52 
	~<lib.h
>

53 
	~<uio.h
>

54 
	~<˝u.h
>

55 
	~<thªad.h
>

56 
	~<cuºít.h
>

57 
	~<synch.h
>

58 
	~<gíîic/c⁄sﬁe.h
>

59 
	~<vfs.h
>

60 
	~<devi˚.h
>

61 
	~"autoc⁄f.h
"

66 
c⁄_so·c
 *
	gthe_c⁄sﬁe
 = 
NULL
;

72 
lock
 *
	gc⁄_u£æock_ªad
 = 
NULL
;

73 
lock
 *
	gc⁄_u£æock_wrôe
 = 
NULL
;

82 
	#DELAYBUFSIZE
 1024

	)

83 
	gdñayed_outbuf
[
DELAYBUFSIZE
];

84 
size_t
 
	gdñayed_outbuf_pos
=0;

88 
	$putch_dñayed
(
ch
)

95 
	`KASSERT
(
dñayed_outbuf_pos
 < (
dñayed_outbuf
));

96 
dñayed_outbuf
[
dñayed_outbuf_pos
++] = 
ch
;

97 
	}
}

101 
	$Êush_dñay_buf
()

103 
size_t
 
i
;

104 
i
=0; i<
dñayed_outbuf_pos
; i++) {

105 
	`putch
(
dñayed_outbuf
[
i
]);

107 
dñayed_outbuf_pos
 = 0;

108 
	}
}

118 
	$putch_pﬁÀd
(
c⁄_so·c
 *
cs
, 
ch
)

120 
cs
->
	`cs_£ndpﬁÀd
(cs->
cs_devd©a
, 
ch
);

121 
	}
}

130 
	$putch_öå
(
c⁄_so·c
 *
cs
, 
ch
)

132 
	`P
(
cs
->
cs_w£m
);

133 
cs
->
	`cs_£nd
(cs->
cs_devd©a
, 
ch
);

134 
	}
}

141 
	$gëch_öå
(
c⁄_so·c
 *
cs
)

143 
ªt
;

145 
	`P
(
cs
->
cs_r£m
);

146 
ªt
 = 
cs
->
cs_gŸch¨s
[cs->
cs_gŸch¨s_èû
];

147 
cs
->
cs_gŸch¨s_èû
 =

148 (
cs
->
cs_gŸch¨s_èû
 + 1Ë% 
CONSOLE_INPUT_BUFFER_SIZE
;

149  
ªt
;

150 
	}
}

162 
	$c⁄_öput
(*
vcs
, 
ch
)

164 
c⁄_so·c
 *
cs
 = 
vcs
;

165 
√xthód
;

167 
√xthód
 = (
cs
->
cs_gŸch¨s_hód
 + 1Ë% 
CONSOLE_INPUT_BUFFER_SIZE
;

168 i‡(
√xthód
 =
cs
->
cs_gŸch¨s_èû
) {

173 
cs
->
cs_gŸch¨s
[cs->
cs_gŸch¨s_hód
] = 
ch
;

174 
cs
->
cs_gŸch¨s_hód
 = 
√xthód
;

176 
	`V
(
cs
->
cs_r£m
);

177 
	}
}

183 
	$c⁄_°¨t
(*
vcs
)

185 
c⁄_so·c
 *
cs
 = 
vcs
;

187 
	`V
(
cs
->
cs_w£m
);

188 
	}
}

201 
	$putch
(
ch
)

203 
c⁄_so·c
 *
cs
 = 
the_c⁄sﬁe
;

205 i‡(
cs
==
NULL
) {

206 
	`putch_dñayed
(
ch
);

208 i‡(
cuπhªad
->
t_ö_öãºu±
 ||

209 
cuπhªad
->
t_cur•l
 > 0 ||

210 
cur˝u
->
c_•ölocks
 > 0) {

211 
	`putch_pﬁÀd
(
cs
, 
ch
);

214 
	`putch_öå
(
cs
, 
ch
);

216 
	}
}

219 
	$gëch
()

221 
c⁄_so·c
 *
cs
 = 
the_c⁄sﬁe
;

222 
	`KASSERT
(
cs
 !
NULL
);

223 
	`KASSERT
(!
cuπhªad
->
t_ö_öãºu±
 && cuπhªad->
t_ùlhigh_cou¡
 == 0);

225  
	`gëch_öå
(
cs
);

226 
	}
}

236 
	$c⁄_óch›í
(
devi˚
 *
dev
, 
›íÊags
)

238 ()
dev
;

239 ()
›íÊags
;

241 
	}
}

245 
	$c⁄_io
(
devi˚
 *
dev
, 
uio
 *uio)

247 
ªsu…
;

248 
ch
;

249 
lock
 *
lk
;

251 ()
dev
;

253 i‡(
uio
->
uio_rw
==
UIO_READ
) {

254 
lk
 = 
c⁄_u£æock_ªad
;

257 
lk
 = 
c⁄_u£æock_wrôe
;

260 
	`KASSERT
(
lk
 !
NULL
);

261 
	`lock_acquúe
(
lk
);

263 
uio
->
uio_ªsid
 > 0) {

264 i‡(
uio
->
uio_rw
==
UIO_READ
) {

265 
ch
 = 
	`gëch
();

266 i‡(
ch
=='\r') {

267 
ch
 = '\n';

269 
ªsu…
 = 
	`uiomove
(&
ch
, 1, 
uio
);

270 i‡(
ªsu…
) {

271 
	`lock_ªÀa£
(
lk
);

272  
ªsu…
;

274 i‡(
ch
=='\n') {

279 
ªsu…
 = 
	`uiomove
(&
ch
, 1, 
uio
);

280 i‡(
ªsu…
) {

281 
	`lock_ªÀa£
(
lk
);

282  
ªsu…
;

284 i‡(
ch
=='\n') {

285 
	`putch
('\r');

287 
	`putch
(
ch
);

290 
	`lock_ªÀa£
(
lk
);

292 
	}
}

296 
	$c⁄_io˘l
(
devi˚
 *
dev
, 
›
, 
u£Ωå_t
 
d©a
)

299 ()
dev
;

300 ()
›
;

301 ()
d©a
;

302  
EINVAL
;

303 
	}
}

305 c⁄° 
devi˚_›s
 
	gc⁄sﬁe_dev›s
 = {

306 .
dev›_óch›í
 = 
c⁄_óch›í
,

307 .
	gdev›_io
 = 
c⁄_io
,

308 .
	gdev›_io˘l
 = 
c⁄_io˘l
,

313 
	$©èch_c⁄sﬁe_to_vfs
(
c⁄_so·c
 *
cs
)

315 
devi˚
 *
dev
;

316 
ªsu…
;

318 
dev
 = 
	`kmÆloc
((*dev));

319 i‡(
dev
==
NULL
) {

320  
ENOMEM
;

323 
dev
->
d_›s
 = &
c⁄sﬁe_dev›s
;

324 
dev
->
d_blocks
 = 0;

325 
dev
->
d_blocksize
 = 1;

326 
dev
->
d_d©a
 = 
cs
;

328 
ªsu…
 = 
	`vfs_adddev
("c⁄", 
dev
, 0);

329 i‡(
ªsu…
) {

330 
	`k‰ì
(
dev
);

331  
ªsu…
;

335 
	}
}

344 
	$c⁄fig_c⁄
(
c⁄_so·c
 *
cs
, 
unô
)

346 
£m≠h‹e
 *
r£m
, *
w£m
;

347 
lock
 *
æk
, *
wlk
;

356 i‡(
unô
>0) {

357 
	`KASSERT
(
the_c⁄sﬁe
!=
NULL
);

358  
ENODEV
;

360 
	`KASSERT
(
the_c⁄sﬁe
==
NULL
);

362 
r£m
 = 
	`£m_¸óã
("consoleÑead", 0);

363 i‡(
r£m
 =
NULL
) {

364  
ENOMEM
;

366 
w£m
 = 
	`£m_¸óã
("console write", 1);

367 i‡(
w£m
 =
NULL
) {

368 
	`£m_de°roy
(
r£m
);

369  
ENOMEM
;

371 
æk
 = 
	`lock_¸óã
("console-lock-read");

372 i‡(
æk
 =
NULL
) {

373 
	`£m_de°roy
(
r£m
);

374 
	`£m_de°roy
(
w£m
);

375  
ENOMEM
;

377 
wlk
 = 
	`lock_¸óã
("console-lock-write");

378 i‡(
wlk
 =
NULL
) {

379 
	`lock_de°roy
(
æk
);

380 
	`£m_de°roy
(
r£m
);

381 
	`£m_de°roy
(
w£m
);

382  
ENOMEM
;

385 
cs
->
cs_r£m
 = 
r£m
;

386 
cs
->
cs_w£m
 = 
w£m
;

387 
cs
->
cs_gŸch¨s_hód
 = 0;

388 
cs
->
cs_gŸch¨s_èû
 = 0;

390 
the_c⁄sﬁe
 = 
cs
;

391 
c⁄_u£æock_ªad
 = 
æk
;

392 
c⁄_u£æock_wrôe
 = 
wlk
;

394 
	`Êush_dñay_buf
();

396  
	`©èch_c⁄sﬁe_to_vfs
(
cs
);

397 
	}
}

	@dev/generic/console.h

30 #i‚de‡
_GENERIC_CONSOLE_H_


31 
	#_GENERIC_CONSOLE_H_


	)

40 
	#CONSOLE_INPUT_BUFFER_SIZE
 32

	)

42 
	sc⁄_so·c
 {

44 *
	mcs_devd©a
;

45 (*
	mcs_£nd
)(*
	mdevd©a
, 
	mch
);

46 (*
	mcs_£ndpﬁÀd
)(*
	mdevd©a
, 
	mch
);

49 
£m≠h‹e
 *
	mcs_r£m
;

50 
£m≠h‹e
 *
	mcs_w£m
;

51 
	mcs_gŸch¨s
[
CONSOLE_INPUT_BUFFER_SIZE
];

52 
	mcs_gŸch¨s_hód
;

53 
	mcs_gŸch¨s_èû
;

59 
c⁄_öput
–*
cs
, 
ch
);

60 
c⁄_°¨t
–*
cs
);

	@dev/generic/random.c

30 
	~<ty≥s.h
>

31 
	~<kîn/î∫o.h
>

32 
	~<kîn/f˙é.h
>

33 
	~<lib.h
>

34 
	~<uio.h
>

35 
	~<vfs.h
>

36 
	~<gíîic/øndom.h
>

37 
	~"autoc⁄f.h
"

50 
øndom_so·c
 *
	gthe_øndom
 = 
NULL
;

58 
	$øndóch›í
(
devi˚
 *
dev
, 
›íÊags
)

60 ()
dev
;

62 i‡(
›íÊags
 !
O_RDONLY
) {

63  
EIO
;

67 
	}
}

74 
	$øndio
(
devi˚
 *
dev
, 
uio
 *uio)

76 
øndom_so·c
 *
rs
 = 
dev
->
d_d©a
;

78 i‡(
uio
->
uio_rw
 !
UIO_READ
) {

79  
EIO
;

82  
rs
->
	`rs_ªad
‘s->
rs_devd©a
, 
uio
);

83 
	}
}

90 
	$øndio˘l
(
devi˚
 *
dev
, 
›
, 
u£Ωå_t
 
d©a
)

95 ()
dev
;

96 ()
›
;

97 ()
d©a
;

98  
EIOCTL
;

99 
	}
}

101 c⁄° 
devi˚_›s
 
	gøndom_dev›s
 = {

102 .
dev›_óch›í
 = 
øndóch›í
,

103 .
	gdev›_io
 = 
øndio
,

104 .
	gdev›_io˘l
 = 
øndio˘l
,

111 
	$c⁄fig_øndom
(
øndom_so·c
 *
rs
, 
unô
)

113 
ªsu…
;

116 i‡(
unô
!=0) {

117  
ENODEV
;

120 
	`KASSERT
(
the_øndom
==
NULL
);

121 
the_øndom
 = 
rs
;

123 
rs
->
rs_dev
.
d_›s
 = &
øndom_dev›s
;

124 
rs
->
rs_dev
.
d_blocks
 = 0;

125 
rs
->
rs_dev
.
d_blocksize
 = 1;

126 
rs
->
rs_dev
.
d_d©a
 =Ñs;

129 
ªsu…
 = 
	`vfs_adddev
("øndom", &
rs
->
rs_dev
, 0);

130 i‡(
ªsu…
) {

131  
ªsu…
;

135 
	}
}

142 
uöt32_t


143 
	$øndom
()

145 i‡(
the_øndom
==
NULL
) {

146 
	`∑nic
("NoÑandom device\n");

148  
the_øndom
->
	`rs_øndom
—he_øndom->
rs_devd©a
);

149 
	}
}

151 
uöt32_t


152 
	$øndmax
()

154 i‡(
the_øndom
==
NULL
) {

155 
	`∑nic
("NoÑandom device\n");

157  
the_øndom
->
	`rs_øndmax
—he_øndom->
rs_devd©a
);

158 
	}
}

	@dev/generic/random.h

30 #i‚de‡
_GENERIC_RANDOM_H_


31 
	#_GENERIC_RANDOM_H_


	)

33 
	~<devi˚.h
>

34 
	guio
;

36 
	søndom_so·c
 {

38 *
	mrs_devd©a
;

39 
uöt32_t
 (*
rs_øndom
)(*
	mdevd©a
);

40 
uöt32_t
 (*
rs_øndmax
)(*
	mdevd©a
);

41 (*
	mrs_ªad
)(*
	mdevd©a
, 
uio
 *
	muio
);

43 
devi˚
 
	mrs_dev
;

	@dev/generic/rtclock.c

43 
	~<ty≥s.h
>

44 
	~<kîn/î∫o.h
>

45 
	~<lib.h
>

46 
	~<˛ock.h
>

47 
	~<gíîic/π˛ock.h
>

48 
	~"autoc⁄f.h
"

50 
π˛ock_so·c
 *
	gthe_˛ock
 = 
NULL
;

53 
	$c⁄fig_π˛ock
(
π˛ock_so·c
 *
πc
, 
unô
)

56 i‡(
unô
!=0) {

57  
ENODEV
;

60 
	`KASSERT
(
the_˛ock
==
NULL
);

61 
the_˛ock
 = 
πc
;

63 
	}
}

66 
	$gëtime
(
time•ec
 *
ts
)

68 
	`KASSERT
(
the_˛ock
!=
NULL
);

69 
the_˛ock
->
	`πc_gëtime
—he_˛ock->
πc_devd©a
, 
ts
);

70 
	}
}

	@dev/generic/rtclock.h

30 #i‚de‡
_GENERIC_RTCLOCK_H_


31 
	#_GENERIC_RTCLOCK_H_


	)

38 
	gtime•ec
;

40 
	sπ˛ock_so·c
 {

41 *
	mπc_devd©a
;

42 (*
	mπc_gëtime
)(*
	mdevd©a
, 
	mtime•ec
 *);

	@dev/lamebus/beep_ltimer.c

35 
	~<ty≥s.h
>

36 
	~<lib.h
>

37 
	~<gíîic/bìp.h
>

38 
	~<œmebus/…imî.h
>

39 
	~"autoc⁄f.h
"

41 
bìp_so·c
 *

42 
	$©èch_bìp_to_…imî
(
bì≤o
, 
…imî_so·c
 *
ls
)

44 
bìp_so·c
 *
bs
 = 
	`kmÆloc
((beep_softc));

45 i‡(
bs
==
NULL
) {

46  
NULL
;

49 ()
bì≤o
;

51 
bs
->
bs_devd©a
 = 
ls
;

52 
bs
->
bs_bìp
 = 
…imî_bìp
;

54  
bs
;

55 
	}
}

	@dev/lamebus/con_lscreen.c

35 
	~<ty≥s.h
>

36 
	~<lib.h
>

37 
	~<gíîic/c⁄sﬁe.h
>

38 
	~<œmebus/ls¸ìn.h
>

39 
	~"autoc⁄f.h
"

41 
c⁄_so·c
 *

42 
	$©èch_c⁄_to_ls¸ìn
(
c⁄¢o
, 
ls¸ìn_so·c
 *
ls
)

44 
c⁄_so·c
 *
cs
 = 
	`kmÆloc
((con_softc));

45 i‡(
cs
==
NULL
) {

46  
NULL
;

49 
cs
->
cs_devd©a
 = 
ls
;

50 
cs
->
cs_£nd
 = 
ls¸ìn_wrôe
;

51 
cs
->
cs_£ndpﬁÀd
 = 
ls¸ìn_wrôe
;

53 
ls
->
ls_devd©a
 = 
cs
;

54 
ls
->
ls_°¨t
 = 
c⁄_°¨t
;

55 
ls
->
ls_öput
 = 
c⁄_öput
;

57  
cs
;

58 
	}
}

	@dev/lamebus/con_lser.c

35 
	~<ty≥s.h
>

36 
	~<lib.h
>

37 
	~<gíîic/c⁄sﬁe.h
>

38 
	~<œmebus/l£r.h
>

39 
	~"autoc⁄f.h
"

41 
c⁄_so·c
 *

42 
	$©èch_c⁄_to_l£r
(
c⁄¢o
, 
l£r_so·c
 *
ls
)

44 
c⁄_so·c
 *
cs
 = 
	`kmÆloc
((con_softc));

45 i‡(
cs
==
NULL
) {

46  
NULL
;

49 ()
c⁄¢o
;

51 
cs
->
cs_devd©a
 = 
ls
;

52 
cs
->
cs_£nd
 = 
l£r_wrôe
;

53 
cs
->
cs_£ndpﬁÀd
 = 
l£r_wrôïﬁÀd
;

55 
ls
->
ls_devd©a
 = 
cs
;

56 
ls
->
ls_°¨t
 = 
c⁄_°¨t
;

57 
ls
->
ls_öput
 = 
c⁄_öput
;

59  
cs
;

60 
	}
}

	@dev/lamebus/emu.c

43 
	~<ty≥s.h
>

44 
	~<kîn/î∫o.h
>

45 
	~<kîn/f˙é.h
>

46 
	~<°©.h
>

47 
	~<lib.h
>

48 
	~<¨øy.h
>

49 
	~<uio.h
>

50 
	~<memb¨.h
>

51 
	~<synch.h
>

52 
	~<œmebus/emu.h
>

53 
	~<∂©f‹m/bus.h
>

54 
	~<vfs.h
>

55 
	~<emufs.h
>

56 
	~"autoc⁄f.h
"

59 
	#REG_HANDLE
 0

	)

60 
	#REG_OFFSET
 4

	)

61 
	#REG_IOLEN
 8

	)

62 
	#REG_OPER
 12

	)

63 
	#REG_RESULT
 16

	)

66 
	#EMU_BUFFER
 32768

	)

69 
	#EMU_OP_OPEN
 1

	)

70 
	#EMU_OP_CREATE
 2

	)

71 
	#EMU_OP_EXCLCREATE
 3

	)

72 
	#EMU_OP_CLOSE
 4

	)

73 
	#EMU_OP_READ
 5

	)

74 
	#EMU_OP_READDIR
 6

	)

75 
	#EMU_OP_WRITE
 7

	)

76 
	#EMU_OP_GETSIZE
 8

	)

77 
	#EMU_OP_TRUNC
 9

	)

80 
	#EMU_RES_SUCCESS
 1

	)

81 
	#EMU_RES_BADHANDLE
 2

	)

82 
	#EMU_RES_BADOP
 3

	)

83 
	#EMU_RES_BADPATH
 4

	)

84 
	#EMU_RES_BADSIZE
 5

	)

85 
	#EMU_RES_EXISTS
 6

	)

86 
	#EMU_RES_ISDIR
 7

	)

87 
	#EMU_RES_MEDIA
 8

	)

88 
	#EMU_RES_NOHANDLES
 9

	)

89 
	#EMU_RES_NOSPACE
 10

	)

90 
	#EMU_RES_NOTDIR
 11

	)

91 
	#EMU_RES_UNKNOWN
 12

	)

92 
	#EMU_RES_UNSUPP
 13

	)

103 
ölöe


104 
uöt32_t


105 
	$emu_ºeg
(
emu_so·c
 *
sc
, 
uöt32_t
 
ªg
)

107  
	`bus_ªad_ªgi°î
(
sc
->
e_busd©a
, sc->
e_bu•os
, 
ªg
);

108 
	}
}

114 
ölöe


116 
	$emu_wªg
(
emu_so·c
 *
sc
, 
uöt32_t
 
ªg
, uöt32_à
vÆ
)

118 
	`bus_wrôe_ªgi°î
(
sc
->
e_busd©a
, sc->
e_bu•os
, 
ªg
, 
vÆ
);

119 
	}
}

125 
	$emu_úq
(*
dev
)

127 
emu_so·c
 *
sc
 = 
dev
;

129 
sc
->
e_ªsu…
 = 
	`emu_ºeg
(sc, 
REG_RESULT
);

130 
	`emu_wªg
(
sc
, 
REG_RESULT
, 0);

132 
	`V
(
sc
->
e_£m
);

133 
	}
}

140 
uöt32_t


141 
	$å™¶©e_îr
(
emu_so·c
 *
sc
, 
uöt32_t
 
code
)

143 
code
) {

144 
EMU_RES_SUCCESS
:  0;

145 
EMU_RES_BADHANDLE
:

146 
EMU_RES_BADOP
:

147 
EMU_RES_BADSIZE
:

148 
	`∑nic
("emu%d: gŸ f©ÆÑesu… codê%d\n", 
sc
->
e_unô
, 
code
);

149 
EMU_RES_BADPATH
:  
ENOENT
;

150 
EMU_RES_EXISTS
:  
EEXIST
;

151 
EMU_RES_ISDIR
:  
EISDIR
;

152 
EMU_RES_MEDIA
:  
EIO
;

153 
EMU_RES_NOHANDLES
:  
ENFILE
;

154 
EMU_RES_NOSPACE
:  
ENOSPC
;

155 
EMU_RES_NOTDIR
:  
ENOTDIR
;

156 
EMU_RES_UNKNOWN
:  
EIO
;

157 
EMU_RES_UNSUPP
:  
ENOSYS
;

159 
	`k¥ötf
("emu%d: Unknow¿ªsu… codê%d\n", 
sc
->
e_unô
, 
code
);

160  
EAGAIN
;

161 
	}
}

168 
	$emu_waôd⁄e
(
emu_so·c
 *
sc
)

170 
	`P
(
sc
->
e_£m
);

171  
	`å™¶©e_îr
(
sc
, sc->
e_ªsu…
);

172 
	}
}

182 
	$emu_›í
(
emu_so·c
 *
sc
, 
uöt32_t
 
h™dÀ
, c⁄° *
«me
,

183 
boﬁ
 
¸óã
, boﬁ 
ex˛
, 
mode_t
 
mode
,

184 
uöt32_t
 *
√wh™dÀ
, *
√wisdú
)

186 
uöt32_t
 
›
;

187 
ªsu…
;

189 i‡(
	`°æí
(
«me
)+1 > 
EMU_MAXIO
) {

190  
ENAMETOOLONG
;

193 i‡(
¸óã
 && 
ex˛
) {

194 
›
 = 
EMU_OP_EXCLCREATE
;

196 i‡(
¸óã
) {

197 
›
 = 
EMU_OP_CREATE
;

200 
›
 = 
EMU_OP_OPEN
;

204 ()
mode
;

206 
	`lock_acquúe
(
sc
->
e_lock
);

208 
	`°r˝y
(
sc
->
e_iobuf
, 
«me
);

209 
	`memb¨_°‹e_°‹e
();

210 
	`emu_wªg
(
sc
, 
REG_IOLEN
, 
	`°æí
(
«me
));

211 
	`emu_wªg
(
sc
, 
REG_HANDLE
, 
h™dÀ
);

212 
	`emu_wªg
(
sc
, 
REG_OPER
, 
›
);

213 
ªsu…
 = 
	`emu_waôd⁄e
(
sc
);

215 i‡(
ªsu…
==0) {

216 *
√wh™dÀ
 = 
	`emu_ºeg
(
sc
, 
REG_HANDLE
);

217 *
√wisdú
 = 
	`emu_ºeg
(
sc
, 
REG_IOLEN
)>0;

220 
	`lock_ªÀa£
(
sc
->
e_lock
);

221  
ªsu…
;

222 
	}
}

231 
	$emu_˛o£
(
emu_so·c
 *
sc
, 
uöt32_t
 
h™dÀ
)

233 
ªsu…
;

234 
boﬁ
 
möe
;

235 
ªåõs
 = 0;

237 
möe
 = 
	`lock_do_i_hﬁd
(
sc
->
e_lock
);

238 i‡(!
möe
) {

239 
	`lock_acquúe
(
sc
->
e_lock
);

245 
	`emu_wªg
(
sc
, 
REG_HANDLE
, 
h™dÀ
);

246 
	`emu_wªg
(
sc
, 
REG_OPER
, 
EMU_OP_CLOSE
);

247 
ªsu…
 = 
	`emu_waôd⁄e
(
sc
);

249 i‡(
ªsu…
==
EIO
 && 
ªåõs
 < 10) {

250 
	`k¥ötf
("emu%d: I/OÉrror on close,Ñetrying\n",

251 
sc
->
e_unô
);

252 
ªåõs
++;

258 i‡(!
möe
) {

259 
	`lock_ªÀa£
(
sc
->
e_lock
);

261  
ªsu…
;

262 
	}
}

269 
	$emu_d‹ód
(
emu_so·c
 *
sc
, 
uöt32_t
 
h™dÀ
, uöt32_à
Àn
,

270 
uöt32_t
 
›
, 
uio
 *uio)

272 
ªsu…
;

274 
	`KASSERT
(
uio
->
uio_rw
 =
UIO_READ
);

276 i‡(
uio
->
uio_off£t
 > (
off_t
)0xffffffff) {

281 
	`lock_acquúe
(
sc
->
e_lock
);

283 
	`emu_wªg
(
sc
, 
REG_HANDLE
, 
h™dÀ
);

284 
	`emu_wªg
(
sc
, 
REG_IOLEN
, 
Àn
);

285 
	`emu_wªg
(
sc
, 
REG_OFFSET
, 
uio
->
uio_off£t
);

286 
	`emu_wªg
(
sc
, 
REG_OPER
, 
›
);

287 
ªsu…
 = 
	`emu_waôd⁄e
(
sc
);

288 i‡(
ªsu…
) {

289 
out
;

292 
	`memb¨_lﬂd_lﬂd
();

293 
ªsu…
 = 
	`uiomove
(
sc
->
e_iobuf
, 
	`emu_ºeg
(sc, 
REG_IOLEN
), 
uio
);

295 
uio
->
uio_off£t
 = 
	`emu_ºeg
(
sc
, 
REG_OFFSET
);

297 
out
:

298 
	`lock_ªÀa£
(
sc
->
e_lock
);

299  
ªsu…
;

300 
	}
}

307 
	$emu_ªad
(
emu_so·c
 *
sc
, 
uöt32_t
 
h™dÀ
, uöt32_à
Àn
,

308 
uio
 *uio)

310  
	`emu_d‹ód
(
sc
, 
h™dÀ
, 
Àn
, 
EMU_OP_READ
, 
uio
);

311 
	}
}

318 
	$emu_ªaddú
(
emu_so·c
 *
sc
, 
uöt32_t
 
h™dÀ
, uöt32_à
Àn
,

319 
uio
 *uio)

321  
	`emu_d‹ód
(
sc
, 
h™dÀ
, 
Àn
, 
EMU_OP_READDIR
, 
uio
);

322 
	}
}

329 
	$emu_wrôe
(
emu_so·c
 *
sc
, 
uöt32_t
 
h™dÀ
, uöt32_à
Àn
,

330 
uio
 *uio)

332 
ªsu…
;

334 
	`KASSERT
(
uio
->
uio_rw
 =
UIO_WRITE
);

336 i‡(
uio
->
uio_off£t
 > (
off_t
)0xffffffff) {

337  
EFBIG
;

340 
	`lock_acquúe
(
sc
->
e_lock
);

342 
	`emu_wªg
(
sc
, 
REG_HANDLE
, 
h™dÀ
);

343 
	`emu_wªg
(
sc
, 
REG_IOLEN
, 
Àn
);

344 
	`emu_wªg
(
sc
, 
REG_OFFSET
, 
uio
->
uio_off£t
);

346 
ªsu…
 = 
	`uiomove
(
sc
->
e_iobuf
, 
Àn
, 
uio
);

347 
	`memb¨_°‹e_°‹e
();

348 i‡(
ªsu…
) {

349 
out
;

352 
	`emu_wªg
(
sc
, 
REG_OPER
, 
EMU_OP_WRITE
);

353 
ªsu…
 = 
	`emu_waôd⁄e
(
sc
);

355 
out
:

356 
	`lock_ªÀa£
(
sc
->
e_lock
);

357  
ªsu…
;

358 
	}
}

365 
	$emu_gësize
(
emu_so·c
 *
sc
, 
uöt32_t
 
h™dÀ
, 
off_t
 *
ªtvÆ
)

367 
ªsu…
;

369 
	`lock_acquúe
(
sc
->
e_lock
);

371 
	`emu_wªg
(
sc
, 
REG_HANDLE
, 
h™dÀ
);

372 
	`emu_wªg
(
sc
, 
REG_OPER
, 
EMU_OP_GETSIZE
);

373 
ªsu…
 = 
	`emu_waôd⁄e
(
sc
);

374 i‡(
ªsu…
==0) {

375 *
ªtvÆ
 = 
	`emu_ºeg
(
sc
, 
REG_IOLEN
);

378 
	`lock_ªÀa£
(
sc
->
e_lock
);

379  
ªsu…
;

380 
	}
}

387 
	$emu_åunc
(
emu_so·c
 *
sc
, 
uöt32_t
 
h™dÀ
, 
off_t
 
Àn
)

389 
ªsu…
;

391 
	`KASSERT
(
Àn
 >= 0);

393 
	`lock_acquúe
(
sc
->
e_lock
);

395 
	`emu_wªg
(
sc
, 
REG_HANDLE
, 
h™dÀ
);

396 
	`emu_wªg
(
sc
, 
REG_IOLEN
, 
Àn
);

397 
	`emu_wªg
(
sc
, 
REG_OPER
, 
EMU_OP_TRUNC
);

398 
ªsu…
 = 
	`emu_waôd⁄e
(
sc
);

400 
	`lock_ªÀa£
(
sc
->
e_lock
);

401  
ªsu…
;

402 
	}
}

414 
emufs_lﬂdvnode
(
emufs_fs
 *
ef
, 
uöt32_t
 
h™dÀ
, 
isdú
,

415 
emufs_vnode
 **
ªt
);

422 
	$emufs_óch›í
(
vnode
 *
v
, 
›íÊags
)

432 ()
v
;

433 ()
›íÊags
;

436 
	}
}

443 
	$emufs_óch›ídú
(
vnode
 *
v
, 
›íÊags
)

445 
›íÊags
 & 
O_ACCMODE
) {

446 
O_RDONLY
:

448 
O_WRONLY
:

449 
O_RDWR
:

451  
EISDIR
;

453 i‡(
›íÊags
 & 
O_APPEND
) {

454  
EISDIR
;

457 ()
v
;

459 
	}
}

468 
	$emufs_ª˛aim
(
vnode
 *
v
)

470 
emufs_vnode
 *
ev
 = 
v
->
vn_d©a
;

471 
emufs_fs
 *
ef
 = 
v
->
vn_fs
->
fs_d©a
;

472 
ix
, 
i
, 
num
;

473 
ªsu…
;

481 
	`vfs_biglock_acquúe
();

482 
	`lock_acquúe
(
ef
->
ef_emu
->
e_lock
);

483 
	`•ölock_acquúe
(&
ev
->
ev_v
.
vn_cou¡lock
);

485 i‡(
ev
->
ev_v
.
vn_ªfcou¡
 > 1) {

487 
ev
->
ev_v
.
vn_ªfcou¡
--;

489 
	`•ölock_ªÀa£
(&
ev
->
ev_v
.
vn_cou¡lock
);

490 
	`lock_ªÀa£
(
ef
->
ef_emu
->
e_lock
);

491 
	`vfs_biglock_ªÀa£
();

492  
EBUSY
;

494 
	`KASSERT
(
ev
->
ev_v
.
vn_ªfcou¡
 == 1);

500 
	`•ölock_ªÀa£
(&
ev
->
ev_v
.
vn_cou¡lock
);

503 
ªsu…
 = 
	`emu_˛o£
(
ev
->
ev_emu
,Év->
ev_h™dÀ
);

504 i‡(
ªsu…
) {

505 
	`lock_ªÀa£
(
ef
->
ef_emu
->
e_lock
);

506 
	`vfs_biglock_ªÀa£
();

507  
ªsu…
;

510 
num
 = 
	`vnodóºay_num
(
ef
->
ef_vnodes
);

511 
ix
 = 
num
;

512 
i
=0; i<
num
; i++) {

513 
vnode
 *
vx
;

515 
vx
 = 
	`vnodóºay_gë
(
ef
->
ef_vnodes
, 
i
);

516 i‡(
vx
 =
v
) {

517 
ix
 = 
i
;

521 i‡(
ix
 =
num
) {

522 
	`∑nic
("emu%d:Ñeclaim vnode %uÇot in vnodeÖool\n",

523 
ef
->
ef_emu
->
e_unô
, 
ev
->
ev_h™dÀ
);

526 
	`vnodóºay_ªmove
(
ef
->
ef_vnodes
, 
ix
);

527 
	`vnode_˛ónup
(&
ev
->
ev_v
);

529 
	`lock_ªÀa£
(
ef
->
ef_emu
->
e_lock
);

530 
	`vfs_biglock_ªÀa£
();

532 
	`k‰ì
(
ev
);

534 
	}
}

541 
	$emufs_ªad
(
vnode
 *
v
, 
uio
 *uio)

543 
emufs_vnode
 *
ev
 = 
v
->
vn_d©a
;

544 
uöt32_t
 
amt
;

545 
size_t
 
ﬁdªsid
;

546 
ªsu…
;

548 
	`KASSERT
(
uio
->
uio_rw
==
UIO_READ
);

550 
uio
->
uio_ªsid
 > 0) {

551 
amt
 = 
uio
->
uio_ªsid
;

552 i‡(
amt
 > 
EMU_MAXIO
) {

553 
amt
 = 
EMU_MAXIO
;

556 
ﬁdªsid
 = 
uio
->
uio_ªsid
;

558 
ªsu…
 = 
	`emu_ªad
(
ev
->
ev_emu
,Év->
ev_h™dÀ
, 
amt
, 
uio
);

559 i‡(
ªsu…
) {

560  
ªsu…
;

563 i‡(
uio
->
uio_ªsid
 =
ﬁdªsid
) {

570 
	}
}

577 
	$emufs_gëdúíåy
(
vnode
 *
v
, 
uio
 *uio)

579 
emufs_vnode
 *
ev
 = 
v
->
vn_d©a
;

580 
uöt32_t
 
amt
;

582 
	`KASSERT
(
uio
->
uio_rw
==
UIO_READ
);

584 
amt
 = 
uio
->
uio_ªsid
;

585 i‡(
amt
 > 
EMU_MAXIO
) {

586 
amt
 = 
EMU_MAXIO
;

589  
	`emu_ªaddú
(
ev
->
ev_emu
,Év->
ev_h™dÀ
, 
amt
, 
uio
);

590 
	}
}

597 
	$emufs_wrôe
(
vnode
 *
v
, 
uio
 *uio)

599 
emufs_vnode
 *
ev
 = 
v
->
vn_d©a
;

600 
uöt32_t
 
amt
;

601 
size_t
 
ﬁdªsid
;

602 
ªsu…
;

604 
	`KASSERT
(
uio
->
uio_rw
==
UIO_WRITE
);

606 
uio
->
uio_ªsid
 > 0) {

607 
amt
 = 
uio
->
uio_ªsid
;

608 i‡(
amt
 > 
EMU_MAXIO
) {

609 
amt
 = 
EMU_MAXIO
;

612 
ﬁdªsid
 = 
uio
->
uio_ªsid
;

614 
ªsu…
 = 
	`emu_wrôe
(
ev
->
ev_emu
,Év->
ev_h™dÀ
, 
amt
, 
uio
);

615 i‡(
ªsu…
) {

616  
ªsu…
;

619 i‡(
uio
->
uio_ªsid
 =
ﬁdªsid
) {

626 
	}
}

633 
	$emufs_io˘l
(
vnode
 *
v
, 
›
, 
u£Ωå_t
 
d©a
)

639 ()
v
;

640 ()
›
;

641 ()
d©a
;

643  
EINVAL
;

644 
	}
}

651 
	$emufs_°©
(
vnode
 *
v
, 
°©
 *
°©buf
)

653 
emufs_vnode
 *
ev
 = 
v
->
vn_d©a
;

654 
ªsu…
;

656 
	`bzîo
(
°©buf
, (
°©
));

658 
ªsu…
 = 
	`emu_gësize
(
ev
->
ev_emu
,Év->
ev_h™dÀ
, &
°©buf
->
°_size
);

659 i‡(
ªsu…
) {

660  
ªsu…
;

663 
ªsu…
 = 
	`VOP_GETTYPE
(
v
, &
°©buf
->
°_mode
);

664 i‡(
ªsu…
) {

665  
ªsu…
;

667 
°©buf
->
°_mode
 |= 0644;

668 
°©buf
->
°_∆ök
 = 1;

669 
°©buf
->
°_blocks
 = 0;

672 
	}
}

679 
	$emufs_fûe_gëty≥
(
vnode
 *
v
, 
uöt32_t
 *
ªsu…
)

681 ()
v
;

682 *
ªsu…
 = 
S_IFREG
;

684 
	}
}

691 
	$emufs_dú_gëty≥
(
vnode
 *
v
, 
uöt32_t
 *
ªsu…
)

693 ()
v
;

694 *
ªsu…
 = 
S_IFDIR
;

696 
	}
}

702 
boﬁ


703 
	$emufs_is£ekabÀ
(
vnode
 *
v
)

705 ()
v
;

706  
åue
;

707 
	}
}

714 
	$emufs_fsync
(
vnode
 *
v
)

716 ()
v
;

718 
	}
}

725 
	$emufs_åunˇã
(
vnode
 *
v
, 
off_t
 
Àn
)

727 
emufs_vnode
 *
ev
 = 
v
->
vn_d©a
;

728  
	`emu_åunc
(
ev
->
ev_emu
,Év->
ev_h™dÀ
, 
Àn
);

729 
	}
}

736 
	$emufs_¸ót
(
vnode
 *
dú
, c⁄° *
«me
, 
boﬁ
 
ex˛
, 
mode_t
 
mode
,

737 
vnode
 **
ªt
)

739 
emufs_vnode
 *
ev
 = 
dú
->
vn_d©a
;

740 
emufs_fs
 *
ef
 = 
dú
->
vn_fs
->
fs_d©a
;

741 
emufs_vnode
 *
√wguy
;

742 
uöt32_t
 
h™dÀ
;

743 
ªsu…
;

744 
isdú
;

746 
ªsu…
 = 
	`emu_›í
(
ev
->
ev_emu
,Év->
ev_h™dÀ
, 
«me
, 
åue
, 
ex˛
, 
mode
,

747 &
h™dÀ
, &
isdú
);

748 i‡(
ªsu…
) {

749  
ªsu…
;

752 
ªsu…
 = 
	`emufs_lﬂdvnode
(
ef
, 
h™dÀ
, 
isdú
, &
√wguy
);

753 i‡(
ªsu…
) {

754 
	`emu_˛o£
(
ev
->
ev_emu
, 
h™dÀ
);

755  
ªsu…
;

758 *
ªt
 = &
√wguy
->
ev_v
;

760 
	}
}

767 
	$emufs_lookup
(
vnode
 *
dú
, *
∑th«me
, vnodê**
ªt
)

769 
emufs_vnode
 *
ev
 = 
dú
->
vn_d©a
;

770 
emufs_fs
 *
ef
 = 
dú
->
vn_fs
->
fs_d©a
;

771 
emufs_vnode
 *
√wguy
;

772 
uöt32_t
 
h™dÀ
;

773 
ªsu…
;

774 
isdú
;

776 
ªsu…
 = 
	`emu_›í
(
ev
->
ev_emu
,Év->
ev_h™dÀ
, 
∑th«me
, 
Ál£
, false, 0,

777 &
h™dÀ
, &
isdú
);

778 i‡(
ªsu…
) {

779  
ªsu…
;

782 
ªsu…
 = 
	`emufs_lﬂdvnode
(
ef
, 
h™dÀ
, 
isdú
, &
√wguy
);

783 i‡(
ªsu…
) {

784 
	`emu_˛o£
(
ev
->
ev_emu
, 
h™dÀ
);

785  
ªsu…
;

788 *
ªt
 = &
√wguy
->
ev_v
;

790 
	}
}

797 
	$emufs_look∑ª¡
(
vnode
 *
dú
, *
∑th«me
, vnodê**
ªt
,

798 *
buf
, 
size_t
 
Àn
)

800 *
s
;

802 
s
 = 
	`°ºchr
(
∑th«me
, '/');

803 i‡(
s
==
NULL
) {

805 i‡(
	`°æí
(
∑th«me
)+1 > 
Àn
) {

806  
ENAMETOOLONG
;

808 
	`VOP_INCREF
(
dú
);

809 *
ªt
 = 
dú
;

810 
	`°r˝y
(
buf
, 
∑th«me
);

814 *
s
 = 0;

815 
s
++;

816 i‡(
	`°æí
(
s
)+1 > 
Àn
) {

817  
ENAMETOOLONG
;

819 
	`°r˝y
(
buf
, 
s
);

821  
	`emufs_lookup
(
dú
, 
∑th«me
, 
ªt
);

822 
	}
}

829 
	$emufs_«mefûe
(
vnode
 *
v
, 
uio
 *uio)

831 
emufs_vnode
 *
ev
 = 
v
->
vn_d©a
;

832 
emufs_fs
 *
ef
 = 
v
->
vn_fs
->
fs_d©a
;

834 i‡(
ev
 =
ef
->
ef_roŸ
) {

841 ()
uio
;

843  
ENOSYS
;

844 
	}
}

851 
	$emufs_mm≠
(
vnode
 *
v
)

853 ()
v
;

854  
ENOSYS
;

855 
	}
}

865 
	$emufs_symlök
(
vnode
 *
v
, c⁄° *
c⁄ã¡s
, c⁄° *
«me
)

867 ()
v
;

868 ()
c⁄ã¡s
;

869 ()
«me
;

870  
ENOSYS
;

871 
	}
}

875 
	$emufs_mkdú
(
vnode
 *
v
, c⁄° *
«me
, 
mode_t
 
mode
)

877 ()
v
;

878 ()
«me
;

879 ()
mode
;

880  
ENOSYS
;

881 
	}
}

885 
	$emufs_lök
(
vnode
 *
v
, c⁄° *
«me
, vnodê*
èrgë
)

887 ()
v
;

888 ()
«me
;

889 ()
èrgë
;

890  
ENOSYS
;

891 
	}
}

895 
	$emufs_ªmove
(
vnode
 *
v
, c⁄° *
«me
)

897 ()
v
;

898 ()
«me
;

899  
ENOSYS
;

900 
	}
}

904 
	$emufs_rmdú
(
vnode
 *
v
, c⁄° *
«me
)

906 ()
v
;

907 ()
«me
;

908  
ENOSYS
;

909 
	}
}

913 
	$emufs_ª«me
(
vnode
 *
v1
, c⁄° *
n1
,

914 
vnode
 *
v2
, c⁄° *
n2
)

916 ()
v1
;

917 ()
n1
;

918 ()
v2
;

919 ()
n2
;

920  
ENOSYS
;

921 
	}
}

940 
	$emufs_void_›_isdú
(
vnode
 *
v
)

942 ()
v
;

943  
EISDIR
;

944 
	}
}

948 
	$emufs_uio_›_isdú
(
vnode
 *
v
, 
uio
 *uio)

950 ()
v
;

951 ()
uio
;

952  
EISDIR
;

953 
	}
}

957 
	$emufs_uio_›_nŸdú
(
vnode
 *
v
, 
uio
 *uio)

959 ()
v
;

960 ()
uio
;

961  
ENOTDIR
;

962 
	}
}

966 
	$emufs_«me_›_nŸdú
(
vnode
 *
v
, c⁄° *
«me
)

968 ()
v
;

969 ()
«me
;

970  
ENOTDIR
;

971 
	}
}

975 
	$emufs_ªadlök_nŸlök
(
vnode
 *
v
, 
uio
 *uio)

977 ()
v
;

978 ()
uio
;

979  
EINVAL
;

980 
	}
}

984 
	$emufs_¸ót_nŸdú
(
vnode
 *
v
, c⁄° *
«me
, 
boﬁ
 
ex˛
, 
mode_t
 
mode
,

985 
vnode
 **
ªtvÆ
)

987 ()
v
;

988 ()
«me
;

989 ()
ex˛
;

990 ()
mode
;

991 ()
ªtvÆ
;

992  
ENOTDIR
;

993 
	}
}

997 
	$emufs_symlök_nŸdú
(
vnode
 *
v
, c⁄° *
c⁄ã¡s
, c⁄° *
«me
)

999 ()
v
;

1000 ()
c⁄ã¡s
;

1001 ()
«me
;

1002  
ENOTDIR
;

1003 
	}
}

1007 
	$emufs_mkdú_nŸdú
(
vnode
 *
v
, c⁄° *
«me
, 
mode_t
 
mode
)

1009 ()
v
;

1010 ()
«me
;

1011 ()
mode
;

1012  
ENOTDIR
;

1013 
	}
}

1017 
	$emufs_lök_nŸdú
(
vnode
 *
v
, c⁄° *
«me
, vnodê*
èrgë
)

1019 ()
v
;

1020 ()
«me
;

1021 ()
èrgë
;

1022  
ENOTDIR
;

1023 
	}
}

1027 
	$emufs_ª«me_nŸdú
(
vnode
 *
v1
, c⁄° *
n1
,

1028 
vnode
 *
v2
, c⁄° *
n2
)

1030 ()
v1
;

1031 ()
n1
;

1032 ()
v2
;

1033 ()
n2
;

1034  
ENOTDIR
;

1035 
	}
}

1039 
	$emufs_lookup_nŸdú
(
vnode
 *
v
, *
∑th«me
, vnodê**
ªsu…
)

1041 ()
v
;

1042 ()
∑th«me
;

1043 ()
ªsu…
;

1044  
ENOTDIR
;

1045 
	}
}

1049 
	$emufs_look∑ª¡_nŸdú
(
vnode
 *
v
, *
∑th«me
, vnodê**
ªsu…
,

1050 *
buf
, 
size_t
 
Àn
)

1052 ()
v
;

1053 ()
∑th«me
;

1054 ()
ªsu…
;

1055 ()
buf
;

1056 ()
Àn
;

1057  
ENOTDIR
;

1058 
	}
}

1063 
	$emufs_åunˇã_isdú
(
vnode
 *
v
, 
off_t
 
Àn
)

1065 ()
v
;

1066 ()
Àn
;

1067  
ENOTDIR
;

1068 
	}
}

1075 c⁄° 
vnode_›s
 
	gemufs_fûe›s
 = {

1076 .
v›_magic
 = 
VOP_MAGIC
,

1078 .
	gv›_óch›í
 = 
emufs_óch›í
,

1079 .
	gv›_ª˛aim
 = 
emufs_ª˛aim
,

1081 .
	gv›_ªad
 = 
emufs_ªad
,

1082 .
	gv›_ªadlök
 = 
emufs_ªadlök_nŸlök
,

1083 .
	gv›_gëdúíåy
 = 
emufs_uio_›_nŸdú
,

1084 .
	gv›_wrôe
 = 
emufs_wrôe
,

1085 .
	gv›_io˘l
 = 
emufs_io˘l
,

1086 .
	gv›_°©
 = 
emufs_°©
,

1087 .
	gv›_gëty≥
 = 
emufs_fûe_gëty≥
,

1088 .
	gv›_is£ekabÀ
 = 
emufs_is£ekabÀ
,

1089 .
	gv›_fsync
 = 
emufs_fsync
,

1090 .
	gv›_mm≠
 = 
emufs_mm≠
,

1091 .
	gv›_åunˇã
 = 
emufs_åunˇã
,

1092 .
	gv›_«mefûe
 = 
emufs_uio_›_nŸdú
,

1094 .
	gv›_¸ót
 = 
emufs_¸ót_nŸdú
,

1095 .
	gv›_symlök
 = 
emufs_symlök_nŸdú
,

1096 .
	gv›_mkdú
 = 
emufs_mkdú_nŸdú
,

1097 .
	gv›_lök
 = 
emufs_lök_nŸdú
,

1098 .
	gv›_ªmove
 = 
emufs_«me_›_nŸdú
,

1099 .
	gv›_rmdú
 = 
emufs_«me_›_nŸdú
,

1100 .
	gv›_ª«me
 = 
emufs_ª«me_nŸdú
,

1102 .
	gv›_lookup
 = 
emufs_lookup_nŸdú
,

1103 .
	gv›_look∑ª¡
 = 
emufs_look∑ª¡_nŸdú
,

1109 c⁄° 
vnode_›s
 
	gemufs_dú›s
 = {

1110 .
v›_magic
 = 
VOP_MAGIC
,

1112 .
	gv›_óch›í
 = 
emufs_óch›ídú
,

1113 .
	gv›_ª˛aim
 = 
emufs_ª˛aim
,

1115 .
	gv›_ªad
 = 
emufs_uio_›_isdú
,

1116 .
	gv›_ªadlök
 = 
emufs_uio_›_isdú
,

1117 .
	gv›_gëdúíåy
 = 
emufs_gëdúíåy
,

1118 .
	gv›_wrôe
 = 
emufs_uio_›_isdú
,

1119 .
	gv›_io˘l
 = 
emufs_io˘l
,

1120 .
	gv›_°©
 = 
emufs_°©
,

1121 .
	gv›_gëty≥
 = 
emufs_dú_gëty≥
,

1122 .
	gv›_is£ekabÀ
 = 
emufs_is£ekabÀ
,

1123 .
	gv›_fsync
 = 
emufs_void_›_isdú
,

1124 .
	gv›_mm≠
 = 
emufs_void_›_isdú
,

1125 .
	gv›_åunˇã
 = 
emufs_åunˇã_isdú
,

1126 .
	gv›_«mefûe
 = 
emufs_«mefûe
,

1128 .
	gv›_¸ót
 = 
emufs_¸ót
,

1129 .
	gv›_symlök
 = 
emufs_symlök
,

1130 .
	gv›_mkdú
 = 
emufs_mkdú
,

1131 .
	gv›_lök
 = 
emufs_lök
,

1132 .
	gv›_ªmove
 = 
emufs_ªmove
,

1133 .
	gv›_rmdú
 = 
emufs_rmdú
,

1134 .
	gv›_ª«me
 = 
emufs_ª«me
,

1136 .
	gv›_lookup
 = 
emufs_lookup
,

1137 .
	gv›_look∑ª¡
 = 
emufs_look∑ª¡
,

1145 
	$emufs_lﬂdvnode
(
emufs_fs
 *
ef
, 
uöt32_t
 
h™dÀ
, 
isdú
,

1146 
emufs_vnode
 **
ªt
)

1148 
vnode
 *
v
;

1149 
emufs_vnode
 *
ev
;

1150 
i
, 
num
;

1151 
ªsu…
;

1153 
	`vfs_biglock_acquúe
();

1154 
	`lock_acquúe
(
ef
->
ef_emu
->
e_lock
);

1156 
num
 = 
	`vnodóºay_num
(
ef
->
ef_vnodes
);

1157 
i
=0; i<
num
; i++) {

1158 
v
 = 
	`vnodóºay_gë
(
ef
->
ef_vnodes
, 
i
);

1159 
ev
 = 
v
->
vn_d©a
;

1160 i‡(
ev
->
ev_h™dÀ
 =
h™dÀ
) {

1163 
	`VOP_INCREF
(&
ev
->
ev_v
);

1165 
	`lock_ªÀa£
(
ef
->
ef_emu
->
e_lock
);

1166 
	`vfs_biglock_ªÀa£
();

1167 *
ªt
 = 
ev
;

1174 
ev
 = 
	`kmÆloc
((
emufs_vnode
));

1175 i‡(
ev
==
NULL
) {

1176 
	`lock_ªÀa£
(
ef
->
ef_emu
->
e_lock
);

1177  
ENOMEM
;

1180 
ev
->
ev_emu
 = 
ef
->
ef_emu
;

1181 
ev
->
ev_h™dÀ
 = 
h™dÀ
;

1183 
ªsu…
 = 
	`vnode_öô
(&
ev
->
ev_v
, 
isdú
 ? &
emufs_dú›s
 : &
emufs_fûe›s
,

1184 &
ef
->
ef_fs
, 
ev
);

1185 i‡(
ªsu…
) {

1186 
	`lock_ªÀa£
(
ef
->
ef_emu
->
e_lock
);

1187 
	`vfs_biglock_ªÀa£
();

1188 
	`k‰ì
(
ev
);

1189  
ªsu…
;

1192 
ªsu…
 = 
	`vnodóºay_add
(
ef
->
ef_vnodes
, &
ev
->
ev_v
, 
NULL
);

1193 i‡(
ªsu…
) {

1195 
	`vnode_˛ónup
(&
ev
->
ev_v
);

1196 
	`lock_ªÀa£
(
ef
->
ef_emu
->
e_lock
);

1197 
	`vfs_biglock_ªÀa£
();

1198 
	`k‰ì
(
ev
);

1199  
ªsu…
;

1202 
	`lock_ªÀa£
(
ef
->
ef_emu
->
e_lock
);

1203 
	`vfs_biglock_ªÀa£
();

1205 *
ªt
 = 
ev
;

1207 
	}
}

1222 
	$emufs_sync
(
fs
 *fs)

1224 ()
fs
;

1226 
	}
}

1233 
	$emufs_gëvﬁ«me
(
fs
 *fs)

1236 ()
fs
;

1237  
NULL
;

1238 
	}
}

1244 
vnode
 *

1245 
	$emufs_gëroŸ
(
fs
 *fs)

1247 
emufs_fs
 *
ef
;

1249 
	`KASSERT
(
fs
 !
NULL
);

1251 
ef
 = 
fs
->
fs_d©a
;

1253 
	`KASSERT
(
ef
 !
NULL
);

1254 
	`KASSERT
(
ef
->
ef_roŸ
 !
NULL
);

1256 
	`VOP_INCREF
(&
ef
->
ef_roŸ
->
ev_v
);

1257  &
ef
->
ef_roŸ
->
ev_v
;

1258 
	}
}

1265 
	$emufs_unmou¡
(
fs
 *fs)

1268 ()
fs
;

1269  
EBUSY
;

1270 
	}
}

1275 c⁄° 
fs_›s
 
	gemufs_fs›s
 = {

1276 .
fs›_sync
 = 
emufs_sync
,

1277 .
	gfs›_gëvﬁ«me
 = 
emufs_gëvﬁ«me
,

1278 .
	gfs›_gëroŸ
 = 
emufs_gëroŸ
,

1279 .
	gfs›_unmou¡
 = 
emufs_unmou¡
,

1291 
	$emufs_addtovfs
(
emu_so·c
 *
sc
, c⁄° *
dev«me
)

1293 
emufs_fs
 *
ef
;

1294 
ªsu…
;

1296 
ef
 = 
	`kmÆloc
((
emufs_fs
));

1297 i‡(
ef
==
NULL
) {

1298  
ENOMEM
;

1301 
ef
->
ef_fs
.
fs_d©a
 =Éf;

1302 
ef
->
ef_fs
.
fs_›s
 = &
emufs_fs›s
;

1304 
ef
->
ef_emu
 = 
sc
;

1305 
ef
->
ef_roŸ
 = 
NULL
;

1306 
ef
->
ef_vnodes
 = 
	`vnodóºay_¸óã
();

1307 i‡(
ef
->
ef_vnodes
 =
NULL
) {

1308 
	`k‰ì
(
ef
);

1309  
ENOMEM
;

1312 
ªsu…
 = 
	`emufs_lﬂdvnode
(
ef
, 
EMU_ROOTHANDLE
, 1, &ef->
ef_roŸ
);

1313 i‡(
ªsu…
) {

1314 
	`k‰ì
(
ef
);

1315  
ªsu…
;

1318 
	`KASSERT
(
ef
->
ef_roŸ
!=
NULL
);

1320 
ªsu…
 = 
	`vfs_addfs
(
dev«me
, &
ef
->
ef_fs
);

1321 i‡(
ªsu…
) {

1322 
	`VOP_DECREF
(&
ef
->
ef_roŸ
->
ev_v
);

1323 
	`k‰ì
(
ef
);

1325  
ªsu…
;

1326 
	}
}

1337 
	$c⁄fig_emu
(
emu_so·c
 *
sc
, 
emuno
)

1339 
«me
[32];

1341 
sc
->
e_lock
 = 
	`lock_¸óã
("emufs-lock");

1342 i‡(
sc
->
e_lock
 =
NULL
) {

1343  
ENOMEM
;

1345 
sc
->
e_£m
 = 
	`£m_¸óã
("emufs-sem", 0);

1346 i‡(
sc
->
e_£m
 =
NULL
) {

1347 
	`lock_de°roy
(
sc
->
e_lock
);

1348 
sc
->
e_lock
 = 
NULL
;

1349  
ENOMEM
;

1351 
sc
->
e_iobuf
 = 
	`bus_m≠_¨ó
(sc->
e_busd©a
, sc->
e_bu•os
, 
EMU_BUFFER
);

1353 
	`¢¥ötf
(
«me
, “ame), "emu%d", 
emuno
);

1355  
	`emufs_addtovfs
(
sc
, 
«me
);

1356 
	}
}

	@dev/lamebus/emu.h

30 #i‚de‡
_LAMEBUS_EMU_H_


31 
	#_LAMEBUS_EMU_H_


	)

34 
	#EMU_MAXIO
 16384

	)

35 
	#EMU_ROOTHANDLE
 0

	)

43 
	semu_so·c
 {

45 *
	me_busd©a
;

46 
uöt32_t
 
	me_bu•os
;

47 
	me_unô
;

50 
lock
 *
	me_lock
;

51 
£m≠h‹e
 *
	me_£m
;

52 *
	me_iobuf
;

55 
uöt32_t
 
	me_ªsu…
;

59 
emu_úq
( *);

	@dev/lamebus/emu_att.c

34 
	~<ty≥s.h
>

35 
	~<lib.h
>

36 
	~<œmebus/œmebus.h
>

37 
	~<œmebus/emu.h
>

38 
	~"autoc⁄f.h
"

41 
	#LOW_VERSION
 1

	)

43 
emu_so·c
 *

44 
	$©èch_emu_to_œmebus
(
emuno
, 
œmebus_so·c
 *
sc
)

46 
emu_so·c
 *
es
;

47 
¶Ÿ
 = 
	`œmebus_¥obe
(
sc
, 
LB_VENDOR_CS161
, 
LBCS161_EMUFS
,

48 
LOW_VERSION
, 
NULL
);

49 i‡(
¶Ÿ
 < 0) {

50  
NULL
;

53 
es
 = 
	`kmÆloc
((
emu_so·c
));

54 i‡(
es
==
NULL
) {

55  
NULL
;

58 
es
->
e_busd©a
 = 
sc
;

59 
es
->
e_bu•os
 = 
¶Ÿ
;

60 
es
->
e_unô
 = 
emuno
;

62 
	`œmebus_m¨k
(
sc
, 
¶Ÿ
);

63 
	`œmebus_©èch_öãºu±
(
sc
, 
¶Ÿ
, 
es
, 
emu_úq
);

65  
es
;

66 
	}
}

	@dev/lamebus/lamebus.c

34 
	~<ty≥s.h
>

35 
	~<lib.h
>

36 
	~<˝u.h
>

37 
	~<memb¨.h
>

38 
	~<•ölock.h
>

39 
	~<cuºít.h
>

40 
	~<œmebus/œmebus.h
>

43 
	#CFGREG_VID
 0

	)

44 
	#CFGREG_DID
 4

	)

45 
	#CFGREG_DRL
 8

	)

48 
	#CTLREG_RAMSZ
 0x200

	)

49 
	#CTLREG_IRQS
 0x204

	)

50 
	#CTLREG_PWR
 0x208

	)

51 
	#CTLREG_IRQE
 0x20c

	)

52 
	#CTLREG_CPUS
 0x210

	)

53 
	#CTLREG_CPUE
 0x214

	)

54 
	#CTLREG_SELF
 0x218

	)

57 
	#CTLCPU_CIRQE
 0x000

	)

58 
	#CTLCPU_CIPI
 0x004

	)

59 
	#CTLCPU_CRAM
 0x300

	)

66 
ölöe


67 
uöt32_t


68 
	$ªad_cfg_ªgi°î
(
œmebus_so·c
 *
lb
, 
¶Ÿ
, 
uöt32_t
 
off£t
)

71 
off£t
 +
LB_CONFIG_SIZE
*
¶Ÿ
;

72  
	`œmebus_ªad_ªgi°î
(
lb
, 
LB_CONTROLLER_SLOT
, 
off£t
);

73 
	}
}

79 
ölöe


81 
	$wrôe_cfg_ªgi°î
(
œmebus_so·c
 *
lb
, 
¶Ÿ
, 
uöt32_t
 
off£t
,

82 
uöt32_t
 
vÆ
)

84 
off£t
 +
LB_CONFIG_SIZE
*
¶Ÿ
;

85 
	`œmebus_wrôe_ªgi°î
(
lb
, 
LB_CONTROLLER_SLOT
, 
off£t
, 
vÆ
);

86 
	}
}

92 
ölöe


93 
uöt32_t


94 
	$ªad_˘l_ªgi°î
(
œmebus_so·c
 *
lb
, 
uöt32_t
 
off£t
)

97  
	`ªad_cfg_ªgi°î
(
lb
, 
LB_CONTROLLER_SLOT
, 
off£t
);

98 
	}
}

104 
ölöe


106 
	$wrôe_˘l_ªgi°î
(
œmebus_so·c
 *
lb
, 
uöt32_t
 
off£t
, uöt32_à
vÆ
)

108 
	`wrôe_cfg_ªgi°î
(
lb
, 
LB_CONTROLLER_SLOT
, 
off£t
, 
vÆ
);

109 
	}
}

115 
ölöe


117 
	$wrôe_˘l˝u_ªgi°î
(
œmebus_so·c
 *
lb
, 
hw_˝unum
,

118 
uöt32_t
 
off£t
, uöt32_à
vÆ
)

120 
off£t
 +
LB_CTLCPU_OFFSET
 + 
hw_˝unum
 * 
LB_CTLCPU_SIZE
;

121 
	`œmebus_wrôe_ªgi°î
(
lb
, 
LB_CONTROLLER_SLOT
, 
off£t
, 
vÆ
);

122 
	}
}

128 
	$œmebus_föd_˝us
(
œmebus_so·c
 *
œmebus
)

130 
uöt32_t
 
maöbﬂrd_vid
, 
maöbﬂrd_did
;

131 
uöt32_t
 
˝umask
, 
£lf
, 
bô
, 
vÆ
;

132 
i
, 
num˝us
, 
boŸ˝u
;

133 
hwnum
[32];

135 
maöbﬂrd_vid
 = 
	`ªad_cfg_ªgi°î
(
œmebus
, 
LB_CONTROLLER_SLOT
,

136 
CFGREG_VID
);

137 
maöbﬂrd_did
 = 
	`ªad_cfg_ªgi°î
(
œmebus
, 
LB_CONTROLLER_SLOT
,

138 
CFGREG_DID
);

139 i‡(
maöbﬂrd_vid
 =
LB_VENDOR_CS161
 &&

140 
maöbﬂrd_did
 =
LBCS161_UPBUSCTL
) {

142 
œmebus
->
ls_unùro˚ss‹
 = 1;

146 
˝umask
 = 
	`ªad_˘l_ªgi°î
(
œmebus
, 
CTLREG_CPUS
);

147 
£lf
 = 
	`ªad_˘l_ªgi°î
(
œmebus
, 
CTLREG_SELF
);

149 
num˝us
 = 0;

150 
boŸ˝u
 = 0;

151 
i
=0; i<32; i++) {

152 
bô
 = (
uöt32_t
)1 << 
i
;

153 i‡((
˝umask
 & 
bô
) != 0) {

154 i‡(
£lf
 & 
bô
) {

155 
boŸ˝u
 = 
num˝us
;

156 
cur˝u
->
c_h¨dw¨e_numbî
 = 
i
;

158 
hwnum
[
num˝us
] = 
i
;

159 
num˝us
++;

163 
i
=0; i<
num˝us
; i++) {

164 i‡(
i
 !
boŸ˝u
) {

165 
	`˝u_¸óã
(
hwnum
[
i
]);

175 
i
=0; i<
num˝us
; i++) {

176 i‡(
i
 !
boŸ˝u
) {

177 
vÆ
 = 0;

180 
vÆ
 = 0xffffffff;

182 
	`wrôe_˘l˝u_ªgi°î
(
œmebus
, 
hwnum
[
i
], 
CTLCPU_CIRQE
, 
vÆ
);

184 
	}
}

197 
	$œmebus_°¨t_˝us
(
œmebus_so·c
 *
œmebus
)

199 
uöt32_t
 
˝umask
, 
£lf
, 
bô
;

200 
uöt32_t
 
˘l˝uoff£t
;

201 
uöt32_t
 *
¸am
;

202 
i
;

203 
˝unum
;

205 i‡(
œmebus
->
ls_unùro˚ss‹
) {

209 
˝umask
 = 
	`ªad_˘l_ªgi°î
(
œmebus
, 
CTLREG_CPUS
);

210 
£lf
 = 
	`ªad_˘l_ªgi°î
(
œmebus
, 
CTLREG_SELF
);

213 
˝unum
 = 1;

214 
i
=0; i<32; i++) {

215 
bô
 = (
uöt32_t
)1 << 
i
;

216 i‡((
˝umask
 & 
bô
) != 0) {

217 i‡(
£lf
 & 
bô
) {

220 
˘l˝uoff£t
 = 
LB_CTLCPU_OFFSET
 + 
i
 * 
LB_CTLCPU_SIZE
;

221 
¸am
 = 
	`œmebus_m≠_¨ó
(
œmebus
,

222 
LB_CONTROLLER_SLOT
,

223 
˘l˝uoff£t
 + 
CTLCPU_CRAM
);

224 
¸am
[0] = (
uöt32_t
)
˝u_°¨t_£c⁄d¨y
;

225 
¸am
[1] = 
˝unum
++;

229 
	`memb¨_°‹e_°‹e
();

232 
	`wrôe_˘l_ªgi°î
(
œmebus
, 
CTLREG_CPUE
, 
˝umask
);

233 
	}
}

251 
	$œmebus_¥obe
(
œmebus_so·c
 *
sc
,

252 
uöt32_t
 
víd‹id
, uöt32_à
devi˚id
,

253 
uöt32_t
 
lowvî
, uöt32_à*
vîsi⁄_ªt
)

255 
¶Ÿ
;

256 
uöt32_t
 
vÆ
;

263 
	`•ölock_acquúe
(&
sc
->
ls_lock
);

265 
¶Ÿ
=0; slŸ<
LB_NSLOTS
; slot++) {

266 i‡(
sc
->
ls_¶Ÿsöu£
 & (1<<
¶Ÿ
)) {

271 
vÆ
 = 
	`ªad_cfg_ªgi°î
(
sc
, 
¶Ÿ
, 
CFGREG_VID
);

272 i‡(
vÆ
!=
víd‹id
) {

277 
vÆ
 = 
	`ªad_cfg_ªgi°î
(
sc
, 
¶Ÿ
, 
CFGREG_DID
);

278 i‡(
vÆ
 !
devi˚id
) {

283 
vÆ
 = 
	`ªad_cfg_ªgi°î
(
sc
, 
¶Ÿ
, 
CFGREG_DRL
);

284 i‡(
vÆ
 < 
lowvî
) {

288 i‡(
vîsi⁄_ªt
 !
NULL
) {

289 *
vîsi⁄_ªt
 = 
vÆ
;

294 
	`•ölock_ªÀa£
(&
sc
->
ls_lock
);

295  
¶Ÿ
;

300 
	`•ölock_ªÀa£
(&
sc
->
ls_lock
);

302 
	}
}

310 
	$œmebus_m¨k
(
œmebus_so·c
 *
sc
, 
¶Ÿ
)

312 
uöt32_t
 
mask
 = ((uöt32_t)1Ë<< 
¶Ÿ
;

313 
	`KASSERT
(
¶Ÿ
>=0 && slŸ < 
LB_NSLOTS
);

315 
	`•ölock_acquúe
(&
sc
->
ls_lock
);

317 i‡((
sc
->
ls_¶Ÿsöu£
 & 
mask
)!=0) {

318 
	`∑nic
("œmebus_m¨k: slŸ %dáÃódy i¿u£\n", 
¶Ÿ
);

321 
sc
->
ls_¶Ÿsöu£
 |
mask
;

323 
	`•ölock_ªÀa£
(&
sc
->
ls_lock
);

324 
	}
}

330 
	$œmebus_unm¨k
(
œmebus_so·c
 *
sc
, 
¶Ÿ
)

332 
uöt32_t
 
mask
 = ((uöt32_t)1Ë<< 
¶Ÿ
;

333 
	`KASSERT
(
¶Ÿ
>=0 && slŸ < 
LB_NSLOTS
);

335 
	`•ölock_acquúe
(&
sc
->
ls_lock
);

337 i‡((
sc
->
ls_¶Ÿsöu£
 & 
mask
)==0) {

338 
	`∑nic
("œmebus_m¨k: slŸ %dÇŸ m¨ked i¿u£\n", 
¶Ÿ
);

341 
sc
->
ls_¶Ÿsöu£
 &~
mask
;

343 
	`•ölock_ªÀa£
(&
sc
->
ls_lock
);

344 
	}
}

351 
œmebus_©èch_öãºu±
(
œmebus_so·c
 *
sc
, 
¶Ÿ
,

352 *
devd©a
,

353 (*
úqfunc
)(*
devd©a
))

355 
uöt32_t
 
mask
 = ((uöt32_t)1Ë<< 
¶Ÿ
;

356 
	`KASSERT
(
¶Ÿ
>=0 && slŸ < 
LB_NSLOTS
);

358 
	`•ölock_acquúe
(&
sc
->
ls_lock
);

360 i‡((
sc
->
ls_¶Ÿsöu£
 & 
mask
)==0) {

361 
	`∑nic
("lamebus_attach_interrupt: slot %dÇot marked in use\n",

362 
¶Ÿ
);

365 
	`KASSERT
(
sc
->
ls_devd©a
[
¶Ÿ
]==
NULL
);

366 
	`KASSERT
(
sc
->
ls_úqfuncs
[
¶Ÿ
]==
NULL
);

368 
sc
->
ls_devd©a
[
¶Ÿ
] = 
devd©a
;

369 
sc
->
ls_úqfuncs
[
¶Ÿ
] = 
úqfunc
;

371 
	`•ölock_ªÀa£
(&
sc
->
ls_lock
);

372 
	}
}

379 
	$œmebus_dëach_öãºu±
(
œmebus_so·c
 *
sc
, 
¶Ÿ
)

381 
uöt32_t
 
mask
 = ((uöt32_t)1Ë<< 
¶Ÿ
;

382 
	`KASSERT
(
¶Ÿ
>=0 && slŸ < 
LB_NSLOTS
);

384 
	`•ölock_acquúe
(&
sc
->
ls_lock
);

386 i‡((
sc
->
ls_¶Ÿsöu£
 & 
mask
)==0) {

387 
	`∑nic
("lamebus_detach_interrupt: slot %dÇot marked in use\n",

388 
¶Ÿ
);

391 
	`KASSERT
(
sc
->
ls_úqfuncs
[
¶Ÿ
]!=
NULL
);

393 
sc
->
ls_devd©a
[
¶Ÿ
] = 
NULL
;

394 
sc
->
ls_úqfuncs
[
¶Ÿ
] = 
NULL
;

396 
	`•ölock_ªÀa£
(&
sc
->
ls_lock
);

397 
	}
}

403 
	$œmebus_mask_öãºu±
(
œmebus_so·c
 *
œmebus
, 
¶Ÿ
)

405 
uöt32_t
 
bôs
, 
mask
 = ((uöt32_t)1Ë<< 
¶Ÿ
;

406 
	`KASSERT
(
¶Ÿ
 >0 && slŸ < 
LB_NSLOTS
);

408 
	`•ölock_acquúe
(&
œmebus
->
ls_lock
);

409 
bôs
 = 
	`ªad_˘l_ªgi°î
(
œmebus
, 
CTLREG_IRQE
);

410 
bôs
 &~
mask
;

411 
	`wrôe_˘l_ªgi°î
(
œmebus
, 
CTLREG_IRQE
, 
bôs
);

412 
	`•ölock_ªÀa£
(&
œmebus
->
ls_lock
);

413 
	}
}

416 
	$œmebus_unmask_öãºu±
(
œmebus_so·c
 *
œmebus
, 
¶Ÿ
)

418 
uöt32_t
 
bôs
, 
mask
 = ((uöt32_t)1Ë<< 
¶Ÿ
;

419 
	`KASSERT
(
¶Ÿ
 >0 && slŸ < 
LB_NSLOTS
);

421 
	`•ölock_acquúe
(&
œmebus
->
ls_lock
);

422 
bôs
 = 
	`ªad_˘l_ªgi°î
(
œmebus
, 
CTLREG_IRQE
);

423 
bôs
 |
mask
;

424 
	`wrôe_˘l_ªgi°î
(
œmebus
, 
CTLREG_IRQE
, 
bôs
);

425 
	`•ölock_ªÀa£
(&
œmebus
->
ls_lock
);

426 
	}
}

433 
	$œmebus_öãºu±
(
œmebus_so·c
 *
œmebus
)

446 
¶Ÿ
;

447 
uöt32_t
 
mask
;

448 
uöt32_t
 
úqs
;

449 (*
h™dÀr
)(*);

450 *
d©a
;

453 
duds
 = 0;

454 
duds_this_time
 = 0;

457 
	`KASSERT
(
œmebus
 !
NULL
);

460 
	`•ölock_acquúe
(&
œmebus
->
ls_lock
);

466 
úqs
 = 
	`ªad_˘l_ªgi°î
(
œmebus
, 
CTLREG_IRQS
);

468 i‡(
úqs
 == 0) {

472 
	`k¥ötf
("lamebus: stray interrupt on cpu %u\n",

473 
cur˝u
->
c_numbî
);

474 
duds
++;

475 
duds_this_time
++;

495 
mask
=1, 
¶Ÿ
=0; slŸ<
LB_NSLOTS
; mask<<=1, slot++) {

496 i‡((
úqs
 & 
mask
) == 0) {

505 i‡((
œmebus
->
ls_¶Ÿsöu£
 & 
mask
)==0) {

509 
duds
++;

510 
duds_this_time
++;

514 i‡(
œmebus
->
ls_úqfuncs
[
¶Ÿ
]==
NULL
) {

519 
duds
++;

520 
duds_this_time
++;

529 
h™dÀr
 = 
œmebus
->
ls_úqfuncs
[
¶Ÿ
];

530 
d©a
 = 
œmebus
->
ls_devd©a
[
¶Ÿ
];

531 
	`•ölock_ªÀa£
(&
œmebus
->
ls_lock
);

533 
	`h™dÀr
(
d©a
);

535 
	`•ölock_acquúe
(&
œmebus
->
ls_lock
);

543 
úqs
 = 
	`ªad_˘l_ªgi°î
(
œmebus
, 
CTLREG_IRQS
);

565 i‡(
duds_this_time
 =0 && 
duds
 > 0) {

566 
	`k¥ötf
("œmebus: %d dud i¡îru±s\n", 
duds
);

567 
duds
 = 0;

570 i‡(
duds
 > 10000) {

571 
	`∑nic
("œmebus:Åoÿm™y (%dËdud i¡îru±s\n", 
duds
);

575 
	`•ölock_ªÀa£
(&
œmebus
->
ls_lock
);

576 
	}
}

582 
	$œmebus_powîoff
(
œmebus_so·c
 *
œmebus
)

588 
	`˝u_úqoff
();

589 
	`wrôe_˘l_ªgi°î
(
œmebus
, 
CTLREG_PWR
, 0);

592 
	`˝u_hÆt
();

593 
	}
}

598 
uöt32_t


599 
	$œmebus_ømsize
()

608  
	`ªad_˘l_ªgi°î
(
NULL
, 
CTLREG_RAMSZ
);

609 
	}
}

615 
	$œmebus_as£π_ùi
(
œmebus_so·c
 *
œmebus
, 
˝u
 *
èrgë
)

617 i‡(
œmebus
->
ls_unùro˚ss‹
) {

620 
	`wrôe_˘l˝u_ªgi°î
(
œmebus
, 
èrgë
->
c_h¨dw¨e_numbî
,

621 
CTLCPU_CIPI
, 1);

622 
	}
}

625 
	$œmebus_˛ór_ùi
(
œmebus_so·c
 *
œmebus
, 
˝u
 *
èrgë
)

627 i‡(
œmebus
->
ls_unùro˚ss‹
) {

630 
	`wrôe_˘l˝u_ªgi°î
(
œmebus
, 
èrgë
->
c_h¨dw¨e_numbî
,

631 
CTLCPU_CIPI
, 0);

632 
	}
}

638 
œmebus_so·c
 *

639 
	$œmebus_öô
()

641 
œmebus_so·c
 *
œmebus
;

642 
i
;

645 
œmebus
 = 
	`kmÆloc
((
œmebus_so·c
));

646 i‡(
œmebus
==
NULL
) {

647 
	`∑nic
("lamebus_init: Out of memory\n");

650 
	`•ölock_öô
(&
œmebus
->
ls_lock
);

655 
œmebus
->
ls_¶Ÿsöu£
 = 1 << 
LB_CONTROLLER_SLOT
;

657 
i
=0; i<
LB_NSLOTS
; i++) {

658 
œmebus
->
ls_devd©a
[
i
] = 
NULL
;

659 
œmebus
->
ls_úqfuncs
[
i
] = 
NULL
;

662 
œmebus
->
ls_unùro˚ss‹
 = 0;

664  
œmebus
;

665 
	}
}

	@dev/lamebus/lamebus.h

30 #i‚de‡
_LAMEBUS_H_


31 
	#_LAMEBUS_H_


	)

33 
	~<˝u.h
>

34 
	~<•ölock.h
>

44 
	#LB_VENDOR_CS161
 1

	)

47 
	#LBCS161_UPBUSCTL
 1

	)

48 
	#LBCS161_TIMER
 2

	)

49 
	#LBCS161_DISK
 3

	)

50 
	#LBCS161_SERIAL
 4

	)

51 
	#LBCS161_SCREEN
 5

	)

52 
	#LBCS161_NET
 6

	)

53 
	#LBCS161_EMUFS
 7

	)

54 
	#LBCS161_TRACE
 8

	)

55 
	#LBCS161_RANDOM
 9

	)

56 
	#LBCS161_MPBUSCTL
 10

	)

59 
	#LB_CONTROLLER_SLOT
 31

	)

62 
	#LB_NSLOTS
 32

	)

65 
	#LB_CONFIG_SIZE
 1024

	)

68 
	#LB_CTLCPU_SIZE
 1024

	)

71 
	#LB_CTLCPU_OFFSET
 32768

	)

74 
	#LB_SLOT_SIZE
 65536

	)

77 (*
	tlb_úqfunc
)(*
	tdevd©a
);

82 
	sœmebus_so·c
 {

83 
•ölock
 
ls_lock
;

86 
uöt32_t
 
ls_¶Ÿsöu£
;

87 *
ls_devd©a
[
LB_NSLOTS
];

88 
lb_úqfunc
 
ls_úqfuncs
[
LB_NSLOTS
];

91 
ls_unùro˚ss‹
;

97 
œmebus_so·c
 *
	`œmebus_öô
();

102 
	`œmebus_föd_˝us
(
œmebus_so·c
 *
œmebus
);

107 
	`œmebus_°¨t_˝us
(
œmebus_so·c
 *
œmebus
);

116 
	`œmebus_¥obe
(
œmebus_so·c
 *,

117 
uöt32_t
 
víd‹id
, uöt32_à
devi˚id
,

118 
uöt32_t
 
lowvî
, uöt32_à*
vîsi⁄_ªt
);

125 
	`œmebus_m¨k
(
œmebus_so·c
 *, 
¶Ÿ
);

126 
	`œmebus_unm¨k
(
œmebus_so·c
 *, 
¶Ÿ
);

131 
	`œmebus_©èch_öãºu±
(
œmebus_so·c
 *, 
¶Ÿ
,

132 *
devd©a
,

133 (*
úqfunc
)(*
devd©a
));

137 
	`œmebus_dëach_öãºu±
(
œmebus_so·c
 *, 
¶Ÿ
);

142 
	`œmebus_mask_öãºu±
(
œmebus_so·c
 *, 
¶Ÿ
);

143 
	`œmebus_unmask_öãºu±
(
œmebus_so·c
 *, 
¶Ÿ
);

148 
	`œmebus_öãºu±
(
œmebus_so·c
 *);

153 
	`œmebus_powîoff
(
œmebus_so·c
 *);

158 
size_t
 
	`œmebus_ømsize
();

163 
	`œmebus_as£π_ùi
(
œmebus_so·c
 *, 
˝u
 *
èrgë˝u
);

164 
	`œmebus_˛ór_ùi
(
œmebus_so·c
 *, 
˝u
 *
èrgë˝u
);

170 
uöt32_t
 
	`œmebus_ªad_ªgi°î
(
œmebus_so·c
 *, 
¶Ÿ
,

171 
uöt32_t
 
off£t
);

172 
	`œmebus_wrôe_ªgi°î
(
œmebus_so·c
 *, 
¶Ÿ
,

173 
uöt32_t
 
off£t
, uöt32_à
vÆ
);

178 *
	`œmebus_m≠_¨ó
(
œmebus_so·c
 *, 
¶Ÿ
,

179 
uöt32_t
 
off£t
);

	@dev/lamebus/lhd.c

34 
	~<ty≥s.h
>

35 
	~<kîn/î∫o.h
>

36 
	~<lib.h
>

37 
	~<uio.h
>

38 
	~<memb¨.h
>

39 
	~<synch.h
>

40 
	~<∂©f‹m/bus.h
>

41 
	~<vfs.h
>

42 
	~<œmebus/lhd.h
>

43 
	~"autoc⁄f.h
"

46 
	#LHD_REG_NSECT
 0

	)

47 
	#LHD_REG_STAT
 4

	)

48 
	#LHD_REG_SECT
 8

	)

49 
	#LHD_REG_RPM
 12

	)

52 
	#LHD_IDLE
 0

	)

53 
	#LHD_WORKING
 1

	)

54 
	#LHD_OK
 4

	)

55 
	#LHD_INVSECT
 12

	)

56 
	#LHD_MEDIA
 20

	)

57 
	#LHD_ISWRITE
 2

	)

58 
	#LHD_STATEMASK
 0x1d

	)

61 
	#LHD_BUFFER
 32768

	)

67 
ölöe


68 
uöt32_t
 
	$lhd_rdªg
(
lhd_so·c
 *
lh
, 
uöt32_t
 
ªg
)

70  
	`bus_ªad_ªgi°î
(
lh
->
lh_busd©a
,Üh->
lh_bu•os
, 
ªg
);

71 
	}
}

77 
ölöe


78 
	$lhd_wªg
(
lhd_so·c
 *
lh
, 
uöt32_t
 
ªg
, uöt32_à
vÆ
)

80 
	`bus_wrôe_ªgi°î
(
lh
->
lh_busd©a
,Üh->
lh_bu•os
, 
ªg
, 
vÆ
);

81 
	}
}

87 
	$lhd_code_to_î∫o
(
lhd_so·c
 *
lh
, 
code
)

89 
code
 & 
LHD_STATEMASK
) {

90 
LHD_OK
:  0;

91 
LHD_INVSECT
:  
EINVAL
;

92 
LHD_MEDIA
:  
EIO
;

94 
	`k¥ötf
("lhd%d: Unknow¿ªsu… codê%d\n", 
lh
->
lh_unô
, 
code
);

95  
EAGAIN
;

96 
	}
}

104 
	$lhd_iod⁄e
(
lhd_so·c
 *
lh
, 
îr
)

106 
lh
->
lh_ªsu…
 = 
îr
;

107 
	`V
(
lh
->
lh_d⁄e
);

108 
	}
}

116 
	$lhd_úq
(*
vlh
)

118 
lhd_so·c
 *
lh
 = 
vlh
;

119 
uöt32_t
 
vÆ
;

121 
vÆ
 = 
	`lhd_rdªg
(
lh
, 
LHD_REG_STAT
);

123 
vÆ
 & 
LHD_STATEMASK
) {

124 
LHD_IDLE
:

125 
LHD_WORKING
:

127 
LHD_OK
:

128 
LHD_INVSECT
:

129 
LHD_MEDIA
:

130 
	`lhd_wªg
(
lh
, 
LHD_REG_STAT
, 0);

131 
	`lhd_iod⁄e
(
lh
, 
	`lhd_code_to_î∫o
÷h, 
vÆ
));

134 
	}
}

141 
	$lhd_óch›í
(
devi˚
 *
d
, 
›íÊags
)

146 ()
d
;

147 ()
›íÊags
;

150 
	}
}

157 
	$lhd_io˘l
(
devi˚
 *
d
, 
›
, 
u£Ωå_t
 
d©a
)

162 ()
d
;

163 ()
›
;

164 ()
d©a
;

165  
EIOCTL
;

166 
	}
}

176 
	$lhd_ª£t
(
lhd_so·c
 *
lh
)

178 
	`lhd_wªg
(
lh
, 
LHD_REG_STAT
, 0);

179 
	}
}

187 
	$lhd_io
(
devi˚
 *
d
, 
uio
 *uio)

189 
lhd_so·c
 *
lh
 = 
d
->
d_d©a
;

191 
uöt32_t
 
£˘‹
 = 
uio
->
uio_off£t
 / 
LHD_SECTSIZE
;

192 
uöt32_t
 
£˘off
 = 
uio
->
uio_off£t
 % 
LHD_SECTSIZE
;

193 
uöt32_t
 
Àn
 = 
uio
->
uio_ªsid
 / 
LHD_SECTSIZE
;

194 
uöt32_t
 
Ànoff
 = 
uio
->
uio_ªsid
 % 
LHD_SECTSIZE
;

195 
uöt32_t
 
i
;

196 
uöt32_t
 
°©vÆ
 = 
LHD_WORKING
;

197 
ªsu…
;

200 i‡(
£˘off
 !0 || 
Ànoff
 != 0) {

201  
EINVAL
;

206 i‡(
£˘‹
+
Àn
 > 
lh
->
lh_dev
.
d_blocks
) {

207  
EINVAL
;

211 i‡(
uio
->
uio_rw
==
UIO_WRITE
) {

212 
°©vÆ
 |
LHD_ISWRITE
;

216 
i
=0; i<
Àn
; i++) {

219 
	`P
(
lh
->
lh_˛ór
);

225 i‡(
uio
->
uio_rw
 =
UIO_WRITE
) {

226 
ªsu…
 = 
	`uiomove
(
lh
->
lh_buf
, 
LHD_SECTSIZE
, 
uio
);

227 
	`memb¨_°‹e_°‹e
();

228 i‡(
ªsu…
) {

229 
	`V
(
lh
->
lh_˛ór
);

230  
ªsu…
;

235 
	`lhd_wªg
(
lh
, 
LHD_REG_SECT
, 
£˘‹
+
i
);

238 
	`lhd_wªg
(
lh
, 
LHD_REG_STAT
, 
°©vÆ
);

241 
	`P
(
lh
->
lh_d⁄e
);

244 
ªsu…
 = 
lh
->
lh_ªsu…
;

250 i‡(
ªsu…
==0 && 
uio
->
uio_rw
==
UIO_READ
) {

251 
	`memb¨_lﬂd_lﬂd
();

252 
ªsu…
 = 
	`uiomove
(
lh
->
lh_buf
, 
LHD_SECTSIZE
, 
uio
);

256 
	`V
(
lh
->
lh_˛ór
);

259 i‡(
ªsu…
) {

260  
ªsu…
;

265 
	}
}

267 c⁄° 
devi˚_›s
 
	glhd_dev›s
 = {

268 .
dev›_óch›í
 = 
lhd_óch›í
,

269 .
	gdev›_io
 = 
lhd_io
,

270 .
	gdev›_io˘l
 = 
lhd_io˘l
,

277 
	$c⁄fig_lhd
(
lhd_so·c
 *
lh
, 
lhdno
)

279 
«me
[32];

282 
	`¢¥ötf
(
«me
, “ame), "lhd%d", 
lhdno
);

285 
lh
->
lh_buf
 = 
	`bus_m≠_¨ó
÷h->
lh_busd©a
,Üh->
lh_bu•os
, 
LHD_BUFFER
);

288 
lh
->
lh_˛ór
 = 
	`£m_¸óã
("lhd-clear", 1);

289 i‡(
lh
->
lh_˛ór
 =
NULL
) {

290  
ENOMEM
;

292 
lh
->
lh_d⁄e
 = 
	`£m_¸óã
("lhd-done", 0);

293 i‡(
lh
->
lh_d⁄e
 =
NULL
) {

294 
	`£m_de°roy
(
lh
->
lh_˛ór
);

295 
lh
->
lh_˛ór
 = 
NULL
;

296  
ENOMEM
;

300 
lh
->
lh_dev
.
d_›s
 = &
lhd_dev›s
;

301 
lh
->
lh_dev
.
d_blocks
 = 
	`bus_ªad_ªgi°î
÷h->
lh_busd©a
,Üh->
lh_bu•os
,

302 
LHD_REG_NSECT
);

303 
lh
->
lh_dev
.
d_blocksize
 = 
LHD_SECTSIZE
;

304 
lh
->
lh_dev
.
d_d©a
 =Üh;

307  
	`vfs_adddev
(
«me
, &
lh
->
lh_dev
, 1);

308 
	}
}

	@dev/lamebus/lhd.h

30 #i‚de‡
_LAMEBUS_LHD_H_


31 
	#_LAMEBUS_LHD_H_


	)

33 
	~<devi˚.h
>

38 
	#LHD_SECTSIZE
 512

	)

43 
	slhd_so·c
 {

45 *
	mlh_busd©a
;

46 
uöt32_t
 
	mlh_bu•os
;

47 
	mlh_unô
;

53 *
	mlh_buf
;

54 
	mlh_ªsu…
;

55 
£m≠h‹e
 *
	mlh_˛ór
;

56 
£m≠h‹e
 *
	mlh_d⁄e
;

58 
devi˚
 
	mlh_dev
;

62 
lhd_úq
( *);

	@dev/lamebus/lhd_att.c

33 
	~<ty≥s.h
>

34 
	~<lib.h
>

35 
	~<œmebus/œmebus.h
>

36 
	~<œmebus/lhd.h
>

37 
	~"autoc⁄f.h
"

40 
	#LOW_VERSION
 2

	)

42 
lhd_so·c
 *

43 
	$©èch_lhd_to_œmebus
(
lhdno
, 
œmebus_so·c
 *
sc
)

45 
lhd_so·c
 *
lh
;

46 
¶Ÿ
 = 
	`œmebus_¥obe
(
sc
, 
LB_VENDOR_CS161
, 
LBCS161_DISK
,

47 
LOW_VERSION
, 
NULL
);

48 i‡(
¶Ÿ
 < 0) {

50  
NULL
;

53 
lh
 = 
	`kmÆloc
((
lhd_so·c
));

54 i‡(
lh
==
NULL
) {

56  
NULL
;

60 
lh
->
lh_busd©a
 = 
sc
;

61 
lh
->
lh_bu•os
 = 
¶Ÿ
;

62 
lh
->
lh_unô
 = 
lhdno
;

65 
	`œmebus_m¨k
(
sc
, 
¶Ÿ
);

66 
	`œmebus_©èch_öãºu±
(
sc
, 
¶Ÿ
, 
lh
, 
lhd_úq
);

68  
lh
;

69 
	}
}

	@dev/lamebus/lnet.c

30 
	~<ty≥s.h
>

31 
	~<kîn/î∫o.h
>

32 
	~<lib.h
>

34 
	~"autoc⁄f.h
"

37 
	$c⁄fig_ ë
(
 ë_so·c
 *
sc
, 
 ëno
)

39 ()
sc
;

41 
	`k¥ötf
(" ë%d: Nÿ√tw‹k suµ‹àö sy°em\n", 
 ëno
);

43  
ENODEV
;

44 
	}
}

	@dev/lamebus/lnet_att.c

30 
	~<ty≥s.h
>

31 
	~<lib.h
>

32 
	~<œmebus/œmebus.h
>

33 
	~"autoc⁄f.h
"

36 
	#LOW_VERSION
 1

	)

38 
	#HIGH_VERSION
 1

	)

40 
 ë_so·c
 *

41 
	$©èch_ ë_to_œmebus
(
 ëno
, 
œmebus_so·c
 *
sc
)

43 
¶Ÿ
 = 
	`œmebus_¥obe
(
sc
, 
LB_VENDOR_CS161
, 
LBCS161_NET
,

44 
LOW_VERSION
, 
HIGH_VERSION
);

45 i‡(
¶Ÿ
 < 0) {

46  
NULL
;

49 
	`k¥ötf
(" ë%d: Nÿ√tw‹k suµ‹àö sy°em\n", 
 ëno
);

51  
NULL
;

52 
	}
}

	@dev/lamebus/lrandom.c

33 
	~<ty≥s.h
>

34 
	~<lib.h
>

35 
	~<uio.h
>

36 
	~<∂©f‹m/bus.h
>

37 
	~<œmebus/Ã™dom.h
>

38 
	~"autoc⁄f.h
"

41 
	#LR_REG_RAND
 0

	)

44 
	#LR_RANDMAX
 0xffffffff

	)

47 
	$c⁄fig_Ã™dom
(
Ã™dom_so·c
 *
Ã
, 
Ã™domno
)

49 ()
Ã™domno
;

50 ()
Ã
;

52 
	}
}

54 
uöt32_t


55 
	$Ã™dom_øndom
(*
devd©a
)

57 
Ã™dom_so·c
 *
Ã
 = 
devd©a
;

58  
	`bus_ªad_ªgi°î
(
Ã
->
Ã_bus
,Ür->
Ã_bu•os
, 
LR_REG_RAND
);

59 
	}
}

61 
uöt32_t


62 
	$Ã™dom_øndmax
(*
devd©a
)

64 ()
devd©a
;

65  
LR_RANDMAX
;

66 
	}
}

69 
	$Ã™dom_ªad
(*
devd©a
, 
uio
 *uio)

71 
Ã™dom_so·c
 *
Ã
 = 
devd©a
;

72 
uöt32_t
 
vÆ
;

73 
ªsu…
;

75 
uio
->
uio_ªsid
 > 0) {

76 
vÆ
 = 
	`bus_ªad_ªgi°î
(
Ã
->
Ã_bus
,Ür->
Ã_bu•os
,

77 
LR_REG_RAND
);

78 
ªsu…
 = 
	`uiomove
(&
vÆ
, (vÆ), 
uio
);

79 i‡(
ªsu…
) {

80  
ªsu…
;

85 
	}
}

	@dev/lamebus/lrandom.h

30 #i‚de‡
_LAMEBUS_LRANDOM_H_


31 
	#_LAMEBUS_LRANDOM_H_


	)

33 
	guio
;

35 
	sÃ™dom_so·c
 {

37 *
	mÃ_bus
;

38 
uöt32_t
 
	mÃ_bu•os
;

42 
uöt32_t
 
Ã™dom_øndom
–*
devd©a
);

43 
uöt32_t
 
Ã™dom_øndmax
–*
devd©a
);

44 
Ã™dom_ªad
–*, 
uio
 *);

	@dev/lamebus/lrandom_att.c

30 
	~<ty≥s.h
>

31 
	~<lib.h
>

32 
	~<œmebus/œmebus.h
>

33 
	~<œmebus/Ã™dom.h
>

34 
	~"autoc⁄f.h
"

37 
	#LOW_VERSION
 1

	)

39 
Ã™dom_so·c
 *

40 
	$©èch_Ã™dom_to_œmebus
(
Ã™domno
, 
œmebus_so·c
 *
sc
)

42 
Ã™dom_so·c
 *
Ã
;

43 
¶Ÿ
 = 
	`œmebus_¥obe
(
sc
, 
LB_VENDOR_CS161
, 
LBCS161_RANDOM
,

44 
LOW_VERSION
, 
NULL
);

45 i‡(
¶Ÿ
 < 0) {

46  
NULL
;

49 
Ã
 = 
	`kmÆloc
((
Ã™dom_so·c
));

50 i‡(
Ã
==
NULL
) {

51  
NULL
;

54 ()
Ã™domno
;

56 
Ã
->
Ã_bus
 = 
sc
;

57 
Ã
->
Ã_bu•os
 = 
¶Ÿ
;

59 
	`œmebus_m¨k
(
sc
, 
¶Ÿ
);

61  
Ã
;

62 
	}
}

	@dev/lamebus/lscreen.c

36 
	~<ty≥s.h
>

37 
	~<lib.h
>

38 
	~<•ölock.h
>

39 
	~<∂©f‹m/bus.h
>

40 
	~<œmebus/ls¸ìn.h
>

41 
	~"autoc⁄f.h
"

44 
	#LSCR_REG_POSN
 0

	)

45 
	#LSCR_REG_SIZE
 4

	)

46 
	#LSCR_REG_CHAR
 8

	)

47 
	#LSCR_REG_RIRQ
 12

	)

50 
	#LSCR_IRQ_ENABLE
 1

	)

51 
	#LSCR_IRQ_ACTIVE
 2

	)

54 
	#LSCR_SCREEN
 32768

	)

58 
ölöe


60 
	$•lôxy
(
uöt32_t
 
xy
, *
x
, *
y
)

62 *
x
 = 
xy
 >> 16;

63 *
y
 = 
xy
 & 0xffff;

64 
	}
}

68 
ölöe


69 
uöt32_t


70 
	$mîgexy
(
x
, 
y
)

72 
uöt32_t
 
vÆ
 = 
x
;

74  (
vÆ
 << 16Ë| 
y
;

75 
	}
}

83 
	$ls¸ìn_úq
(*
vsc
)

85 
ls¸ìn_so·c
 *
sc
 = 
vsc
;

86 
uöt32_t
 
ch
, 
x
;

88 
	`•ölock_acquúe
(&
sc
->
ls_lock
);

90 
x
 = 
	`bus_ªad_ªgi°î
(
sc
->
ls_busd©a
, sc->
ls_bu•os
, 
LSCR_REG_RIRQ
);

91 i‡(
x
 & 
LSCR_IRQ_ACTIVE
) {

92 
ch
 = 
	`bus_ªad_ªgi°î
(
sc
->
ls_busd©a
, sc->
ls_bu•os
,

93 
LSCR_REG_CHAR
);

94 
	`bus_wrôe_ªgi°î
(
sc
->
ls_busd©a
, sc->
ls_bu•os
,

95 
LSCR_REG_RIRQ
, 
LSCR_IRQ_ENABLE
);

97 
	`•ölock_ªÀa£
(&
sc
->
ls_lock
);

98 i‡(
sc
->
ls_öput
) {

99 
sc
->
	`ls_öput
(sc->
ls_devd©a
, 
ch
);

103 
	`•ölock_ªÀa£
(&
sc
->
ls_lock
);

105 
	}
}

114 
	$ls¸ìn_√wlöe
(
ls¸ìn_so·c
 *
sc
)

116 i‡(
sc
->
ls_cy
 >sc->
ls_height
-1) {

121 
	`memmove
(
sc
->
ls_s¸ìn
, sc->ls_s¸ì¿+ sc->
ls_width
,

122 
sc
->
ls_width
 * (sc->
ls_height
-1));

123 
	`bzîo
(
sc
->
ls_s¸ìn
 + sc->
ls_width
 * (sc->
ls_height
-1),

124 
sc
->
ls_width
);

127 
sc
->
ls_cy
++;

129 
sc
->
ls_cx
=0;

130 
	}
}

137 
	$ls¸ìn_ch¨
(
ls¸ìn_so·c
 *
sc
, 
ch
)

139 i‡(
sc
->
ls_cx
 >sc->
ls_width
) {

140 
	`ls¸ìn_√wlöe
(
sc
);

143 
sc
->
ls_s¸ìn
[sc->
ls_cy
*sc->
ls_width
 + sc->
ls_cx
] = 
ch
;

144 
sc
->
ls_cx
++;

145 
	}
}

152 
	$ls¸ìn_wrôe
(*
vsc
, 
ch
)

154 
ls¸ìn_so·c
 *
sc
 = 
vsc
;

155 
ccx
, 
ccy
;

157 
	`•ölock_acquúe
(&
sc
->
ls_lock
);

159 
ch
) {

160 '\n': 
	`ls¸ìn_√wlöe
(
sc
); ;

161 : 
	`ls¸ìn_ch¨
(
sc
, 
ch
); ;

169 
ccx
 = 
sc
->
ls_cx
;

170 
ccy
 = 
sc
->
ls_cy
;

171 i‡(
ccx
==
sc
->
ls_width
) {

172 
ccx
--;

176 
	`bus_wrôe_ªgi°î
(
sc
->
ls_busd©a
, sc->
ls_bu•os
,

177 
LSCR_REG_POSN
, 
	`mîgexy
(
ccx
, 
ccy
));

179 
	`•ölock_ªÀa£
(&
sc
->
ls_lock
);

180 
	}
}

188 
	$c⁄fig_ls¸ìn
(
ls¸ìn_so·c
 *
sc
, 
ls¸ì¬o
)

190 
uöt32_t
 
vÆ
;

192 ()
ls¸ì¬o
;

194 
	`•ölock_öô
(&
sc
->
ls_lock
);

200 
	`bus_wrôe_ªgi°î
(
sc
->
ls_busd©a
, sc->
ls_bu•os
,

201 
LSCR_REG_RIRQ
, 
LSCR_IRQ_ENABLE
);

206 
vÆ
 = 
	`bus_ªad_ªgi°î
(
sc
->
ls_busd©a
, sc->
ls_bu•os
,

207 
LSCR_REG_SIZE
);

208 
	`•lôxy
(
vÆ
, &
sc
->
ls_width
, &sc->
ls_height
);

213 
vÆ
 = 
	`bus_ªad_ªgi°î
(
sc
->
ls_busd©a
, sc->
ls_bu•os
,

214 
LSCR_REG_POSN
);

215 
	`•lôxy
(
vÆ
, &
sc
->
ls_cx
, &sc->
ls_cy
);

220 
sc
->
ls_s¸ìn
 = 
	`bus_m≠_¨ó
(sc->
ls_busd©a
, sc->
ls_bu•os
,

221 
LSCR_SCREEN
);

224 
	}
}

	@dev/lamebus/lscreen.h

30 #i‚de‡
_LAMEBUS_LSCREEN_H_


31 
	#_LAMEBUS_LSCREEN_H_


	)

36 
	sls¸ìn_so·c
 {

38 
•ölock
 
	mls_lock
;

39 
	mls_width
, 
	mls_height
;

40 
	mls_cx
, 
	mls_cy
;

41 *
	mls_s¸ìn
;

44 *
	mls_busd©a
;

45 
uöt32_t
 
	mls_bu•os
;

48 *
	mls_devd©a
;

49 (*
	mls_°¨t
)(*
	mdevd©a
);

50 (*
	mls_öput
)(*
	mdevd©a
, 
	mch
);

54 
ls¸ìn_úq
–*
sc
);

57 
ls¸ìn_wrôe
–*
sc
, 
ch
);

	@dev/lamebus/lscreen_att.c

33 
	~<ty≥s.h
>

34 
	~<lib.h
>

35 
	~<œmebus/œmebus.h
>

36 
	~<œmebus/ls¸ìn.h
>

37 
	~"autoc⁄f.h
"

40 
	#LOW_VERSION
 1

	)

42 
	#HIGH_VERSION
 1

	)

44 
ls¸ìn_so·c
 *

45 
	$©èch_ls¸ìn_to_œmebus
(
ls¸ì¬o
, 
œmebus_so·c
 *
sc
)

47 
ls¸ìn_so·c
 *
ls
;

48 
¶Ÿ
 = 
	`œmebus_¥obe
(
sc
, 
LB_VENDOR_CS161
, 
LBCS161_SCREEN
,

49 
LOW_VERSION
, 
HIGH_VERSION
);

50 i‡(
¶Ÿ
 < 0) {

52  
NULL
;

55 
ls
 = 
	`kmÆloc
((
ls¸ìn_so·c
));

56 i‡(
ls
==
NULL
) {

58  
NULL
;

62 
ls
->
ls_busd©a
 = 
sc
;

63 
ls
->
ls_bu•os
 = 
¶Ÿ
;

66 
	`œmebus_m¨k
(
sc
, 
¶Ÿ
);

67 
	`œmebus_©èch_öãºu±
(
sc
, 
¶Ÿ
, 
ls
, 
ls¸ìn_úq
);

69  
ls
;

70 
	}
}

	@dev/lamebus/lser.c

30 
	~<ty≥s.h
>

31 
	~<lib.h
>

32 
	~<•ölock.h
>

33 
	~<∂©f‹m/bus.h
>

34 
	~<œmebus/l£r.h
>

35 
	~"autoc⁄f.h
"

38 
	#LSER_REG_CHAR
 0

	)

39 
	#LSER_REG_WIRQ
 4

	)

40 
	#LSER_REG_RIRQ
 8

	)

43 
	#LSER_IRQ_ENABLE
 1

	)

44 
	#LSER_IRQ_ACTIVE
 2

	)

45 
	#LSER_IRQ_FORCE
 4

	)

48 
	$l£r_úq
(*
vsc
)

50 
l£r_so·c
 *
sc
 = 
vsc
;

51 
uöt32_t
 
x
;

52 
boﬁ
 
˛ór_to_wrôe
 = 
Ál£
;

53 
boﬁ
 
gŸ_a_ªad
 = 
Ál£
;

54 
uöt32_t
 
ch
 = 0;

56 
	`•ölock_acquúe
(&
sc
->
ls_lock
);

58 
x
 = 
	`bus_ªad_ªgi°î
(
sc
->
ls_busd©a
, sc->
ls_bu•os
, 
LSER_REG_WIRQ
);

59 i‡(
x
 & 
LSER_IRQ_ACTIVE
) {

60 
x
 = 
LSER_IRQ_ENABLE
;

61 
sc
->
ls_wbusy
 = 0;

62 
˛ór_to_wrôe
 = 
åue
;

63 
	`bus_wrôe_ªgi°î
(
sc
->
ls_busd©a
, sc->
ls_bu•os
,

64 
LSER_REG_WIRQ
, 
x
);

67 
x
 = 
	`bus_ªad_ªgi°î
(
sc
->
ls_busd©a
, sc->
ls_bu•os
, 
LSER_REG_RIRQ
);

68 i‡(
x
 & 
LSER_IRQ_ACTIVE
) {

69 
x
 = 
LSER_IRQ_ENABLE
;

70 
ch
 = 
	`bus_ªad_ªgi°î
(
sc
->
ls_busd©a
, sc->
ls_bu•os
,

71 
LSER_REG_CHAR
);

72 
gŸ_a_ªad
 = 
åue
;

73 
	`bus_wrôe_ªgi°î
(
sc
->
ls_busd©a
, sc->
ls_bu•os
,

74 
LSER_REG_RIRQ
, 
x
);

77 
	`•ölock_ªÀa£
(&
sc
->
ls_lock
);

79 i‡(
˛ór_to_wrôe
 && 
sc
->
ls_°¨t
 !
NULL
) {

80 
sc
->
	`ls_°¨t
(sc->
ls_devd©a
);

82 i‡(
gŸ_a_ªad
 && 
sc
->
ls_öput
 !
NULL
) {

83 
sc
->
	`ls_öput
(sc->
ls_devd©a
, 
ch
);

85 
	}
}

88 
	$l£r_wrôe
(*
vls
, 
ch
)

90 
l£r_so·c
 *
ls
 = 
vls
;

92 
	`•ölock_acquúe
(&
ls
->
ls_lock
);

94 i‡(
ls
->
ls_wbusy
) {

106 
	`∑nic
("lser: Not clearÅo write\n");

108 
ls
->
ls_wbusy
 = 
åue
;

110 
	`bus_wrôe_ªgi°î
(
ls
->
ls_busd©a
,Üs->
ls_bu•os
, 
LSER_REG_CHAR
, 
ch
);

112 
	`•ölock_ªÀa£
(&
ls
->
ls_lock
);

113 
	}
}

117 
	$l£r_pﬁl_u¡û_wrôe
(
l£r_so·c
 *
sc
)

119 
uöt32_t
 
vÆ
;

121 
	`KASSERT
(
	`•ölock_do_i_hﬁd
(&
sc
->
ls_lock
));

124 
vÆ
 = 
	`bus_ªad_ªgi°î
(
sc
->
ls_busd©a
, sc->
ls_bu•os
,

125 
LSER_REG_WIRQ
);

127 (
vÆ
 & 
LSER_IRQ_ACTIVE
) == 0);

128 
	}
}

131 
	$l£r_wrôïﬁÀd
(*
vsc
, 
ch
)

133 
l£r_so·c
 *
sc
 = 
vsc
;

134 
boﬁ
 
úq≥ndög
;

136 
	`•ölock_acquúe
(&
sc
->
ls_lock
);

138 i‡(
sc
->
ls_wbusy
) {

139 
úq≥ndög
 = 
åue
;

140 
	`l£r_pﬁl_u¡û_wrôe
(
sc
);

142 
	`bus_wrôe_ªgi°î
(
sc
->
ls_busd©a
, sc->
ls_bu•os
,

143 
LSER_REG_WIRQ
,

144 
LSER_IRQ_FORCE
|
LSER_IRQ_ENABLE
);

147 
úq≥ndög
 = 
Ál£
;

149 
	`bus_wrôe_ªgi°î
(
sc
->
ls_busd©a
, sc->
ls_bu•os
,

150 
LSER_REG_WIRQ
, 0);

154 
	`bus_wrôe_ªgi°î
(
sc
->
ls_busd©a
, sc->
ls_bu•os
, 
LSER_REG_CHAR
, 
ch
);

157 
	`l£r_pﬁl_u¡û_wrôe
(
sc
);

166 i‡(!
úq≥ndög
) {

167 
	`bus_wrôe_ªgi°î
(
sc
->
ls_busd©a
, sc->
ls_bu•os
,

168 
LSER_REG_WIRQ
, 
LSER_IRQ_ENABLE
);

171 
	`•ölock_ªÀa£
(&
sc
->
ls_lock
);

172 
	}
}

175 
	$c⁄fig_l£r
(
l£r_so·c
 *
sc
, 
l£∫o
)

177 ()
l£∫o
;

183 
	`•ölock_öô
(&
sc
->
ls_lock
);

184 
sc
->
ls_wbusy
 = 
Ál£
;

186 
	`bus_wrôe_ªgi°î
(
sc
->
ls_busd©a
, sc->
ls_bu•os
,

187 
LSER_REG_RIRQ
, 
LSER_IRQ_ENABLE
);

188 
	`bus_wrôe_ªgi°î
(
sc
->
ls_busd©a
, sc->
ls_bu•os
,

189 
LSER_REG_WIRQ
, 
LSER_IRQ_ENABLE
);

192 
	}
}

	@dev/lamebus/lser.h

30 #i‚de‡
_LAMEBUS_LSER_H_


31 
	#_LAMEBUS_LSER_H_


	)

33 
	~<•ölock.h
>

35 
	sl£r_so·c
 {

37 
•ölock
 
	mls_lock
;

38 vﬁ©ûê
boﬁ
 
	mls_wbusy
;

41 *
	mls_busd©a
;

42 
uöt32_t
 
	mls_bu•os
;

45 *
	mls_devd©a
;

46 (*
	mls_°¨t
)(*
	mdevd©a
);

47 (*
	mls_öput
)(*
	mdevd©a
, 
	mch
);

51 
l£r_úq
–*
sc
);

54 
l£r_wrôe
–*
sc
, 
ch
);

55 
l£r_wrôïﬁÀd
–*
sc
, 
ch
);

	@dev/lamebus/lser_att.c

30 
	~<ty≥s.h
>

31 
	~<lib.h
>

32 
	~<œmebus/œmebus.h
>

33 
	~<œmebus/l£r.h
>

34 
	~"autoc⁄f.h
"

37 
	#LOW_VERSION
 1

	)

39 
l£r_so·c
 *

40 
	$©èch_l£r_to_œmebus
(
l£∫o
, 
œmebus_so·c
 *
sc
)

42 
l£r_so·c
 *
ls
;

43 
¶Ÿ
 = 
	`œmebus_¥obe
(
sc
, 
LB_VENDOR_CS161
, 
LBCS161_SERIAL
,

44 
LOW_VERSION
, 
NULL
);

45 i‡(
¶Ÿ
 < 0) {

46  
NULL
;

49 
ls
 = 
	`kmÆloc
((
l£r_so·c
));

50 i‡(
ls
==
NULL
) {

51  
NULL
;

54 ()
l£∫o
;

56 
ls
->
ls_busd©a
 = 
sc
;

57 
ls
->
ls_bu•os
 = 
¶Ÿ
;

59 
	`œmebus_m¨k
(
sc
, 
¶Ÿ
);

60 
	`œmebus_©èch_öãºu±
(
sc
, 
¶Ÿ
, 
ls
, 
l£r_úq
);

62  
ls
;

63 
	}
}

	@dev/lamebus/ltimer.c

33 
	~<ty≥s.h
>

34 
	~<lib.h
>

35 
	~<•l.h
>

36 
	~<˛ock.h
>

37 
	~<∂©f‹m/bus.h
>

38 
	~<œmebus/…imî.h
>

39 
	~"autoc⁄f.h
"

42 
	#LT_REG_SEC
 0

	)

43 
	#LT_REG_NSEC
 4

	)

44 
	#LT_REG_ROE
 8

	)

45 
	#LT_REG_IRQ
 12

	)

46 
	#LT_REG_COUNT
 16

	)

47 
	#LT_REG_SPKR
 20

	)

50 
	#LT_GRANULARITY
 1000000

	)

52 
boﬁ
 
	ghavëimî˛ock
;

58 
	$c⁄fig_…imî
(
…imî_so·c
 *
…
, 
…imîno
)

83 ()
…imîno
;

84 
…
->
…_h¨d˛ock
 = 0;

90 i‡(!
havëimî˛ock
) {

91 
havëimî˛ock
 = 
åue
;

92 
…
->
…_timî˛ock
 = 1;

95 
	`bus_wrôe_ªgi°î
(
…
->
…_bus
,Üt->
…_bu•os
, 
LT_REG_ROE
, 1);

96 
	`bus_wrôe_ªgi°î
(
…
->
…_bus
,Üt->
…_bu•os
, 
LT_REG_COUNT
,

97 
LT_GRANULARITY
);

101 
	}
}

107 
	$…imî_úq
(*
v…
)

109 
…imî_so·c
 *
…
 = 
v…
;

110 
uöt32_t
 
vÆ
;

112 
vÆ
 = 
	`bus_ªad_ªgi°î
(
…
->
…_bus
,Üt->
…_bu•os
, 
LT_REG_IRQ
);

113 i‡(
vÆ
) {

118 i‡(
…
->
…_h¨d˛ock
) {

119 
	`h¨d˛ock
();

124 i‡(
…
->
…_timî˛ock
) {

125 
	`timî˛ock
();

128 
	}
}

136 
	$…imî_bìp
(*
v…
)

138 
…imî_so·c
 *
…
 = 
v…
;

140 
	`bus_wrôe_ªgi°î
(
…
->
…_bus
,Üt->
…_bu•os
, 
LT_REG_SPKR
, 440);

141 
	}
}

149 
	$…imî_gëtime
(*
v…
, 
time•ec
 *
ts
)

151 
…imî_so·c
 *
…
 = 
v…
;

152 
uöt32_t
 
£cs1
, 
£cs2
;

153 
•l
;

170 
•l
 = 
	`•lhigh
();

172 
£cs1
 = 
	`bus_ªad_ªgi°î
(
…
->
…_bus
,Üt->
…_bu•os
,

173 
LT_REG_SEC
);

174 
ts
->
tv_n£c
 = 
	`bus_ªad_ªgi°î
(
…
->
…_bus
,Üt->
…_bu•os
,

175 
LT_REG_NSEC
);

176 
£cs2
 = 
	`bus_ªad_ªgi°î
(
…
->
…_bus
,Üt->
…_bu•os
,

177 
LT_REG_SEC
);

179 
	`•lx
(
•l
);

181 i‡(
ts
->
tv_n£c
 < 5000000) {

182 
ts
->
tv_£c
 = 
£cs2
;

185 
ts
->
tv_£c
 = 
£cs1
;

187 
	}
}

	@dev/lamebus/ltimer.h

30 #i‚de‡
_LAMEBUS_LTIMER_H_


31 
	#_LAMEBUS_LTIMER_H_


	)

33 
	gtime•ec
;

38 
	s…imî_so·c
 {

40 
	m…_h¨d˛ock
;

41 
	m…_timî˛ock
;

44 *
	m…_bus
;

45 
uöt32_t
 
	m…_bu•os
;

49 
…imî_úq
–*
…
);

52 
…imî_bìp
–*
devd©a
);

53 
…imî_gëtime
–*
devd©a
,

54 
time•ec
 *
ts
);

	@dev/lamebus/ltimer_att.c

33 
	~<ty≥s.h
>

34 
	~<lib.h
>

35 
	~<œmebus/œmebus.h
>

36 
	~<œmebus/…imî.h
>

37 
	~"autoc⁄f.h
"

40 
	#LOW_VERSION
 1

	)

42 
…imî_so·c
 *

43 
	$©èch_…imî_to_œmebus
(
…imîno
, 
œmebus_so·c
 *
sc
)

45 
…imî_so·c
 *
…
;

46 
¶Ÿ
 = 
	`œmebus_¥obe
(
sc
, 
LB_VENDOR_CS161
, 
LBCS161_TIMER
,

47 
LOW_VERSION
, 
NULL
);

48 i‡(
¶Ÿ
 < 0) {

50  
NULL
;

53 
…
 = 
	`kmÆloc
((
…imî_so·c
));

54 i‡(
…
==
NULL
) {

56  
NULL
;

59 ()
…imîno
;

62 
…
->
…_bus
 = 
sc
;

63 
…
->
…_bu•os
 = 
¶Ÿ
;

66 
	`œmebus_m¨k
(
sc
, 
¶Ÿ
);

67 
	`œmebus_©èch_öãºu±
(
sc
, 
¶Ÿ
, 
…
, 
…imî_úq
);

69  
…
;

70 
	}
}

	@dev/lamebus/ltrace.c

30 
	~<ty≥s.h
>

31 
	~<lib.h
>

32 
	~<∂©f‹m/bus.h
>

33 
	~<œmebus/…ø˚.h
>

34 
	~"autoc⁄f.h
"

37 
	#LTRACE_REG_TRON
 0

	)

38 
	#LTRACE_REG_TROFF
 4

	)

39 
	#LTRACE_REG_DEBUG
 8

	)

40 
	#LTRACE_REG_DUMP
 12

	)

42 
…ø˚_so·c
 *
	gthe_åa˚
;

45 
	$…ø˚_⁄
(
uöt32_t
 
code
)

47 i‡(
the_åa˚
 !
NULL
) {

48 
	`bus_wrôe_ªgi°î
(
the_åa˚
->
…_busd©a
,Åhe_åa˚->
…_bu•os
,

49 
LTRACE_REG_TRON
, 
code
);

51 
	}
}

54 
	$…ø˚_off
(
uöt32_t
 
code
)

56 i‡(
the_åa˚
 !
NULL
) {

57 
	`bus_wrôe_ªgi°î
(
the_åa˚
->
…_busd©a
,Åhe_åa˚->
…_bu•os
,

58 
LTRACE_REG_TROFF
, 
code
);

60 
	}
}

63 
	$…ø˚_debug
(
uöt32_t
 
code
)

65 i‡(
the_åa˚
 !
NULL
) {

66 
	`bus_wrôe_ªgi°î
(
the_åa˚
->
…_busd©a
,Åhe_åa˚->
…_bu•os
,

67 
LTRACE_REG_DEBUG
, 
code
);

69 
	}
}

72 
	$…ø˚_dump
(
uöt32_t
 
code
)

74 i‡(
the_åa˚
 !
NULL
) {

75 
	`bus_wrôe_ªgi°î
(
the_åa˚
->
…_busd©a
,Åhe_åa˚->
…_bu•os
,

76 
LTRACE_REG_DUMP
, 
code
);

78 
	}
}

81 
	$c⁄fig_…ø˚
(
…ø˚_so·c
 *
sc
, 
…ø˚no
)

83 ()
…ø˚no
;

84 
the_åa˚
 = 
sc
;

86 
	}
}

	@dev/lamebus/ltrace.h

30 #i‚de‡
_LAMEBUS_LTRACE_H_


31 
	#_LAMEBUS_LTRACE_H_


	)

33 
	s…ø˚_so·c
 {

35 *
	m…_busd©a
;

36 
uöt32_t
 
	m…_bu•os
;

62 
…ø˚_⁄
(
uöt32_t
 
code
);

63 
…ø˚_off
(
uöt32_t
 
code
);

64 
…ø˚_debug
(
uöt32_t
 
code
);

65 
…ø˚_dump
(
uöt32_t
 
code
);

	@dev/lamebus/ltrace_att.c

30 
	~<ty≥s.h
>

31 
	~<lib.h
>

32 
	~<œmebus/œmebus.h
>

33 
	~<œmebus/…ø˚.h
>

34 
	~"autoc⁄f.h
"

37 
	#LOW_VERSION
 1

	)

39 
…ø˚_so·c
 *

40 
	$©èch_…ø˚_to_œmebus
(
…ø˚no
, 
œmebus_so·c
 *
sc
)

42 
…ø˚_so·c
 *
…
;

43 
¶Ÿ
 = 
	`œmebus_¥obe
(
sc
, 
LB_VENDOR_CS161
, 
LBCS161_TRACE
,

44 
LOW_VERSION
, 
NULL
);

45 i‡(
¶Ÿ
 < 0) {

46  
NULL
;

49 
…
 = 
	`kmÆloc
((
…ø˚_so·c
));

50 i‡(
…
==
NULL
) {

51  
NULL
;

54 ()
…ø˚no
;

56 
…
->
…_busd©a
 = 
sc
;

57 
…
->
…_bu•os
 = 
¶Ÿ
;

59 
	`œmebus_m¨k
(
sc
, 
¶Ÿ
);

61  
…
;

62 
	}
}

	@dev/lamebus/random_lrandom.c

35 
	~<ty≥s.h
>

36 
	~<lib.h
>

37 
	~<gíîic/øndom.h
>

38 
	~<œmebus/Ã™dom.h
>

39 
	~"autoc⁄f.h
"

41 
øndom_so·c
 *

42 
	$©èch_øndom_to_Ã™dom
(
øndomno
, 
Ã™dom_so·c
 *
ls
)

44 
øndom_so·c
 *
rs
 = 
	`kmÆloc
((random_softc));

45 i‡(
rs
==
NULL
) {

46  
NULL
;

49 ()
øndomno
;

51 
rs
->
rs_devd©a
 = 
ls
;

52 
rs
->
rs_øndom
 = 
Ã™dom_øndom
;

53 
rs
->
rs_øndmax
 = 
Ã™dom_øndmax
;

54 
rs
->
rs_ªad
 = 
Ã™dom_ªad
;

56  
rs
;

57 
	}
}

	@dev/lamebus/rtclock_ltimer.c

41 
	~<ty≥s.h
>

42 
	~<lib.h
>

43 
	~<gíîic/π˛ock.h
>

44 
	~<œmebus/…imî.h
>

45 
	~"autoc⁄f.h
"

47 
π˛ock_so·c
 *

48 
	$©èch_π˛ock_to_…imî
(
π˛ockno
, 
…imî_so·c
 *
ls
)

54 
π˛ock_so·c
 *
πc
 = 
	`kmÆloc
((rtclock_softc));

55 i‡(
πc
==
NULL
) {

57  
NULL
;

60 ()
π˛ockno
;

62 
πc
->
πc_devd©a
 = 
ls
;

63 
πc
->
πc_gëtime
 = 
…imî_gëtime
;

65  
πc
;

66 
	}
}

	@filetable/filetable.c

1 
	~<fûëabÀ.h
>

3 
	$fûëabÀ_öô
(
fûëabÀ
* 
·
){

4 
·
->
¨r
=
	`¨øy_¸óã
();

5 
	}
}

7 
	$fûëabÀ_ö£π
(
fûëabÀ
* 
·
, 
fûe
* 
f
){

8 
fûe
* 
ãmp
;

9 
ödex
=0;ödex<
	`¨øy_num
(
·
->
¨r
);++index){

10 
ãmp
=(
fûe
*)
	`¨øy_gë
(
·
->
¨r
,
ödex
);

11 if(!
ãmp
->
vÆid
){

12 
	`¨øy_£t
(
·
->
¨r
,
ödex
,
f
);

16 
	`¨øy_add
(
·
->
¨r
,
f
,
NULL
);

17 
	}
}

	@fs/semfs/semfs.h

30 #i‚de‡
SEMFS_H


31 
	#SEMFS_H


	)

33 
	~<¨øy.h
>

34 
	~<fs.h
>

35 
	~<vnode.h
>

37 #i‚de‡
SEMFS_INLINE


38 
	#SEMFS_INLINE
 
INLINE


	)

45 
	#SEMFS_ROOTDIR
 0xffffffffU

	)

54 
	s£mfs_£m
 {

55 
lock
 *
	m£ms_lock
;

56 
cv
 *
	m£ms_cv
;

57 
	m£ms_cou¡
;

58 
boﬁ
 
	m£ms_hasvnode
;

59 
boﬁ
 
	m£ms_löked
;

61 
DECLARRAY
(
£mfs_£m
, 
SEMFS_INLINE
);

66 
	s£mfs_dúíåy
 {

67 *
	m£md_«me
;

68 
	m£md_£mnum
;

70 
DECLARRAY
(
£mfs_dúíåy
, 
SEMFS_INLINE
);

79 
	s£mfs_vnode
 {

80 
vnode
 
	m£mv_absvn
;

81 
£mfs
 *
	m£mv_£mfs
;

82 
	m£mv_£mnum
;

89 
	s£mfs
 {

90 
fs
 
	m£mfs_absfs
;

92 
lock
 *
	m£mfs_èbÀlock
;

93 
vnodóºay
 *
	m£mfs_vnodes
;

94 
£mfs_£m¨øy
 *
	m£mfs_£ms
;

96 
lock
 *
	m£mfs_dúlock
;

97 
£mfs_dúíåy¨øy
 *
	m£mfs_díts
;

104 
DEFARRAY
(
£mfs_£m
, 
SEMFS_INLINE
);

105 
DEFARRAY
(
£mfs_dúíåy
, 
SEMFS_INLINE
);

113 
£mfs_£m
 *
£mfs_£m_¸óã
(c⁄° *
«me
);

114 
£mfs_£m_ö£π
(
£mfs
 *, 
£mfs_£m
 *, *);

115 
£mfs_£m_de°roy
(
£mfs_£m
 *);

116 
£mfs_dúíåy
 *
£mfs_dúíåy_¸óã
(c⁄° *
«me
, 
£mno
);

117 
£mfs_dúíåy_de°roy
(
£mfs_dúíåy
 *);

120 
£mfs_gëvnode
(
£mfs
 *, , 
vnode
 **
ªt
);

	@fs/semfs/semfs_fsops.c

30 
	~<ty≥s.h
>

31 
	~<kîn/î∫o.h
>

32 
	~<synch.h
>

33 
	~<vfs.h
>

34 
	~<fs.h
>

35 
	~<vnode.h
>

37 
	~"£mfs.h
"

47 
	$£mfs_sync
(
fs
 *fs)

49 ()
fs
;

51 
	}
}

58 
	$£mfs_gëvﬁ«me
(
fs
 *fs)

60 ()
fs
;

62 
	}
}

68 
vnode
 *

69 
	$£mfs_gëroŸ
(
fs
 *fs)

71 
£mfs
 *£mf†
fs
->
fs_d©a
;

72 
vnode
 *
vn
;

73 
ªsu…
;

75 
ªsu…
 = 
	`£mfs_gëvnode
(
£mfs
, 
SEMFS_ROOTDIR
, &
vn
);

76 i‡(
ªsu…
) {

77 
	`∑nic
("semfs: couldn'tÜoadÑoot vnode: %s\n",

78 
	`°ªº‹
(
ªsu…
));

80  
vn
;

81 
	}
}

92 
	$£mfs_de°roy
(
£mfs
 *semfs)

94 
£mfs_£m
 *
£m
;

95 
£mfs_dúíåy
 *
dít
;

96 
i
, 
num
;

98 
num
 = 
	`£mfs_£m¨øy_num
(
£mfs
->
£mfs_£ms
);

99 
i
=0; i<
num
; i++) {

100 
£m
 = 
	`£mfs_£m¨øy_gë
(
£mfs
->
£mfs_£ms
, 
i
);

101 
	`£mfs_£m_de°roy
(
£m
);

103 
	`£mfs_£m¨øy_£tsize
(
£mfs
->
£mfs_£ms
, 0);

105 
num
 = 
	`£mfs_dúíåy¨øy_num
(
£mfs
->
£mfs_díts
);

106 
i
=0; i<
num
; i++) {

107 
dít
 = 
	`£mfs_dúíåy¨øy_gë
(
£mfs
->
£mfs_díts
, 
i
);

108 
	`£mfs_dúíåy_de°roy
(
dít
);

110 
	`£mfs_dúíåy¨øy_£tsize
(
£mfs
->
£mfs_díts
, 0);

112 
	`£mfs_dúíåy¨øy_de°roy
(
£mfs
->
£mfs_díts
);

113 
	`lock_de°roy
(
£mfs
->
£mfs_dúlock
);

114 
	`£mfs_£m¨øy_de°roy
(
£mfs
->
£mfs_£ms
);

115 
	`vnodóºay_de°roy
(
£mfs
->
£mfs_vnodes
);

116 
	`lock_de°roy
(
£mfs
->
£mfs_èbÀlock
);

117 
	`k‰ì
(
£mfs
);

118 
	}
}

126 
	$£mfs_unmou¡
(
fs
 *fs)

128 
£mfs
 *£mf†
fs
->
fs_d©a
;

130 
	`lock_acquúe
(
£mfs
->
£mfs_èbÀlock
);

131 i‡(
	`vnodóºay_num
(
£mfs
->
£mfs_vnodes
) > 0) {

132 
	`lock_ªÀa£
(
£mfs
->
£mfs_èbÀlock
);

133  
EBUSY
;

136 
	`lock_ªÀa£
(
£mfs
->
£mfs_èbÀlock
);

137 
	`£mfs_de°roy
(
£mfs
);

140 
	}
}

145 c⁄° 
fs_›s
 
	g£mfs_fs›s
 = {

146 .
fs›_sync
 = 
£mfs_sync
,

147 .
	gfs›_gëvﬁ«me
 = 
£mfs_gëvﬁ«me
,

148 .
	gfs›_gëroŸ
 = 
£mfs_gëroŸ
,

149 .
	gfs›_unmou¡
 = 
£mfs_unmou¡
,

156 
£mfs
 *

157 
	$£mfs_¸óã
()

159 
£mfs
 *semfs;

161 
£mfs
 = 
	`kmÆloc
((*semfs));

162 i‡(
£mfs
 =
NULL
) {

163 
Áû_tŸÆ
;

166 
£mfs
->
£mfs_èbÀlock
 = 
	`lock_¸óã
("semfs_table");

167 i‡(
£mfs
->
£mfs_èbÀlock
 =
NULL
) {

168 
Áû_£mfs
;

170 
£mfs
->
£mfs_vnodes
 = 
	`vnodóºay_¸óã
();

171 i‡(
£mfs
->
£mfs_vnodes
 =
NULL
) {

172 
Áû_èbÀlock
;

174 
£mfs
->
£mfs_£ms
 = 
	`£mfs_£m¨øy_¸óã
();

175 i‡(
£mfs
->
£mfs_£ms
 =
NULL
) {

176 
Áû_vnodes
;

179 
£mfs
->
£mfs_dúlock
 = 
	`lock_¸óã
("semfs_dir");

180 i‡(
£mfs
->
£mfs_dúlock
 =
NULL
) {

181 
Áû_£ms
;

183 
£mfs
->
£mfs_díts
 = 
	`£mfs_dúíåy¨øy_¸óã
();

184 i‡(
£mfs
->
£mfs_díts
 =
NULL
) {

185 
Áû_dúlock
;

188 
£mfs
->
£mfs_absfs
.
fs_d©a
 = semfs;

189 
£mfs
->
£mfs_absfs
.
fs_›s
 = &
£mfs_fs›s
;

190  
£mfs
;

192 
Áû_dúlock
:

193 
	`lock_de°roy
(
£mfs
->
£mfs_dúlock
);

194 
Áû_£ms
:

195 
	`£mfs_£m¨øy_de°roy
(
£mfs
->
£mfs_£ms
);

196 
Áû_vnodes
:

197 
	`vnodóºay_de°roy
(
£mfs
->
£mfs_vnodes
);

198 
Áû_èbÀlock
:

199 
	`lock_de°roy
(
£mfs
->
£mfs_èbÀlock
);

200 
Áû_£mfs
:

201 
	`k‰ì
(
£mfs
);

202 
Áû_tŸÆ
:

203  
NULL
;

204 
	}
}

211 
	$£mfs_boŸ°øp
()

213 
£mfs
 *semfs;

214 
ªsu…
;

216 
£mfs
 = 
	`£mfs_¸óã
();

217 i‡(
£mfs
 =
NULL
) {

218 
	`∑nic
("Out of memory creating semfs\n");

220 
ªsu…
 = 
	`vfs_addfs
("£m", &
£mfs
->
£mfs_absfs
);

221 i‡(
ªsu…
) {

222 
	`∑nic
("Aâachög semfs: %s\n", 
	`°ªº‹
(
ªsu…
));

224 
	}
}

	@fs/semfs/semfs_obj.c

30 
	~<ty≥s.h
>

31 
	~<kîn/î∫o.h
>

32 
	~<synch.h
>

34 
	#SEMFS_INLINE


	)

35 
	~"£mfs.h
"

43 
£mfs_£m
 *

44 
	$£mfs_£m_¸óã
(c⁄° *
«me
)

46 
£mfs_£m
 *
£m
;

47 
lock«me
[32];

48 
cv«me
[32];

50 
	`¢¥ötf
(
lock«me
, ÷ock«me), "£m:l.%s", 
«me
);

51 
	`¢¥ötf
(
cv«me
, (cv«me), "£m:%s", 
«me
);

53 
£m
 = 
	`kmÆloc
((*sem));

54 i‡(
£m
 =
NULL
) {

55 
Áû_ªtu∫
;

57 
£m
->
£ms_lock
 = 
	`lock_¸óã
(
lock«me
);

58 i‡(
£m
->
£ms_lock
 =
NULL
) {

59 
Áû_£m
;

61 
£m
->
£ms_cv
 = 
	`cv_¸óã
(
cv«me
);

62 i‡(
£m
->
£ms_cv
 =
NULL
) {

63 
Áû_lock
;

65 
£m
->
£ms_cou¡
 = 0;

66 
£m
->
£ms_hasvnode
 = 
Ál£
;

67 
£m
->
£ms_löked
 = 
Ál£
;

68  
£m
;

70 
Áû_lock
:

71 
	`lock_de°roy
(
£m
->
£ms_lock
);

72 
Áû_£m
:

73 
	`k‰ì
(
£m
);

74 
Áû_ªtu∫
:

75  
NULL
;

76 
	}
}

82 
	$£mfs_£m_de°roy
(
£mfs_£m
 *
£m
)

84 
	`cv_de°roy
(
£m
->
£ms_cv
);

85 
	`lock_de°roy
(
£m
->
£ms_lock
);

86 
	`k‰ì
(
£m
);

87 
	}
}

93 
	$£mfs_£m_ö£π
(
£mfs
 *£mfs, 
£mfs_£m
 *
£m
, *
ªt
)

95 
i
, 
num
;

97 
	`KASSERT
(
	`lock_do_i_hﬁd
(
£mfs
->
£mfs_èbÀlock
));

98 
num
 = 
	`£mfs_£m¨øy_num
(
£mfs
->
£mfs_£ms
);

99 i‡(
num
 =
SEMFS_ROOTDIR
) {

101  
ENOSPC
;

103 
i
=0; i<
num
; i++) {

104 i‡(
	`£mfs_£m¨øy_gë
(
£mfs
->
£mfs_£ms
, 
i
Ë=
NULL
) {

105 
	`£mfs_£m¨øy_£t
(
£mfs
->
£mfs_£ms
, 
i
, 
£m
);

106 *
ªt
 = 
i
;

110  
	`£mfs_£m¨øy_add
(
£mfs
->
£mfs_£ms
, 
£m
, 
ªt
);

111 
	}
}

119 
£mfs_dúíåy
 *

120 
	$£mfs_dúíåy_¸óã
(c⁄° *
«me
, 
£mnum
)

122 
£mfs_dúíåy
 *
dít
;

124 
dít
 = 
	`kmÆloc
((*dent));

125 i‡(
dít
 =
NULL
) {

126  
NULL
;

128 
dít
->
£md_«me
 = 
	`k°rdup
(
«me
);

129 i‡(
dít
->
£md_«me
 =
NULL
) {

130 
	`k‰ì
(
dít
);

131  
NULL
;

133 
dít
->
£md_£mnum
 = 
£mnum
;

134  
dít
;

135 
	}
}

141 
	$£mfs_dúíåy_de°roy
(
£mfs_dúíåy
 *
dít
)

143 
	`k‰ì
(
dít
->
£md_«me
);

144 
	`k‰ì
(
dít
);

145 
	}
}

	@fs/semfs/semfs_vnops.c

30 
	~<ty≥s.h
>

31 
	~<kîn/î∫o.h
>

32 
	~<kîn/f˙é.h
>

33 
	~<°©.h
>

34 
	~<uio.h
>

35 
	~<synch.h
>

36 
	~<thªad.h
>

37 
	~<¥oc.h
>

38 
	~<cuºít.h
>

39 
	~<vfs.h
>

40 
	~<vnode.h
>

42 
	~"£mfs.h
"

49 
	$£mfs_óch›í
(
vnode
 *
vn
, 
›íÊags
)

51 
£mfs_vnode
 *
£mv
 = 
vn
->
vn_d©a
;

53 i‡(
£mv
->
£mv_£mnum
 =
SEMFS_ROOTDIR
) {

54 i‡((
›íÊags
 & 
O_ACCMODE
Ë!
O_RDONLY
) {

55  
EISDIR
;

57 i‡(
›íÊags
 & 
O_APPEND
) {

58  
EISDIR
;

63 
	}
}

67 
	$£mfs_io˘l
(
vnode
 *
vn
, 
›
, 
u£Ωå_t
 
d©a
)

69 ()
vn
;

70 ()
›
;

71 ()
d©a
;

72  
EINVAL
;

73 
	}
}

77 
	$£mfs_gëty≥
(
vnode
 *
vn
, 
mode_t
 *
ªt
)

79 
£mfs_vnode
 *
£mv
 = 
vn
->
vn_d©a
;

81 *
ªt
 = 
£mv
->
£mv_£mnum
 =
SEMFS_ROOTDIR
 ? 
S_IFDIR
 : 
S_IFREG
;

83 
	}
}

86 
boﬁ


87 
	$£mfs_is£ekabÀ
(
vnode
 *
vn
)

89 
£mfs_vnode
 *
£mv
 = 
vn
->
vn_d©a
;

91 i‡(
£mv
->
£mv_£mnum
 !
SEMFS_ROOTDIR
) {

93  
Ál£
;

95  
åue
;

96 
	}
}

100 
	$£mfs_fsync
(
vnode
 *
vn
)

102 ()
vn
;

104 
	}
}

114 
£mfs_£m
 *

115 
	$£mfs_gë£mbynum
(
£mfs
 *£mfs, 
£mnum
)

117 
£mfs_£m
 *
£m
;

119 
	`lock_acquúe
(
£mfs
->
£mfs_èbÀlock
);

120 
£m
 = 
	`£mfs_£m¨øy_gë
(
£mfs
->
£mfs_£ms
, 
£mnum
);

121 
	`lock_ªÀa£
(
£mfs
->
£mfs_èbÀlock
);

123  
£m
;

124 
	}
}

127 
£mfs_£m
 *

128 
	$£mfs_gë£m
(
£mfs_vnode
 *
£mv
)

130 
£mfs
 *£mf†
£mv
->
£mv_£mfs
;

132  
	`£mfs_gë£mbynum
(
£mfs
, 
£mv
->
£mv_£mnum
);

133 
	}
}

143 
	$£mfs_wakeup
(
£mfs_£m
 *
£m
, 
√wcou¡
)

145 i‡(
£m
->
£ms_cou¡
 > 0 || 
√wcou¡
 == 0) {

148 i‡(
√wcou¡
 == 1) {

149 
	`cv_sig«l
(
£m
->
£ms_cv
, sem->
£ms_lock
);

152 
	`cv_brﬂdˇ°
(
£m
->
£ms_cv
, sem->
£ms_lock
);

154 
	}
}

161 
	$£mfs_£m°©
(
vnode
 *
vn
, 
°©
 *
buf
)

163 
£mfs_vnode
 *
£mv
 = 
vn
->
vn_d©a
;

164 
£mfs_£m
 *
£m
;

166 
£m
 = 
	`£mfs_gë£m
(
£mv
);

168 
	`bzîo
(
buf
, (*buf));

170 
	`lock_acquúe
(
£m
->
£ms_lock
);

171 
buf
->
°_size
 = 
£m
->
£ms_cou¡
;

172 
buf
->
°_∆ök
 = 
£m
->
£ms_löked
 ? 1 : 0;

173 
	`lock_ªÀa£
(
£m
->
£ms_lock
);

175 
buf
->
°_mode
 = 
S_IFREG
 | 0666;

176 
buf
->
°_blocks
 = 0;

177 
buf
->
°_dev
 = 0;

178 
buf
->
°_öo
 = 
£mv
->
£mv_£mnum
;

181 
	}
}

189 
	$£mfs_ªad
(
vnode
 *
vn
, 
uio
 *uio)

191 
£mfs_vnode
 *
£mv
 = 
vn
->
vn_d©a
;

192 
£mfs_£m
 *
£m
;

193 
size_t
 
c⁄sume
;

195 
£m
 = 
	`£mfs_gë£m
(
£mv
);

197 
	`lock_acquúe
(
£m
->
£ms_lock
);

198 
uio
->
uio_ªsid
 > 0) {

199 i‡(
£m
->
£ms_cou¡
 > 0) {

200 
c⁄sume
 = 
uio
->
uio_ªsid
;

201 i‡(
c⁄sume
 > 
£m
->
£ms_cou¡
) {

202 
c⁄sume
 = 
£m
->
£ms_cou¡
;

204 
	`DEBUG
(
DB_SEMFS
, "semfs: sem%u: P, count %u -> %u\n",

205 
£mv
->
£mv_£mnum
, 
£m
->
£ms_cou¡
,

206 
£m
->
£ms_cou¡
 - 
c⁄sume
);

207 
£m
->
£ms_cou¡
 -
c⁄sume
;

209 
uio
->
uio_ªsid
 -
c⁄sume
;

211 i‡(
uio
->
uio_ªsid
 == 0) {

214 i‡(
£m
->
£ms_cou¡
 == 0) {

215 
	`DEBUG
(
DB_SEMFS
, "semfs: sem%u: blocking\n",

216 
£mv
->
£mv_£mnum
);

217 
	`cv_waô
(
£m
->
£ms_cv
, sem->
£ms_lock
);

220 
	`lock_ªÀa£
(
£m
->
£ms_lock
);

222 
	}
}

230 
	$£mfs_wrôe
(
vnode
 *
vn
, 
uio
 *uio)

232 
£mfs_vnode
 *
£mv
 = 
vn
->
vn_d©a
;

233 
£mfs_£m
 *
£m
;

234 
√wcou¡
;

236 
£m
 = 
	`£mfs_gë£m
(
£mv
);

238 
	`lock_acquúe
(
£m
->
£ms_lock
);

239 
uio
->
uio_ªsid
 > 0) {

240 
√wcou¡
 = 
£m
->
£ms_cou¡
 + 
uio
->
uio_ªsid
;

241 i‡(
√wcou¡
 < 
£m
->
£ms_cou¡
) {

243 
	`lock_ªÀa£
(
£m
->
£ms_lock
);

244  
EFBIG
;

246 
	`DEBUG
(
DB_SEMFS
, "semfs: sem%u: V, count %u -> %u\n",

247 
£mv
->
£mv_£mnum
, 
£m
->
£ms_cou¡
, 
√wcou¡
);

248 
	`£mfs_wakeup
(
£m
, 
√wcou¡
);

249 
£m
->
£ms_cou¡
 = 
√wcou¡
;

250 
uio
->
uio_ªsid
 = 0;

252 
	`lock_ªÀa£
(
£m
->
£ms_lock
);

254 
	}
}

265 
	$£mfs_åunˇã
(
vnode
 *
vn
, 
off_t
 
Àn
)

268 c⁄° 
max
 = ()-1;

270 
£mfs_vnode
 *
£mv
 = 
vn
->
vn_d©a
;

271 
£mfs_£m
 *
£m
;

272 
√wcou¡
;

274 i‡(
Àn
 < 0) {

275  
EINVAL
;

277 i‡(
Àn
 > (
off_t
)
max
) {

278  
EFBIG
;

280 
√wcou¡
 = 
Àn
;

282 
£m
 = 
	`£mfs_gë£m
(
£mv
);

284 
	`lock_acquúe
(
£m
->
£ms_lock
);

285 
	`£mfs_wakeup
(
£m
, 
√wcou¡
);

286 
£m
->
£ms_cou¡
 = 
√wcou¡
;

287 
	`lock_ªÀa£
(
£m
->
£ms_lock
);

290 
	}
}

301 
	$£mfs_gëdúíåy
(
vnode
 *
dúvn
, 
uio
 *uio)

303 
£mfs_vnode
 *
dú£mv
 = 
dúvn
->
vn_d©a
;

304 
£mfs
 *£mf†
dú£mv
->
£mv_£mfs
;

305 
£mfs_dúíåy
 *
dít
;

306 
num
, 
pos
;

307 
ªsu…
;

309 
	`KASSERT
(
uio
->
uio_off£t
 >= 0);

310 
pos
 = 
uio
->
uio_off£t
;

312 
	`lock_acquúe
(
£mfs
->
£mfs_dúlock
);

314 
num
 = 
	`£mfs_dúíåy¨øy_num
(
£mfs
->
£mfs_díts
);

315 i‡(
pos
 >
num
) {

317 
ªsu…
 = 0;

320 
dít
 = 
	`£mfs_dúíåy¨øy_gë
(
£mfs
->
£mfs_díts
, 
pos
);

321 
ªsu…
 = 
	`uiomove
(
dít
->
£md_«me
, 
	`°æí
(dent->semd_name),

322 
uio
);

325 
	`lock_ªÀa£
(
£mfs
->
£mfs_dúlock
);

326  
ªsu…
;

327 
	}
}

334 
	$£mfs_dú°©
(
vnode
 *
vn
, 
°©
 *
buf
)

336 
£mfs_vnode
 *
£mv
 = 
vn
->
vn_d©a
;

337 
£mfs
 *£mf†
£mv
->
£mv_£mfs
;

339 
	`bzîo
(
buf
, (*buf));

341 
	`lock_acquúe
(
£mfs
->
£mfs_dúlock
);

342 
buf
->
°_size
 = 
	`£mfs_dúíåy¨øy_num
(
£mfs
->
£mfs_díts
);

343 
	`lock_ªÀa£
(
£mfs
->
£mfs_dúlock
);

345 
buf
->
°_mode
 = 
S_IFDIR
 | 1777;

346 
buf
->
°_∆ök
 = 2;

347 
buf
->
°_blocks
 = 0;

348 
buf
->
°_dev
 = 0;

349 
buf
->
°_öo
 = 
SEMFS_ROOTDIR
;

352 
	}
}

360 
	$£mfs_«mefûe
(
vnode
 *
vn
, 
uio
 *uio)

362 ()
vn
;

363 ()
uio
;

365 
	}
}

372 
	$£mfs_¸ót
(
vnode
 *
dúvn
, c⁄° *
«me
, 
boﬁ
 
ex˛
, 
mode_t
 
mode
,

373 
vnode
 **
ªsu…vn
)

375 
£mfs_vnode
 *
dú£mv
 = 
dúvn
->
vn_d©a
;

376 
£mfs
 *£mf†
dú£mv
->
£mv_£mfs
;

377 
£mfs_dúíåy
 *
dít
;

378 
£mfs_£m
 *
£m
;

379 
i
, 
num
, 
em±y
, 
£mnum
;

380 
ªsu…
;

382 ()
mode
;

383 i‡(!
	`°rcmp
(
«me
, ".") || !strcmp(name, "..")) {

384  
EEXIST
;

387 
	`lock_acquúe
(
£mfs
->
£mfs_dúlock
);

388 
num
 = 
	`£mfs_dúíåy¨øy_num
(
£mfs
->
£mfs_díts
);

389 
em±y
 = 
num
;

390 
i
=0; i<
num
; i++) {

391 
dít
 = 
	`£mfs_dúíåy¨øy_gë
(
£mfs
->
£mfs_díts
, 
i
);

392 i‡(
dít
 =
NULL
) {

393 i‡(
em±y
 =
num
) {

394 
em±y
 = 
i
;

398 i‡(!
	`°rcmp
(
dít
->
£md_«me
, 
«me
)) {

400 i‡(
ex˛
) {

401 
	`lock_ªÀa£
(
£mfs
->
£mfs_dúlock
);

402  
EEXIST
;

404 
ªsu…
 = 
	`£mfs_gëvnode
(
£mfs
, 
dít
->
£md_£mnum
,

405 
ªsu…vn
);

406 
	`lock_ªÀa£
(
£mfs
->
£mfs_dúlock
);

407  
ªsu…
;

412 
£m
 = 
	`£mfs_£m_¸óã
(
«me
);

413 i‡(
£m
 =
NULL
) {

414 
ªsu…
 = 
ENOMEM
;

415 
Áû_u∆ock
;

417 
	`lock_acquúe
(
£mfs
->
£mfs_èbÀlock
);

418 
ªsu…
 = 
	`£mfs_£m_ö£π
(
£mfs
, 
£m
, &
£mnum
);

419 
	`lock_ªÀa£
(
£mfs
->
£mfs_èbÀlock
);

420 i‡(
ªsu…
) {

421 
Áû_un¸óã
;

424 
dít
 = 
	`£mfs_dúíåy_¸óã
(
«me
, 
£mnum
);

425 i‡(
dít
 =
NULL
) {

426 
Áû_unö£π
;

429 i‡(
em±y
 < 
num
) {

430 
	`£mfs_dúíåy¨øy_£t
(
£mfs
->
£mfs_díts
, 
em±y
, 
dít
);

433 
ªsu…
 = 
	`£mfs_dúíåy¨øy_add
(
£mfs
->
£mfs_díts
, 
dít
,

434 &
em±y
);

435 i‡(
ªsu…
) {

436 
Áû_undít
;

440 
ªsu…
 = 
	`£mfs_gëvnode
(
£mfs
, 
£mnum
, 
ªsu…vn
);

441 i‡(
ªsu…
) {

442 
Áû_undú
;

445 
£m
->
£ms_löked
 = 
åue
;

446 
	`lock_ªÀa£
(
£mfs
->
£mfs_dúlock
);

449 
Áû_undú
:

450 
	`£mfs_dúíåy¨øy_£t
(
£mfs
->
£mfs_díts
, 
em±y
, 
NULL
);

451 
Áû_undít
:

452 
	`£mfs_dúíåy_de°roy
(
dít
);

453 
Áû_unö£π
:

454 
	`lock_acquúe
(
£mfs
->
£mfs_èbÀlock
);

455 
	`£mfs_£m¨øy_£t
(
£mfs
->
£mfs_£ms
, 
£mnum
, 
NULL
);

456 
	`lock_ªÀa£
(
£mfs
->
£mfs_èbÀlock
);

457 
Áû_un¸óã
:

458 
	`£mfs_£m_de°roy
(
£m
);

459 
Áû_u∆ock
:

460 
	`lock_ªÀa£
(
£mfs
->
£mfs_dúlock
);

461  
ªsu…
;

462 
	}
}

470 
	$£mfs_ªmove
(
vnode
 *
dúvn
, c⁄° *
«me
)

472 
£mfs_vnode
 *
dú£mv
 = 
dúvn
->
vn_d©a
;

473 
£mfs
 *£mf†
dú£mv
->
£mv_£mfs
;

474 
£mfs_dúíåy
 *
dít
;

475 
£mfs_£m
 *
£m
;

476 
i
, 
num
;

477 
ªsu…
;

479 i‡(!
	`°rcmp
(
«me
, ".") || !strcmp(name, "..")) {

480  
EINVAL
;

483 
	`lock_acquúe
(
£mfs
->
£mfs_dúlock
);

484 
num
 = 
	`£mfs_dúíåy¨øy_num
(
£mfs
->
£mfs_díts
);

485 
i
=0; i<
num
; i++) {

486 
dít
 = 
	`£mfs_dúíåy¨øy_gë
(
£mfs
->
£mfs_díts
, 
i
);

487 i‡(
dít
 =
NULL
) {

490 i‡(!
	`°rcmp
(
«me
, 
dít
->
£md_«me
)) {

492 
£m
 = 
	`£mfs_gë£mbynum
(
£mfs
, 
dít
->
£md_£mnum
);

493 
	`lock_acquúe
(
£m
->
£ms_lock
);

494 
	`KASSERT
(
£m
->
£ms_löked
);

495 
£m
->
£ms_löked
 = 
Ál£
;

496 i‡(
£m
->
£ms_hasvnode
 =
Ál£
) {

497 
	`lock_acquúe
(
£mfs
->
£mfs_èbÀlock
);

498 
	`£mfs_£m¨øy_£t
(
£mfs
->
£mfs_£ms
,

499 
dít
->
£md_£mnum
, 
NULL
);

500 
	`lock_ªÀa£
(
£mfs
->
£mfs_èbÀlock
);

501 
	`lock_ªÀa£
(
£m
->
£ms_lock
);

502 
	`£mfs_£m_de°roy
(
£m
);

505 
	`lock_ªÀa£
(
£m
->
£ms_lock
);

507 
	`£mfs_dúíåy¨øy_£t
(
£mfs
->
£mfs_díts
, 
i
, 
NULL
);

508 
	`£mfs_dúíåy_de°roy
(
dít
);

509 
ªsu…
 = 0;

510 
out
;

513 
ªsu…
 = 
ENOENT
;

514 
out
:

515 
	`lock_ªÀa£
(
£mfs
->
£mfs_dúlock
);

516  
ªsu…
;

517 
	}
}

524 
	$£mfs_lookup
(
vnode
 *
dúvn
, *
∑th
, vnodê**
ªsu…vn
)

526 
£mfs_vnode
 *
dú£mv
 = 
dúvn
->
vn_d©a
;

527 
£mfs
 *£mf†
dú£mv
->
£mv_£mfs
;

528 
£mfs_dúíåy
 *
dít
;

529 
i
, 
num
;

530 
ªsu…
;

532 i‡(!
	`°rcmp
(
∑th
, ".") || !strcmp(path, "..")) {

533 
	`VOP_INCREF
(
dúvn
);

534 *
ªsu…vn
 = 
dúvn
;

538 
	`lock_acquúe
(
£mfs
->
£mfs_dúlock
);

539 
num
 = 
	`£mfs_dúíåy¨øy_num
(
£mfs
->
£mfs_díts
);

540 
i
=0; i<
num
; i++) {

541 
dít
 = 
	`£mfs_dúíåy¨øy_gë
(
£mfs
->
£mfs_díts
, 
i
);

542 i‡(
dít
 =
NULL
) {

545 i‡(!
	`°rcmp
(
∑th
, 
dít
->
£md_«me
)) {

546 
ªsu…
 = 
	`£mfs_gëvnode
(
£mfs
, 
dít
->
£md_£mnum
,

547 
ªsu…vn
);

548 
	`lock_ªÀa£
(
£mfs
->
£mfs_dúlock
);

549  
ªsu…
;

552 
	`lock_ªÀa£
(
£mfs
->
£mfs_dúlock
);

553  
ENOENT
;

554 
	}
}

562 
	$£mfs_look∑ª¡
(
vnode
 *
dúvn
, *
∑th
,

563 
vnode
 **
ªsu…dúvn
, *
«mebuf
, 
size_t
 
bufmax
)

565 i‡(
	`°æí
(
∑th
)+1 > 
bufmax
) {

566  
ENAMETOOLONG
;

568 
	`°r˝y
(
«mebuf
, 
∑th
);

570 
	`VOP_INCREF
(
dúvn
);

571 *
ªsu…dúvn
 = 
dúvn
;

573 
	}
}

583 
	$£mfs_vnode_de°roy
(
£mfs_vnode
 *
£mv
)

585 
	`vnode_˛ónup
(&
£mv
->
£mv_absvn
);

586 
	`k‰ì
(
£mv
);

587 
	}
}

594 
	$£mfs_ª˛aim
(
vnode
 *
vn
)

596 
£mfs_vnode
 *
£mv
 = 
vn
->
vn_d©a
;

597 
£mfs
 *£mf†
£mv
->
£mv_£mfs
;

598 
vnode
 *
vn2
;

599 
£mfs_£m
 *
£m
;

600 
i
, 
num
;

602 
	`lock_acquúe
(
£mfs
->
£mfs_èbÀlock
);

605 
	`•ölock_acquúe
(&
vn
->
vn_cou¡lock
);

606 i‡(
vn
->
vn_ªfcou¡
 > 1) {

608 
vn
->
vn_ªfcou¡
--;

610 
	`•ölock_ªÀa£
(&
vn
->
vn_cou¡lock
);

611 
	`lock_ªÀa£
(
£mfs
->
£mfs_èbÀlock
);

612  
EBUSY
;

615 
	`•ölock_ªÀa£
(&
vn
->
vn_cou¡lock
);

618 
num
 = 
	`vnodóºay_num
(
£mfs
->
£mfs_vnodes
);

619 
i
=0; i<
num
; i++) {

620 
vn2
 = 
	`vnodóºay_gë
(
£mfs
->
£mfs_vnodes
, 
i
);

621 i‡(
vn2
 =
vn
) {

622 
	`vnodóºay_ªmove
(
£mfs
->
£mfs_vnodes
, 
i
);

627 i‡(
£mv
->
£mv_£mnum
 !
SEMFS_ROOTDIR
) {

628 
£m
 = 
	`£mfs_£m¨øy_gë
(
£mfs
->
£mfs_£ms
, 
£mv
->
£mv_£mnum
);

629 
	`KASSERT
(
£m
->
£ms_hasvnode
);

630 
£m
->
£ms_hasvnode
 = 
Ál£
;

631 i‡(
£m
->
£ms_löked
 =
Ál£
) {

632 
	`£mfs_£m¨øy_£t
(
£mfs
->
£mfs_£ms
,

633 
£mv
->
£mv_£mnum
, 
NULL
);

634 
	`£mfs_£m_de°roy
(
£m
);

639 
	`lock_ªÀa£
(
£mfs
->
£mfs_èbÀlock
);

642 
	`£mfs_vnode_de°roy
(
£mv
);

644 
	}
}

649 c⁄° 
vnode_›s
 
	g£mfs_dú›s
 = {

650 .
v›_magic
 = 
VOP_MAGIC
,

652 .
	gv›_óch›í
 = 
£mfs_óch›í
,

653 .
	gv›_ª˛aim
 = 
£mfs_ª˛aim
,

655 .
	gv›_ªad
 = 
v›Áû_uio_isdú
,

656 .
	gv›_ªadlök
 = 
v›Áû_uio_isdú
,

657 .
	gv›_gëdúíåy
 = 
£mfs_gëdúíåy
,

658 .
	gv›_wrôe
 = 
v›Áû_uio_isdú
,

659 .
	gv›_io˘l
 = 
£mfs_io˘l
,

660 .
	gv›_°©
 = 
£mfs_dú°©
,

661 .
	gv›_gëty≥
 = 
£mfs_gëty≥
,

662 .
	gv›_is£ekabÀ
 = 
£mfs_is£ekabÀ
,

663 .
	gv›_fsync
 = 
£mfs_fsync
,

664 .
	gv›_mm≠
 = 
v›Áû_mm≠_isdú
,

665 .
	gv›_åunˇã
 = 
v›Áû_åunˇã_isdú
,

666 .
	gv›_«mefûe
 = 
£mfs_«mefûe
,

668 .
	gv›_¸ót
 = 
£mfs_¸ót
,

669 .
	gv›_symlök
 = 
v›Áû_symlök_nosys
,

670 .
	gv›_mkdú
 = 
v›Áû_mkdú_nosys
,

671 .
	gv›_lök
 = 
v›Áû_lök_nosys
,

672 .
	gv›_ªmove
 = 
£mfs_ªmove
,

673 .
	gv›_rmdú
 = 
v›Áû_°rög_nosys
,

674 .
	gv›_ª«me
 = 
v›Áû_ª«me_nosys
,

675 .
	gv›_lookup
 = 
£mfs_lookup
,

676 .
	gv›_look∑ª¡
 = 
£mfs_look∑ª¡
,

682 c⁄° 
vnode_›s
 
	g£mfs_£m›s
 = {

683 .
v›_magic
 = 
VOP_MAGIC
,

685 .
	gv›_óch›í
 = 
£mfs_óch›í
,

686 .
	gv›_ª˛aim
 = 
£mfs_ª˛aim
,

688 .
	gv›_ªad
 = 
£mfs_ªad
,

689 .
	gv›_ªadlök
 = 
v›Áû_uio_övÆ
,

690 .
	gv›_gëdúíåy
 = 
v›Áû_uio_nŸdú
,

691 .
	gv›_wrôe
 = 
£mfs_wrôe
,

692 .
	gv›_io˘l
 = 
£mfs_io˘l
,

693 .
	gv›_°©
 = 
£mfs_£m°©
,

694 .
	gv›_gëty≥
 = 
£mfs_gëty≥
,

695 .
	gv›_is£ekabÀ
 = 
£mfs_is£ekabÀ
,

696 .
	gv›_fsync
 = 
£mfs_fsync
,

697 .
	gv›_mm≠
 = 
v›Áû_mm≠_≥rm
,

698 .
	gv›_åunˇã
 = 
£mfs_åunˇã
,

699 .
	gv›_«mefûe
 = 
v›Áû_uio_nŸdú
,

701 .
	gv›_¸ót
 = 
v›Áû_¸ót_nŸdú
,

702 .
	gv›_symlök
 = 
v›Áû_symlök_nŸdú
,

703 .
	gv›_mkdú
 = 
v›Áû_mkdú_nŸdú
,

704 .
	gv›_lök
 = 
v›Áû_lök_nŸdú
,

705 .
	gv›_ªmove
 = 
v›Áû_°rög_nŸdú
,

706 .
	gv›_rmdú
 = 
v›Áû_°rög_nŸdú
,

707 .
	gv›_ª«me
 = 
v›Áû_ª«me_nŸdú
,

708 .
	gv›_lookup
 = 
v›Áû_lookup_nŸdú
,

709 .
	gv›_look∑ª¡
 = 
v›Áû_look∑ª¡_nŸdú
,

716 
£mfs_vnode
 *

717 
	$£mfs_vnode_¸óã
(
£mfs
 *£mfs, 
£mnum
)

719 c⁄° 
vnode_›s
 *
›èbÀ
;

720 
£mfs_vnode
 *
£mv
;

721 
ªsu…
;

723 i‡(
£mnum
 =
SEMFS_ROOTDIR
) {

724 
›èbÀ
 = &
£mfs_dú›s
;

727 
›èbÀ
 = &
£mfs_£m›s
;

730 
£mv
 = 
	`kmÆloc
((*semv));

731 i‡(
£mv
 =
NULL
) {

732  
NULL
;

735 
£mv
->
£mv_£mfs
 = 
£mfs
;

736 
£mv
->
£mv_£mnum
 = 
£mnum
;

738 
ªsu…
 = 
	`vnode_öô
(&
£mv
->
£mv_absvn
, 
›èbÀ
,

739 &
£mfs
->
£mfs_absfs
, 
£mv
);

741 
	`KASSERT
(
ªsu…
 == 0);

743  
£mv
;

744 
	}
}

751 
	$£mfs_gëvnode
(
£mfs
 *£mfs, 
£mnum
, 
vnode
 **
ªt
)

753 
vnode
 *
vn
;

754 
£mfs_vnode
 *
£mv
;

755 
£mfs_£m
 *
£m
;

756 
i
, 
num
;

757 
ªsu…
;

760 
	`lock_acquúe
(
£mfs
->
£mfs_èbÀlock
);

763 
num
 = 
	`vnodóºay_num
(
£mfs
->
£mfs_vnodes
);

764 
i
=0; i<
num
; i++) {

765 
vn
 = 
	`vnodóºay_gë
(
£mfs
->
£mfs_vnodes
, 
i
);

766 
£mv
 = 
vn
->
vn_d©a
;

767 i‡(
£mv
->
£mv_£mnum
 =
£mnum
) {

768 
	`VOP_INCREF
(
vn
);

769 
	`lock_ªÀa£
(
£mfs
->
£mfs_èbÀlock
);

770 *
ªt
 = 
vn
;

776 
£mv
 = 
	`£mfs_vnode_¸óã
(
£mfs
, 
£mnum
);

777 i‡(
£mv
 =
NULL
) {

778 
	`lock_ªÀa£
(
£mfs
->
£mfs_èbÀlock
);

779  
ENOMEM
;

781 
ªsu…
 = 
	`vnodóºay_add
(
£mfs
->
£mfs_vnodes
, &
£mv
->
£mv_absvn
, 
NULL
);

782 i‡(
ªsu…
) {

783 
	`£mfs_vnode_de°roy
(
£mv
);

784 
	`lock_ªÀa£
(
£mfs
->
£mfs_èbÀlock
);

785  
ENOMEM
;

787 i‡(
£mnum
 !
SEMFS_ROOTDIR
) {

788 
£m
 = 
	`£mfs_£m¨øy_gë
(
£mfs
->
£mfs_£ms
, 
£mnum
);

789 
	`KASSERT
(
£m
 !
NULL
);

790 
	`KASSERT
(
£m
->
£ms_hasvnode
 =
Ál£
);

791 
£m
->
£ms_hasvnode
 = 
åue
;

793 
	`lock_ªÀa£
(
£mfs
->
£mfs_èbÀlock
);

795 *
ªt
 = &
£mv
->
£mv_absvn
;

797 
	}
}

	@fs/sfs/sfs_balloc.c

35 
	~<ty≥s.h
>

36 
	~<lib.h
>

37 
	~<bôm≠.h
>

38 
	~<sfs.h
>

39 
	~"sf•riv©e.h
"

46 
	$sfs_˛órblock
(
sfs_fs
 *
sfs
, 
daddr_t
 
block
)

49 
zîos
[
SFS_BLOCKSIZE
];

51  
	`sfs_wrôeblock
(
sfs
, 
block
, 
zîos
, 
SFS_BLOCKSIZE
);

52 
	}
}

58 
	$sfs_bÆloc
(
sfs_fs
 *
sfs
, 
daddr_t
 *
diskblock
)

60 
ªsu…
;

62 
ªsu…
 = 
	`bôm≠_Æloc
(
sfs
->
sfs_‰ìm≠
, 
diskblock
);

63 i‡(
ªsu…
) {

64  
ªsu…
;

66 
sfs
->
sfs_‰ìm≠dúty
 = 
åue
;

68 i‡(*
diskblock
 >
sfs
->
sfs_sb
.
sb_nblocks
) {

69 
	`∑nic
("sfs: bÆloc: invÆid block %u\n", *
diskblock
);

73 
ªsu…
 = 
	`sfs_˛órblock
(
sfs
, *
diskblock
);

74 i‡(
ªsu…
) {

75 
	`bôm≠_unm¨k
(
sfs
->
sfs_‰ìm≠
, *
diskblock
);

77  
ªsu…
;

78 
	}
}

84 
	$sfs_b‰ì
(
sfs_fs
 *
sfs
, 
daddr_t
 
diskblock
)

86 
	`bôm≠_unm¨k
(
sfs
->
sfs_‰ìm≠
, 
diskblock
);

87 
sfs
->
sfs_‰ìm≠dúty
 = 
åue
;

88 
	}
}

94 
	$sfs_bu£d
(
sfs_fs
 *
sfs
, 
daddr_t
 
diskblock
)

96 i‡(
diskblock
 >
sfs
->
sfs_sb
.
sb_nblocks
) {

97 
	`∑nic
("sfs: sfs_bused called on out ofÑange block %u\n",

98 
diskblock
);

100  
	`bôm≠_is£t
(
sfs
->
sfs_‰ìm≠
, 
diskblock
);

101 
	}
}

	@fs/sfs/sfs_bmap.c

35 
	~<ty≥s.h
>

36 
	~<kîn/î∫o.h
>

37 
	~<lib.h
>

38 
	~<vfs.h
>

39 
	~<sfs.h
>

40 
	~"sf•riv©e.h
"

49 
	$sfs_bm≠
(
sfs_vnode
 *
sv
, 
uöt32_t
 
fûeblock
, 
boﬁ
 
dﬂŒoc
,

50 
daddr_t
 *
diskblock
)

59 
uöt32_t
 
idbuf
[
SFS_DBPERIDB
];

61 
sfs_fs
 *
sfs
 = 
sv
->
sv_absvn
.
vn_fs
->
fs_d©a
;

62 
daddr_t
 
block
;

63 
daddr_t
 
idblock
;

64 
uöt32_t
 
idnum
, 
idoff
;

65 
ªsu…
;

67 
	`KASSERT
((
idbuf
)==
SFS_BLOCKSIZE
);

70 
	`KASSERT
(
	`vfs_biglock_do_i_hﬁd
());

75 i‡(
fûeblock
 < 
SFS_NDIRECT
) {

79 
block
 = 
sv
->
sv_i
.
sfi_dúe˘
[
fûeblock
];

84 i‡(
block
==0 && 
dﬂŒoc
) {

85 
ªsu…
 = 
	`sfs_bÆloc
(
sfs
, &
block
);

86 i‡(
ªsu…
) {

87  
ªsu…
;

91 
sv
->
sv_i
.
sfi_dúe˘
[
fûeblock
] = 
block
;

92 
sv
->
sv_dúty
 = 
åue
;

98 i‡(
block
 !0 && !
	`sfs_bu£d
(
sfs
, block)) {

99 
	`∑nic
("sfs: Data block %u (block %u of file %u) "

100 "m¨ked fªe\n", 
block
, 
fûeblock
, 
sv
->
sv_öo
);

102 *
diskblock
 = 
block
;

112 
fûeblock
 -
SFS_NDIRECT
;

115 
idnum
 = 
fûeblock
 / 
SFS_DBPERIDB
;

116 
idoff
 = 
fûeblock
 % 
SFS_DBPERIDB
;

122 i‡(
idnum
 >
SFS_NINDIRECT
) {

123  
EFBIG
;

127 
idblock
 = 
sv
->
sv_i
.
sfi_ödúe˘
;

129 i‡(
idblock
==0 && !
dﬂŒoc
) {

135 *
diskblock
 = 0;

138 i‡(
idblock
==0) {

145 
ªsu…
 = 
	`sfs_bÆloc
(
sfs
, &
idblock
);

146 i‡(
ªsu…
) {

147  
ªsu…
;

151 
sv
->
sv_i
.
sfi_ödúe˘
 = 
idblock
;

154 
sv
->
sv_dúty
 = 
åue
;

157 
	`bzîo
(
idbuf
, (idbuf));

163 
ªsu…
 = 
	`sfs_ªadblock
(
sfs
, 
idblock
, 
idbuf
, (idbuf));

164 i‡(
ªsu…
) {

165  
ªsu…
;

170 
block
 = 
idbuf
[
idoff
];

173 i‡(
block
==0 && 
dﬂŒoc
) {

174 
ªsu…
 = 
	`sfs_bÆloc
(
sfs
, &
block
);

175 i‡(
ªsu…
) {

176  
ªsu…
;

180 
idbuf
[
idoff
] = 
block
;

183 
ªsu…
 = 
	`sfs_wrôeblock
(
sfs
, 
idblock
, 
idbuf
, (idbuf));

184 i‡(
ªsu…
) {

185  
ªsu…
;

190 i‡(
block
 !0 && !
	`sfs_bu£d
(
sfs
, block)) {

191 
	`∑nic
("sfs: Data block %u (block %u of file %u) marked free\n",

192 
block
, 
fûeblock
, 
sv
->
sv_öo
);

194 *
diskblock
 = 
block
;

196 
	}
}

202 
	$sfs_ôrunc
(
sfs_vnode
 *
sv
, 
off_t
 
Àn
)

211 
uöt32_t
 
idbuf
[
SFS_DBPERIDB
];

213 
sfs_fs
 *
sfs
 = 
sv
->
sv_absvn
.
vn_fs
->
fs_d©a
;

216 
uöt32_t
 
blockÀn
 = 
	`DIVROUNDUP
(
Àn
, 
SFS_BLOCKSIZE
);

218 
uöt32_t
 
i
, 
j
;

219 
daddr_t
 
block
, 
idblock
;

220 
uöt32_t
 
ba£block
, 
highblock
;

221 
ªsu…
;

222 
ha¢⁄zîo
, 
iddúty
;

224 
	`KASSERT
((
idbuf
)==
SFS_BLOCKSIZE
);

226 
	`vfs_biglock_acquúe
();

232 
i
=0; i<
SFS_NDIRECT
; i++) {

233 
block
 = 
sv
->
sv_i
.
sfi_dúe˘
[
i
];

234 i‡(
i
 >
blockÀn
 && 
block
 != 0) {

235 
	`sfs_b‰ì
(
sfs
, 
block
);

236 
sv
->
sv_i
.
sfi_dúe˘
[
i
] = 0;

237 
sv
->
sv_dúty
 = 
åue
;

242 
idblock
 = 
sv
->
sv_i
.
sfi_ödúe˘
;

245 
ba£block
 = 
SFS_NDIRECT
;

248 
highblock
 = 
ba£block
 + 
SFS_DBPERIDB
 - 1;

250 i‡(
blockÀn
 < 
highblock
 && 
idblock
 != 0) {

254 
ªsu…
 = 
	`sfs_ªadblock
(
sfs
, 
idblock
, 
idbuf
, (idbuf));

255 i‡(
ªsu…
) {

256 
	`vfs_biglock_ªÀa£
();

257  
ªsu…
;

260 
ha¢⁄zîo
 = 0;

261 
iddúty
 = 0;

262 
j
=0; j<
SFS_DBPERIDB
; j++) {

264 i‡(
blockÀn
 < 
ba£block
+
j
 && 
idbuf
[j] != 0) {

265 
	`sfs_b‰ì
(
sfs
, 
idbuf
[
j
]);

266 
idbuf
[
j
] = 0;

267 
iddúty
 = 1;

270 i‡(
idbuf
[
j
]!=0) {

271 
ha¢⁄zîo
=1;

275 i‡(!
ha¢⁄zîo
) {

277 
	`sfs_b‰ì
(
sfs
, 
idblock
);

278 
sv
->
sv_i
.
sfi_ödúe˘
 = 0;

279 
sv
->
sv_dúty
 = 
åue
;

281 i‡(
iddúty
) {

283 
ªsu…
 = 
	`sfs_wrôeblock
(
sfs
, 
idblock
, 
idbuf
,

284 (
idbuf
));

285 i‡(
ªsu…
) {

286 
	`vfs_biglock_ªÀa£
();

287  
ªsu…
;

293 
sv
->
sv_i
.
sfi_size
 = 
Àn
;

296 
sv
->
sv_dúty
 = 
åue
;

298 
	`vfs_biglock_ªÀa£
();

300 
	}
}

	@fs/sfs/sfs_dir.c

35 
	~<ty≥s.h
>

36 
	~<kîn/î∫o.h
>

37 
	~<lib.h
>

38 
	~<vfs.h
>

39 
	~<sfs.h
>

40 
	~"sf•riv©e.h
"

48 
	$sfs_ªaddú
(
sfs_vnode
 *
sv
, 
¶Ÿ
, 
sfs_dúíåy
 *
sd
)

50 
off_t
 
a˘uÆpos
;

53 
a˘uÆpos
 = 
¶Ÿ
 * (
sfs_dúíåy
);

55  
	`sfs_mëaio
(
sv
, 
a˘uÆpos
, 
sd
, (*sd), 
UIO_READ
);

56 
	}
}

64 
	$sfs_wrôedú
(
sfs_vnode
 *
sv
, 
¶Ÿ
, 
sfs_dúíåy
 *
sd
)

66 
off_t
 
a˘uÆpos
;

69 
	`KASSERT
(
¶Ÿ
>=0);

70 
a˘uÆpos
 = 
¶Ÿ
 * (
sfs_dúíåy
);

72  
	`sfs_mëaio
(
sv
, 
a˘uÆpos
, 
sd
, (*sd), 
UIO_WRITE
);

73 
	}
}

82 
	$sfs_dú_√¡rõs
(
sfs_vnode
 *
sv
)

84 
off_t
 
size
;

86 
	`KASSERT
(
sv
->
sv_i
.
sfi_ty≥
 =
SFS_TYPE_DIR
);

88 
size
 = 
sv
->
sv_i
.
sfi_size
;

89 i‡(
size
 % (
sfs_dúíåy
) != 0) {

90 
	`∑nic
("sfs: directory %u: Invalid size %llu\n",

91 
sv
->
sv_öo
, 
size
);

94  
size
 / (
sfs_dúíåy
);

95 
	}
}

103 
	$sfs_dú_föd«me
(
sfs_vnode
 *
sv
, c⁄° *
«me
,

104 
uöt32_t
 *
öo
, *
¶Ÿ
, *
em±y¶Ÿ
)

106 
sfs_dúíåy
 
tsd
;

107 
found
, 
√¡rõs
, 
i
, 
ªsu…
;

109 
√¡rõs
 = 
	`sfs_dú_√¡rõs
(
sv
);

112 
found
 = 0;

113 
i
=0; i<
√¡rõs
; i++) {

116 
ªsu…
 = 
	`sfs_ªaddú
(
sv
, 
i
, &
tsd
);

117 i‡(
ªsu…
) {

118  
ªsu…
;

120 i‡(
tsd
.
sfd_öo
 =
SFS_NOINO
) {

122 i‡(
em±y¶Ÿ
 !
NULL
) {

123 *
em±y¶Ÿ
 = 
i
;

128 
tsd
.
sfd_«me
[(tsd.sfd_name)-1] = 0;

129 i‡(!
	`°rcmp
(
tsd
.
sfd_«me
, 
«me
)) {

132 
	`KASSERT
(
found
==0);

134 
found
 = 1;

135 i‡(
¶Ÿ
 !
NULL
) {

136 *
¶Ÿ
 = 
i
;

138 i‡(
öo
 !
NULL
) {

139 *
öo
 = 
tsd
.
sfd_öo
;

145  
found
 ? 0 : 
ENOENT
;

146 
	}
}

153 
	$sfs_dú_lök
(
sfs_vnode
 *
sv
, c⁄° *
«me
, 
uöt32_t
 
öo
, *
¶Ÿ
)

155 
em±y¶Ÿ
 = -1;

156 
ªsu…
;

157 
sfs_dúíåy
 
sd
;

160 
ªsu…
 = 
	`sfs_dú_föd«me
(
sv
, 
«me
, 
NULL
, NULL, &
em±y¶Ÿ
);

161 i‡(
ªsu…
!=0 &&Ñesu…!=
ENOENT
) {

162  
ªsu…
;

164 i‡(
ªsu…
==0) {

165  
EEXIST
;

168 i‡(
	`°æí
(
«me
)+1 > (
sd
.
sfd_«me
)) {

169  
ENAMETOOLONG
;

173 i‡(
em±y¶Ÿ
 < 0) {

174 
em±y¶Ÿ
 = 
	`sfs_dú_√¡rõs
(
sv
);

178 
	`bzîo
(&
sd
, (sd));

179 
sd
.
sfd_öo
 = 
öo
;

180 
	`°r˝y
(
sd
.
sfd_«me
, 
«me
);

183 i‡(
¶Ÿ
) {

184 *
¶Ÿ
 = 
em±y¶Ÿ
;

188  
	`sfs_wrôedú
(
sv
, 
em±y¶Ÿ
, &
sd
);

189 
	}
}

195 
	$sfs_dú_u∆ök
(
sfs_vnode
 *
sv
, 
¶Ÿ
)

197 
sfs_dúíåy
 
sd
;

200 
	`bzîo
(&
sd
, (sd));

201 
sd
.
sfd_öo
 = 
SFS_NOINO
;

204  
	`sfs_wrôedú
(
sv
, 
¶Ÿ
, &
sd
);

205 
	}
}

212 
	$sfs_look⁄˚
(
sfs_vnode
 *
sv
, c⁄° *
«me
,

213 
sfs_vnode
 **
ªt
,

214 *
¶Ÿ
)

216 
sfs_fs
 *
sfs
 = 
sv
->
sv_absvn
.
vn_fs
->
fs_d©a
;

217 
uöt32_t
 
öo
;

218 
ªsu…
;

220 
ªsu…
 = 
	`sfs_dú_föd«me
(
sv
, 
«me
, &
öo
, 
¶Ÿ
, 
NULL
);

221 i‡(
ªsu…
) {

222  
ªsu…
;

225 
ªsu…
 = 
	`sfs_lﬂdvnode
(
sfs
, 
öo
, 
SFS_TYPE_INVAL
, 
ªt
);

226 i‡(
ªsu…
) {

227  
ªsu…
;

230 i‡((*
ªt
)->
sv_i
.
sfi_lökcou¡
 == 0) {

231 
	`∑nic
("sfs:Çame %s (inode %u) in dir %u hasÜinkcount 0\n",

232 
«me
, (*
ªt
)->
sv_öo
, 
sv
->sv_ino);

236 
	}
}

	@fs/sfs/sfs_fsops.c

36 
	~<ty≥s.h
>

37 
	~<kîn/î∫o.h
>

38 
	~<lib.h
>

39 
	~<¨øy.h
>

40 
	~<bôm≠.h
>

41 
	~<uio.h
>

42 
	~<vfs.h
>

43 
	~<devi˚.h
>

44 
	~<sfs.h
>

45 
	~"sf•riv©e.h
"

49 
	#SFS_FS_NBLOCKS
(
sfs
Ë((sfs)->
sfs_sb
.
sb_nblocks
)

	)

50 
	#SFS_FS_FREEMAPBITS
(
sfs
Ë
	`SFS_FREEMAPBITS
(
	`SFS_FS_NBLOCKS
(sfs))

	)

51 
	#SFS_FS_FREEMAPBLOCKS
(
sfs
Ë
	`SFS_FREEMAPBLOCKS
(
	`SFS_FS_NBLOCKS
(sfs))

	)

72 
	$sfs_‰ìm≠io
(
sfs_fs
 *
sfs
, 
uio_rw
 
rw
)

74 
uöt32_t
 
j
, 
‰ìm≠blocks
;

75 *
‰ìm≠d©a
;

76 
ªsu…
;

79 
‰ìm≠blocks
 = 
	`SFS_FS_FREEMAPBLOCKS
(
sfs
);

82 
‰ìm≠d©a
 = 
	`bôm≠_gëd©a
(
sfs
->
sfs_‰ìm≠
);

85 
j
=0; j<
‰ìm≠blocks
; j++) {

88 *
±r
 = 
‰ìm≠d©a
 + 
j
*
SFS_BLOCKSIZE
;

91 i‡(
rw
 =
UIO_READ
) {

92 
ªsu…
 = 
	`sfs_ªadblock
(
sfs
, 
SFS_FREEMAP_START
+
j
, 
±r
,

93 
SFS_BLOCKSIZE
);

96 
ªsu…
 = 
	`sfs_wrôeblock
(
sfs
, 
SFS_FREEMAP_START
+
j
, 
±r
,

97 
SFS_BLOCKSIZE
);

101 i‡(
ªsu…
) {

102  
ªsu…
;

106 
	}
}

114 
	$sfs_sync
(
fs
 *fs)

116 
sfs_fs
 *
sfs
;

117 
i
, 
num
;

118 
ªsu…
;

120 
	`vfs_biglock_acquúe
();

152 
sfs
 = 
fs
->
fs_d©a
;

155 
num
 = 
	`vnodóºay_num
(
sfs
->
sfs_vnodes
);

156 
i
=0; i<
num
; i++) {

157 
vnode
 *
v
 = 
	`vnodóºay_gë
(
sfs
->
sfs_vnodes
, 
i
);

158 
	`VOP_FSYNC
(
v
);

162 i‡(
sfs
->
sfs_‰ìm≠dúty
) {

163 
ªsu…
 = 
	`sfs_‰ìm≠io
(
sfs
, 
UIO_WRITE
);

164 i‡(
ªsu…
) {

165 
	`vfs_biglock_ªÀa£
();

166  
ªsu…
;

168 
sfs
->
sfs_‰ìm≠dúty
 = 
Ál£
;

172 i‡(
sfs
->
sfs_su≥rdúty
) {

173 
ªsu…
 = 
	`sfs_wrôeblock
(
sfs
, 
SFS_SUPER_BLOCK
, &sfs->
sfs_sb
,

174 (
sfs
->
sfs_sb
));

175 i‡(
ªsu…
) {

176 
	`vfs_biglock_ªÀa£
();

177  
ªsu…
;

179 
sfs
->
sfs_su≥rdúty
 = 
Ál£
;

182 
	`vfs_biglock_ªÀa£
();

184 
	}
}

193 
	$sfs_gëvﬁ«me
(
fs
 *fs)

195 
sfs_fs
 *
sfs
 = 
fs
->
fs_d©a
;

196 c⁄° *
ªt
;

198 
	`vfs_biglock_acquúe
();

199 
ªt
 = 
sfs
->
sfs_sb
.
sb_vﬁ«me
;

200 
	`vfs_biglock_ªÀa£
();

202  
ªt
;

203 
	}
}

210 
	$sfs_fs_de°roy
(
sfs_fs
 *
sfs
)

212 i‡(
sfs
->
sfs_‰ìm≠
 !
NULL
) {

213 
	`bôm≠_de°roy
(
sfs
->
sfs_‰ìm≠
);

215 
	`vnodóºay_de°roy
(
sfs
->
sfs_vnodes
);

216 
	`KASSERT
(
sfs
->
sfs_devi˚
 =
NULL
);

217 
	`k‰ì
(
sfs
);

218 
	}
}

227 
	$sfs_unmou¡
(
fs
 *fs)

229 
sfs_fs
 *
sfs
 = 
fs
->
fs_d©a
;

231 
	`vfs_biglock_acquúe
();

234 i‡(
	`vnodóºay_num
(
sfs
->
sfs_vnodes
) > 0) {

235 
	`vfs_biglock_ªÀa£
();

236  
EBUSY
;

240 
	`KASSERT
(
sfs
->
sfs_su≥rdúty
 =
Ál£
);

241 
	`KASSERT
(
sfs
->
sfs_‰ìm≠dúty
 =
Ál£
);

244 
sfs
->
sfs_devi˚
 = 
NULL
;

247 
	`sfs_fs_de°roy
(
sfs
);

250 
	`vfs_biglock_ªÀa£
();

252 
	}
}

257 c⁄° 
fs_›s
 
	gsfs_fs›s
 = {

258 .
fs›_sync
 = 
sfs_sync
,

259 .
	gfs›_gëvﬁ«me
 = 
sfs_gëvﬁ«me
,

260 .
	gfs›_gëroŸ
 = 
sfs_gëroŸ
,

261 .
	gfs›_unmou¡
 = 
sfs_unmou¡
,

270 
sfs_fs
 *

271 
	$sfs_fs_¸óã
()

273 
sfs_fs
 *
sfs
;

278 
	`COMPILE_ASSERT
((
sfs_su≥rblock
)==
SFS_BLOCKSIZE
);

279 
	`COMPILE_ASSERT
((
sfs_döode
)==
SFS_BLOCKSIZE
);

280 
	`COMPILE_ASSERT
(
SFS_BLOCKSIZE
 % (
sfs_dúíåy
) == 0);

283 
sfs
 = 
	`kmÆloc
((
sfs_fs
));

284 i‡(
sfs
==
NULL
) {

285 
Áû
;

293 
sfs
->
sfs_absfs
.
fs_d©a
 = sfs;

294 
sfs
->
sfs_absfs
.
fs_›s
 = &
sfs_fs›s
;

298 
sfs
->
sfs_su≥rdúty
 = 
Ál£
;

301 
sfs
->
sfs_devi˚
 = 
NULL
;

304 
sfs
->
sfs_vnodes
 = 
	`vnodóºay_¸óã
();

305 i‡(
sfs
->
sfs_vnodes
 =
NULL
) {

306 
˛ónup_obje˘
;

310 
sfs
->
sfs_‰ìm≠
 = 
NULL
;

311 
sfs
->
sfs_‰ìm≠dúty
 = 
Ál£
;

313  
sfs
;

315 
˛ónup_obje˘
:

316 
	`k‰ì
(
sfs
);

317 
Áû
:

318  
NULL
;

319 
	}
}

336 
	$sfs_domou¡
(*
›ti⁄s
, 
devi˚
 *
dev
, 
fs
 **
ªt
)

338 
ªsu…
;

339 
sfs_fs
 *
sfs
;

341 
	`vfs_biglock_acquúe
();

344 ()
›ti⁄s
;

354 i‡(
dev
->
d_blocksize
 !
SFS_BLOCKSIZE
) {

355 
	`vfs_biglock_ªÀa£
();

356 
	`k¥ötf
("sfs: Cannot mount on device with blocksize %zu\n",

357 
dev
->
d_blocksize
);

358  
ENXIO
;

361 
sfs
 = 
	`sfs_fs_¸óã
();

362 i‡(
sfs
 =
NULL
) {

363 
	`vfs_biglock_ªÀa£
();

364  
ENOMEM
;

368 
sfs
->
sfs_devi˚
 = 
dev
;

371 
ªsu…
 = 
	`sfs_ªadblock
(
sfs
, 
SFS_SUPER_BLOCK
, &sfs->
sfs_sb
,

372 (
sfs
->
sfs_sb
));

373 i‡(
ªsu…
) {

374 
	`sfs_fs_de°roy
(
sfs
);

375 
	`vfs_biglock_ªÀa£
();

376  
ªsu…
;

381 i‡(
sfs
->
sfs_sb
.
sb_magic
 !
SFS_MAGIC
) {

382 
	`k¥ötf
("sfs: Wrong magicÇumber in superblock "

384 
sfs
->
sfs_sb
.
sb_magic
,

385 
SFS_MAGIC
);

386 
	`sfs_fs_de°roy
(
sfs
);

387 
	`vfs_biglock_ªÀa£
();

388  
EINVAL
;

391 i‡(
sfs
->
sfs_sb
.
sb_nblocks
 > 
dev
->
d_blocks
) {

392 
	`k¥ötf
("sfs: warning - fs has %u blocks, device has %u\n",

393 
sfs
->
sfs_sb
.
sb_nblocks
, 
dev
->
d_blocks
);

397 
sfs
->
sfs_sb
.
sb_vﬁ«me
[(sfs->sfs_sb.sb_volname)-1] = 0;

400 
sfs
->
sfs_‰ìm≠
 = 
	`bôm≠_¸óã
(
	`SFS_FS_FREEMAPBITS
(sfs));

401 i‡(
sfs
->
sfs_‰ìm≠
 =
NULL
) {

402 
	`sfs_fs_de°roy
(
sfs
);

403 
	`vfs_biglock_ªÀa£
();

404  
ENOMEM
;

406 
ªsu…
 = 
	`sfs_‰ìm≠io
(
sfs
, 
UIO_READ
);

407 i‡(
ªsu…
) {

408 
	`sfs_fs_de°roy
(
sfs
);

409 
	`vfs_biglock_ªÀa£
();

410  
ªsu…
;

414 *
ªt
 = &
sfs
->
sfs_absfs
;

416 
	`vfs_biglock_ªÀa£
();

418 
	}
}

424 
	$sfs_mou¡
(c⁄° *
devi˚
)

426  
	`vfs_mou¡
(
devi˚
, 
NULL
, 
sfs_domou¡
);

427 
	}
}

	@fs/sfs/sfs_inode.c

35 
	~<ty≥s.h
>

36 
	~<kîn/î∫o.h
>

37 
	~<lib.h
>

38 
	~<vfs.h
>

39 
	~<sfs.h
>

40 
	~"sf•riv©e.h
"

47 
	$sfs_sync_öode
(
sfs_vnode
 *
sv
)

49 
sfs_fs
 *
sfs
 = 
sv
->
sv_absvn
.
vn_fs
->
fs_d©a
;

50 
ªsu…
;

52 i‡(
sv
->
sv_dúty
) {

53 
ªsu…
 = 
	`sfs_wrôeblock
(
sfs
, 
sv
->
sv_öo
, &sv->
sv_i
,

54 (
sv
->
sv_i
));

55 i‡(
ªsu…
) {

56  
ªsu…
;

58 
sv
->
sv_dúty
 = 
Ál£
;

61 
	}
}

69 
	$sfs_ª˛aim
(
vnode
 *
v
)

71 
sfs_vnode
 *
sv
 = 
v
->
vn_d©a
;

72 
sfs_fs
 *
sfs
 = 
v
->
vn_fs
->
fs_d©a
;

73 
ix
, 
i
, 
num
;

74 
ªsu…
;

76 
	`vfs_biglock_acquúe
();

83 
	`•ölock_acquúe
(&
v
->
vn_cou¡lock
);

84 i‡(
v
->
vn_ªfcou¡
 != 1) {

87 
	`KASSERT
(
v
->
vn_ªfcou¡
>1);

88 
v
->
vn_ªfcou¡
--;

90 
	`•ölock_ªÀa£
(&
v
->
vn_cou¡lock
);

91 
	`vfs_biglock_ªÀa£
();

92  
EBUSY
;

94 
	`•ölock_ªÀa£
(&
v
->
vn_cou¡lock
);

97 i‡(
sv
->
sv_i
.
sfi_lökcou¡
 == 0) {

98 
ªsu…
 = 
	`sfs_ôrunc
(
sv
, 0);

99 i‡(
ªsu…
) {

100 
	`vfs_biglock_ªÀa£
();

101  
ªsu…
;

106 
ªsu…
 = 
	`sfs_sync_öode
(
sv
);

107 i‡(
ªsu…
) {

108 
	`vfs_biglock_ªÀa£
();

109  
ªsu…
;

113 i‡(
sv
->
sv_i
.
sfi_lökcou¡
==0) {

114 
	`sfs_b‰ì
(
sfs
, 
sv
->
sv_öo
);

118 
num
 = 
	`vnodóºay_num
(
sfs
->
sfs_vnodes
);

119 
ix
 = 
num
;

120 
i
=0; i<
num
; i++) {

121 
vnode
 *
v2
 = 
	`vnodóºay_gë
(
sfs
->
sfs_vnodes
, 
i
);

122 
sfs_vnode
 *
sv2
 = 
v2
->
vn_d©a
;

123 i‡(
sv2
 =
sv
) {

124 
ix
 = 
i
;

128 i‡(
ix
 =
num
) {

129 
	`∑nic
("sfs:Ñeclaim vnode %uÇot in vnodeÖool\n",

130 
sv
->
sv_öo
);

132 
	`vnodóºay_ªmove
(
sfs
->
sfs_vnodes
, 
ix
);

134 
	`vnode_˛ónup
(&
sv
->
sv_absvn
);

136 
	`vfs_biglock_ªÀa£
();

139 
	`k‰ì
(
sv
);

143 
	}
}

150 
	$sfs_lﬂdvnode
(
sfs_fs
 *
sfs
, 
uöt32_t
 
öo
, 
f‹˚ty≥
,

151 
sfs_vnode
 **
ªt
)

153 
vnode
 *
v
;

154 
sfs_vnode
 *
sv
;

155 c⁄° 
vnode_›s
 *
›s
;

156 
i
, 
num
;

157 
ªsu…
;

160 
num
 = 
	`vnodóºay_num
(
sfs
->
sfs_vnodes
);

163 
i
=0; i<
num
; i++) {

164 
v
 = 
	`vnodóºay_gë
(
sfs
->
sfs_vnodes
, 
i
);

165 
sv
 = 
v
->
vn_d©a
;

168 i‡(!
	`sfs_bu£d
(
sfs
, 
sv
->
sv_öo
)) {

169 
	`∑nic
("sfs: Found inode %u in unallocated block\n",

170 
sv
->
sv_öo
);

173 i‡(
sv
->
sv_öo
==
öo
) {

177 
	`KASSERT
(
f‹˚ty≥
==
SFS_TYPE_INVAL
);

179 
	`VOP_INCREF
(&
sv
->
sv_absvn
);

180 *
ªt
 = 
sv
;

187 
sv
 = 
	`kmÆloc
((
sfs_vnode
));

188 i‡(
sv
==
NULL
) {

189  
ENOMEM
;

193 i‡(!
	`sfs_bu£d
(
sfs
, 
öo
)) {

194 
	`∑nic
("sfs: TriedÅoÜoad inode %u from unallocated block\n",

195 
öo
);

199 
ªsu…
 = 
	`sfs_ªadblock
(
sfs
, 
öo
, &
sv
->
sv_i
, (sv->sv_i));

200 i‡(
ªsu…
) {

201 
	`k‰ì
(
sv
);

202  
ªsu…
;

206 
sv
->
sv_dúty
 = 
Ál£
;

213 i‡(
f‹˚ty≥
 !
SFS_TYPE_INVAL
) {

214 
	`KASSERT
(
sv
->
sv_i
.
sfi_ty≥
 =
SFS_TYPE_INVAL
);

215 
sv
->
sv_i
.
sfi_ty≥
 = 
f‹˚ty≥
;

216 
sv
->
sv_dúty
 = 
åue
;

222 
sv
->
sv_i
.
sfi_ty≥
) {

223 
SFS_TYPE_FILE
:

224 
›s
 = &
sfs_fûe›s
;

226 
SFS_TYPE_DIR
:

227 
›s
 = &
sfs_dú›s
;

230 
	`∑nic
("sfs:Üoadvnode: Invalid inodeÅype "

232 
öo
, 
sv
->
sv_i
.
sfi_ty≥
);

236 
ªsu…
 = 
	`vnode_öô
(&
sv
->
sv_absvn
, 
›s
, &
sfs
->
sfs_absfs
, sv);

237 i‡(
ªsu…
) {

238 
	`k‰ì
(
sv
);

239  
ªsu…
;

243 
sv
->
sv_öo
 = 
öo
;

246 
ªsu…
 = 
	`vnodóºay_add
(
sfs
->
sfs_vnodes
, &
sv
->
sv_absvn
, 
NULL
);

247 i‡(
ªsu…
) {

248 
	`vnode_˛ónup
(&
sv
->
sv_absvn
);

249 
	`k‰ì
(
sv
);

250  
ªsu…
;

254 *
ªt
 = 
sv
;

256 
	}
}

262 
	$sfs_makeobj
(
sfs_fs
 *
sfs
, 
ty≥
, 
sfs_vnode
 **
ªt
)

264 
uöt32_t
 
öo
;

265 
ªsu…
;

272 
ªsu…
 = 
	`sfs_bÆloc
(
sfs
, &
öo
);

273 i‡(
ªsu…
) {

274  
ªsu…
;

281 
ªsu…
 = 
	`sfs_lﬂdvnode
(
sfs
, 
öo
, 
ty≥
, 
ªt
);

282 i‡(
ªsu…
) {

283 
	`sfs_b‰ì
(
sfs
, 
öo
);

285  
ªsu…
;

286 
	}
}

292 
vnode
 *

293 
	$sfs_gëroŸ
(
fs
 *fs)

295 
sfs_fs
 *
sfs
 = 
fs
->
fs_d©a
;

296 
sfs_vnode
 *
sv
;

297 
ªsu…
;

299 
	`vfs_biglock_acquúe
();

301 
ªsu…
 = 
	`sfs_lﬂdvnode
(
sfs
, 
SFS_ROOTDIR_INO
, 
SFS_TYPE_INVAL
, &
sv
);

302 i‡(
ªsu…
) {

303 
	`∑nic
("sfs: getroot: CannotÜoadÑoot vnode\n");

306 i‡(
sv
->
sv_i
.
sfi_ty≥
 !
SFS_TYPE_DIR
) {

307 
	`∑nic
("sfs: getroot:Çot directory (type %u)\n",

308 
sv
->
sv_i
.
sfi_ty≥
);

311 
	`vfs_biglock_ªÀa£
();

313  &
sv
->
sv_absvn
;

314 
	}
}

	@fs/sfs/sfs_io.c

35 
	~<ty≥s.h
>

36 
	~<kîn/î∫o.h
>

37 
	~<lib.h
>

38 
	~<uio.h
>

39 
	~<vfs.h
>

40 
	~<devi˚.h
>

41 
	~<sfs.h
>

42 
	~"sf•riv©e.h
"

60 
	$sfs_rwblock
(
sfs_fs
 *
sfs
, 
uio
 *uio)

62 
ªsu…
;

63 
åõs
=0;

65 
	`KASSERT
(
	`vfs_biglock_do_i_hﬁd
());

67 
	`DEBUG
(
DB_SFS
, "sfs: %s %llu\n",

68 
uio
->
uio_rw
 =
UIO_READ
 ? "read" : "write",

69 
uio
->
uio_off£t
 / 
SFS_BLOCKSIZE
);

71 
ªåy
:

72 
ªsu…
 = 
	`DEVOP_IO
(
sfs
->
sfs_devi˚
, 
uio
);

73 i‡(
ªsu…
 =
EINVAL
) {

79 
	`∑nic
("sfs: DEVOP_IOÑeturned EINVAL\n");

81 i‡(
ªsu…
 =
EIO
) {

82 i‡(
åõs
 == 0) {

83 
åõs
++;

84 
	`k¥ötf
("sfs: block %llu I/OÉrror,Ñetrying\n",

85 
uio
->
uio_off£t
 / 
SFS_BLOCKSIZE
);

86 
ªåy
;

88 i‡(
åõs
 < 10) {

89 
åõs
++;

90 
ªåy
;

93 
	`k¥ötf
("sfs: block %llu I/OÉrror, giving upáfter "

95 
uio
->
uio_off£t
 / 
SFS_BLOCKSIZE
, 
åõs
);

98  
ªsu…
;

99 
	}
}

105 
	$sfs_ªadblock
(
sfs_fs
 *
sfs
, 
daddr_t
 
block
, *
d©a
, 
size_t
 
Àn
)

107 
iovec
 
iov
;

108 
uio
 
ku
;

110 
	`KASSERT
(
Àn
 =
SFS_BLOCKSIZE
);

112 
	`SFSUIO
(&
iov
, &
ku
, 
d©a
, 
block
, 
UIO_READ
);

113  
	`sfs_rwblock
(
sfs
, &
ku
);

114 
	}
}

120 
	$sfs_wrôeblock
(
sfs_fs
 *
sfs
, 
daddr_t
 
block
, *
d©a
, 
size_t
 
Àn
)

122 
iovec
 
iov
;

123 
uio
 
ku
;

125 
	`KASSERT
(
Àn
 =
SFS_BLOCKSIZE
);

127 
	`SFSUIO
(&
iov
, &
ku
, 
d©a
, 
block
, 
UIO_WRITE
);

128  
	`sfs_rwblock
(
sfs
, &
ku
);

129 
	}
}

147 
	$sfs_∑πülio
(
sfs_vnode
 *
sv
, 
uio
 *uio,

148 
uöt32_t
 
skù°¨t
, uöt32_à
Àn
)

157 
iobuf
[
SFS_BLOCKSIZE
];

159 
sfs_fs
 *
sfs
 = 
sv
->
sv_absvn
.
vn_fs
->
fs_d©a
;

160 
daddr_t
 
diskblock
;

161 
uöt32_t
 
fûeblock
;

162 
ªsu…
;

165 
boﬁ
 
dﬂŒoc
 = (
uio
->
uio_rw
==
UIO_WRITE
);

167 
	`KASSERT
(
skù°¨t
 + 
Àn
 <
SFS_BLOCKSIZE
);

170 
	`KASSERT
(
	`vfs_biglock_do_i_hﬁd
());

173 
fûeblock
 = 
uio
->
uio_off£t
 / 
SFS_BLOCKSIZE
;

176 
ªsu…
 = 
	`sfs_bm≠
(
sv
, 
fûeblock
, 
dﬂŒoc
, &
diskblock
);

177 i‡(
ªsu…
) {

178  
ªsu…
;

181 i‡(
diskblock
 == 0) {

186 
	`KASSERT
(
uio
->
uio_rw
 =
UIO_READ
);

187 
	`bzîo
(
iobuf
, (iobuf));

193 
ªsu…
 = 
	`sfs_ªadblock
(
sfs
, 
diskblock
, 
iobuf
, (iobuf));

194 i‡(
ªsu…
) {

195  
ªsu…
;

202 
ªsu…
 = 
	`uiomove
(
iobuf
+
skù°¨t
, 
Àn
, 
uio
);

203 i‡(
ªsu…
) {

204  
ªsu…
;

210 i‡(
uio
->
uio_rw
 =
UIO_WRITE
) {

211 
ªsu…
 = 
	`sfs_wrôeblock
(
sfs
, 
diskblock
, 
iobuf
, (iobuf));

212 i‡(
ªsu…
) {

213  
ªsu…
;

218 
	}
}

225 
	$sfs_blockio
(
sfs_vnode
 *
sv
, 
uio
 *uio)

227 
sfs_fs
 *
sfs
 = 
sv
->
sv_absvn
.
vn_fs
->
fs_d©a
;

228 
daddr_t
 
diskblock
;

229 
uöt32_t
 
fûeblock
;

230 
ªsu…
;

231 
boﬁ
 
dﬂŒoc
 = (
uio
->
uio_rw
==
UIO_WRITE
);

232 
off_t
 
ßveoff
;

233 
off_t
 
diskoff
;

234 
off_t
 
ßvîes
;

235 
off_t
 
diskªs
;

238 
fûeblock
 = 
uio
->
uio_off£t
 / 
SFS_BLOCKSIZE
;

241 
ªsu…
 = 
	`sfs_bm≠
(
sv
, 
fûeblock
, 
dﬂŒoc
, &
diskblock
);

242 i‡(
ªsu…
) {

243  
ªsu…
;

246 i‡(
diskblock
 == 0) {

253 
	`KASSERT
(
uio
->
uio_rw
 =
UIO_READ
);

254  
	`uiomovezîos
(
SFS_BLOCKSIZE
, 
uio
);

261 
ßveoff
 = 
uio
->
uio_off£t
;

262 
diskoff
 = 
diskblock
 * 
SFS_BLOCKSIZE
;

263 
uio
->
uio_off£t
 = 
diskoff
;

268 
	`KASSERT
(
uio
->
uio_ªsid
 >
SFS_BLOCKSIZE
);

269 
ßvîes
 = 
uio
->
uio_ªsid
;

270 
diskªs
 = 
SFS_BLOCKSIZE
;

271 
uio
->
uio_ªsid
 = 
diskªs
;

273 
ªsu…
 = 
	`sfs_rwblock
(
sfs
, 
uio
);

279 
uio
->
uio_off£t
 = (uio->uio_off£à- 
diskoff
Ë+ 
ßveoff
;

280 
uio
->
uio_ªsid
 = (uio->uio_ªsid - 
diskªs
Ë+ 
ßvîes
;

282  
ªsu…
;

283 
	}
}

289 
	$sfs_io
(
sfs_vnode
 *
sv
, 
uio
 *uio)

291 
uöt32_t
 
blkoff
;

292 
uöt32_t
 
nblocks
, 
i
;

293 
ªsu…
 = 0;

294 
uöt32_t
 
‹igªsid
, 
exå¨esid
 = 0;

296 
‹igªsid
 = 
uio
->
uio_ªsid
;

303 i‡(
uio
->
uio_rw
 =
UIO_READ
) {

304 
off_t
 
size
 = 
sv
->
sv_i
.
sfi_size
;

305 
off_t
 
ídpos
 = 
uio
->
uio_off£t
 + uio->
uio_ªsid
;

307 i‡(
uio
->
uio_off£t
 >
size
) {

312 i‡(
ídpos
 > 
size
) {

313 
exå¨esid
 = 
ídpos
 - 
size
;

314 
	`KASSERT
(
uio
->
uio_ªsid
 > 
exå¨esid
);

315 
uio
->
uio_ªsid
 -
exå¨esid
;

322 
blkoff
 = 
uio
->
uio_off£t
 % 
SFS_BLOCKSIZE
;

323 i‡(
blkoff
 != 0) {

325 
uöt32_t
 
skù
 = 
blkoff
;

328 
uöt32_t
 
Àn
 = 
SFS_BLOCKSIZE
 - 
blkoff
;

331 i‡(
Àn
 > 
uio
->
uio_ªsid
) {

332 
Àn
 = 
uio
->
uio_ªsid
;

336 
ªsu…
 = 
	`sfs_∑πülio
(
sv
, 
uio
, 
skù
, 
Àn
);

337 i‡(
ªsu…
) {

338 
out
;

343 i‡(
uio
->
uio_ªsid
==0) {

344 
out
;

350 
	`KASSERT
(
uio
->
uio_off£t
 % 
SFS_BLOCKSIZE
 == 0);

351 
nblocks
 = 
uio
->
uio_ªsid
 / 
SFS_BLOCKSIZE
;

352 
i
=0; i<
nblocks
; i++) {

353 
ªsu…
 = 
	`sfs_blockio
(
sv
, 
uio
);

354 i‡(
ªsu…
) {

355 
out
;

362 
	`KASSERT
(
uio
->
uio_ªsid
 < 
SFS_BLOCKSIZE
);

364 i‡(
uio
->
uio_ªsid
 > 0) {

365 
ªsu…
 = 
	`sfs_∑πülio
(
sv
, 
uio
, 0, uio->
uio_ªsid
);

366 i‡(
ªsu…
) {

367 
out
;

371 
out
:

374 i‡(
uio
->
uio_ªsid
 !
‹igªsid
 &&

375 
uio
->
uio_rw
 =
UIO_WRITE
 &&

376 
uio
->
uio_off£t
 > (
off_t
)
sv
->
sv_i
.
sfi_size
) {

377 
sv
->
sv_i
.
sfi_size
 = 
uio
->
uio_off£t
;

378 
sv
->
sv_dúty
 = 
åue
;

382 
uio
->
uio_ªsid
 +
exå¨esid
;

385  
ªsu…
;

386 
	}
}

403 
	$sfs_mëaio
(
sfs_vnode
 *
sv
, 
off_t
 
a˘uÆpos
, *
d©a
, 
size_t
 
Àn
,

404 
uio_rw
 
rw
)

406 
sfs_fs
 *
sfs
 = 
sv
->
sv_absvn
.
vn_fs
->
fs_d©a
;

407 
off_t
 
ídpos
;

408 
uöt32_t
 
vnblock
;

409 
uöt32_t
 
blockoff£t
;

410 
daddr_t
 
diskblock
;

411 
boﬁ
 
dﬂŒoc
;

412 
ªsu…
;

421 
mëaiobuf
[
SFS_BLOCKSIZE
];

424 
	`KASSERT
(
	`vfs_biglock_do_i_hﬁd
());

427 
vnblock
 = 
a˘uÆpos
 / 
SFS_BLOCKSIZE
;

428 
blockoff£t
 = 
a˘uÆpos
 % 
SFS_BLOCKSIZE
;

431 
dﬂŒoc
 = (
rw
 =
UIO_WRITE
);

432 
ªsu…
 = 
	`sfs_bm≠
(
sv
, 
vnblock
, 
dﬂŒoc
, &
diskblock
);

433 i‡(
ªsu…
) {

434  
ªsu…
;

437 i‡(
diskblock
 == 0) {

439 
	`KASSERT
(
rw
 =
UIO_READ
);

442 
	`bzîo
(
d©a
, 
Àn
);

447 
ªsu…
 = 
	`sfs_ªadblock
(
sfs
, 
diskblock
, 
mëaiobuf
, (metaiobuf));

448 i‡(
ªsu…
) {

449  
ªsu…
;

452 i‡(
rw
 =
UIO_READ
) {

454 
	`mem˝y
(
d©a
, 
mëaiobuf
 + 
blockoff£t
, 
Àn
);

458 
	`mem˝y
(
mëaiobuf
 + 
blockoff£t
, 
d©a
, 
Àn
);

461 
ªsu…
 = 
	`sfs_wrôeblock
(
sfs
, 
diskblock
,

462 
mëaiobuf
, (metaiobuf));

463 i‡(
ªsu…
) {

464  
ªsu…
;

468 
ídpos
 = 
a˘uÆpos
 + 
Àn
;

469 i‡(
ídpos
 > (
off_t
)
sv
->
sv_i
.
sfi_size
) {

470 
sv
->
sv_i
.
sfi_size
 = 
ídpos
;

471 
sv
->
sv_dúty
 = 
åue
;

477 
	}
}

	@fs/sfs/sfs_vnops.c

35 
	~<ty≥s.h
>

36 
	~<kîn/î∫o.h
>

37 
	~<kîn/f˙é.h
>

38 
	~<°©.h
>

39 
	~<lib.h
>

40 
	~<uio.h
>

41 
	~<vfs.h
>

42 
	~<sfs.h
>

43 
	~"sf•riv©e.h
"

53 
	$sfs_óch›í
(
vnode
 *
v
, 
›íÊags
)

63 ()
v
;

64 ()
›íÊags
;

67 
	}
}

75 
	$sfs_óch›ídú
(
vnode
 *
v
, 
›íÊags
)

77 
›íÊags
 & 
O_ACCMODE
) {

78 
O_RDONLY
:

80 
O_WRONLY
:

81 
O_RDWR
:

83  
EISDIR
;

85 i‡(
›íÊags
 & 
O_APPEND
) {

86  
EISDIR
;

89 ()
v
;

91 
	}
}

98 
	$sfs_ªad
(
vnode
 *
v
, 
uio
 *uio)

100 
sfs_vnode
 *
sv
 = 
v
->
vn_d©a
;

101 
ªsu…
;

103 
	`KASSERT
(
uio
->
uio_rw
==
UIO_READ
);

105 
	`vfs_biglock_acquúe
();

106 
ªsu…
 = 
	`sfs_io
(
sv
, 
uio
);

107 
	`vfs_biglock_ªÀa£
();

109  
ªsu…
;

110 
	}
}

117 
	$sfs_wrôe
(
vnode
 *
v
, 
uio
 *uio)

119 
sfs_vnode
 *
sv
 = 
v
->
vn_d©a
;

120 
ªsu…
;

122 
	`KASSERT
(
uio
->
uio_rw
==
UIO_WRITE
);

124 
	`vfs_biglock_acquúe
();

125 
ªsu…
 = 
	`sfs_io
(
sv
, 
uio
);

126 
	`vfs_biglock_ªÀa£
();

128  
ªsu…
;

129 
	}
}

136 
	$sfs_io˘l
(
vnode
 *
v
, 
›
, 
u£Ωå_t
 
d©a
)

142 ()
v
;

143 ()
›
;

144 ()
d©a
;

146  
EINVAL
;

147 
	}
}

154 
	$sfs_°©
(
vnode
 *
v
, 
°©
 *
°©buf
)

156 
sfs_vnode
 *
sv
 = 
v
->
vn_d©a
;

157 
ªsu…
;

160 
	`bzîo
(
°©buf
, (
°©
));

162 
ªsu…
 = 
	`VOP_GETTYPE
(
v
, &
°©buf
->
°_mode
);

163 i‡(
ªsu…
) {

164  
ªsu…
;

167 
°©buf
->
°_size
 = 
sv
->
sv_i
.
sfi_size
;

168 
°©buf
->
°_∆ök
 = 
sv
->
sv_i
.
sfi_lökcou¡
;

171 
°©buf
->
°_blocks
 = 0;

176 
	}
}

183 
	$sfs_gëty≥
(
vnode
 *
v
, 
uöt32_t
 *
ªt
)

185 
sfs_vnode
 *
sv
 = 
v
->
vn_d©a
;

187 
	`vfs_biglock_acquúe
();

189 
sv
->
sv_i
.
sfi_ty≥
) {

190 
SFS_TYPE_FILE
:

191 *
ªt
 = 
S_IFREG
;

192 
	`vfs_biglock_ªÀa£
();

194 
SFS_TYPE_DIR
:

195 *
ªt
 = 
S_IFDIR
;

196 
	`vfs_biglock_ªÀa£
();

199 
	`∑nic
("sfs: gettype: Invalid inodeÅype (inode %u,Åype %u)\n",

200 
sv
->
sv_öo
, sv->
sv_i
.
sfi_ty≥
);

201  
EINVAL
;

202 
	}
}

208 
boﬁ


209 
	$sfs_is£ekabÀ
(
vnode
 *
v
)

211 ()
v
;

212  
åue
;

213 
	}
}

221 
	$sfs_fsync
(
vnode
 *
v
)

223 
sfs_vnode
 *
sv
 = 
v
->
vn_d©a
;

224 
ªsu…
;

226 
	`vfs_biglock_acquúe
();

227 
ªsu…
 = 
	`sfs_sync_öode
(
sv
);

228 
	`vfs_biglock_ªÀa£
();

230  
ªsu…
;

231 
	}
}

238 
	$sfs_mm≠
(
vnode
 *
v
 )

240 ()
v
;

241  
ENOSYS
;

242 
	}
}

249 
	$sfs_åunˇã
(
vnode
 *
v
, 
off_t
 
Àn
)

251 
sfs_vnode
 *
sv
 = 
v
->
vn_d©a
;

253  
	`sfs_ôrunc
(
sv
, 
Àn
);

254 
	}
}

264 
	$sfs_«mefûe
(
vnode
 *
vv
, 
uio
 *uio)

266 
sfs_vnode
 *
sv
 = 
vv
->
vn_d©a
;

267 
	`KASSERT
(
sv
->
sv_öo
 =
SFS_ROOTDIR_INO
);

271 ()
uio
;

274 
	}
}

282 
	$sfs_¸ót
(
vnode
 *
v
, c⁄° *
«me
, 
boﬁ
 
ex˛
, 
mode_t
 
mode
,

283 
vnode
 **
ªt
)

285 
sfs_fs
 *
sfs
 = 
v
->
vn_fs
->
fs_d©a
;

286 
sfs_vnode
 *
sv
 = 
v
->
vn_d©a
;

287 
sfs_vnode
 *
√wguy
;

288 
uöt32_t
 
öo
;

289 
ªsu…
;

291 
	`vfs_biglock_acquúe
();

294 
ªsu…
 = 
	`sfs_dú_föd«me
(
sv
, 
«me
, &
öo
, 
NULL
, NULL);

295 i‡(
ªsu…
!=0 &&Ñesu…!=
ENOENT
) {

296 
	`vfs_biglock_ªÀa£
();

297  
ªsu…
;

301 i‡(
ªsu…
==0 && 
ex˛
) {

302 
	`vfs_biglock_ªÀa£
();

303  
EEXIST
;

306 i‡(
ªsu…
==0) {

308 
ªsu…
 = 
	`sfs_lﬂdvnode
(
sfs
, 
öo
, 
SFS_TYPE_INVAL
, &
√wguy
);

309 i‡(
ªsu…
) {

310 
	`vfs_biglock_ªÀa£
();

311  
ªsu…
;

313 *
ªt
 = &
√wguy
->
sv_absvn
;

314 
	`vfs_biglock_ªÀa£
();

319 
ªsu…
 = 
	`sfs_makeobj
(
sfs
, 
SFS_TYPE_FILE
, &
√wguy
);

320 i‡(
ªsu…
) {

321 
	`vfs_biglock_ªÀa£
();

322  
ªsu…
;

326 ()
mode
;

329 
ªsu…
 = 
	`sfs_dú_lök
(
sv
, 
«me
, 
√wguy
->
sv_öo
, 
NULL
);

330 i‡(
ªsu…
) {

331 
	`VOP_DECREF
(&
√wguy
->
sv_absvn
);

332 
	`vfs_biglock_ªÀa£
();

333  
ªsu…
;

337 
√wguy
->
sv_i
.
sfi_lökcou¡
++;

340 
√wguy
->
sv_dúty
 = 
åue
;

342 *
ªt
 = &
√wguy
->
sv_absvn
;

344 
	`vfs_biglock_ªÀa£
();

346 
	}
}

355 
	$sfs_lök
(
vnode
 *
dú
, c⁄° *
«me
, vnodê*
fûe
)

357 
sfs_vnode
 *
sv
 = 
dú
->
vn_d©a
;

358 
sfs_vnode
 *
f
 = 
fûe
->
vn_d©a
;

359 
ªsu…
;

361 
	`KASSERT
(
fûe
->
vn_fs
 =
dú
->vn_fs);

363 
	`vfs_biglock_acquúe
();

366 i‡(
f
->
sv_i
.
sfi_ty≥
 =
SFS_TYPE_DIR
) {

367 
	`vfs_biglock_ªÀa£
();

368  
EINVAL
;

372 
ªsu…
 = 
	`sfs_dú_lök
(
sv
, 
«me
, 
f
->
sv_öo
, 
NULL
);

373 i‡(
ªsu…
) {

374 
	`vfs_biglock_ªÀa£
();

375  
ªsu…
;

379 
f
->
sv_i
.
sfi_lökcou¡
++;

380 
f
->
sv_dúty
 = 
åue
;

382 
	`vfs_biglock_ªÀa£
();

384 
	}
}

391 
	$sfs_ªmove
(
vnode
 *
dú
, c⁄° *
«me
)

393 
sfs_vnode
 *
sv
 = 
dú
->
vn_d©a
;

394 
sfs_vnode
 *
vi˘im
;

395 
¶Ÿ
;

396 
ªsu…
;

398 
	`vfs_biglock_acquúe
();

401 
ªsu…
 = 
	`sfs_look⁄˚
(
sv
, 
«me
, &
vi˘im
, &
¶Ÿ
);

402 i‡(
ªsu…
) {

403 
	`vfs_biglock_ªÀa£
();

404  
ªsu…
;

408 
ªsu…
 = 
	`sfs_dú_u∆ök
(
sv
, 
¶Ÿ
);

409 i‡(
ªsu…
==0) {

411 
	`KASSERT
(
vi˘im
->
sv_i
.
sfi_lökcou¡
 > 0);

412 
vi˘im
->
sv_i
.
sfi_lökcou¡
--;

413 
vi˘im
->
sv_dúty
 = 
åue
;

417 
	`VOP_DECREF
(&
vi˘im
->
sv_absvn
);

419 
	`vfs_biglock_ªÀa£
();

420  
ªsu…
;

421 
	}
}

431 
	$sfs_ª«me
(
vnode
 *
d1
, c⁄° *
n1
,

432 
vnode
 *
d2
, c⁄° *
n2
)

434 
sfs_vnode
 *
sv
 = 
d1
->
vn_d©a
;

435 
sfs_vnode
 *
g1
;

436 
¶Ÿ1
, 
¶Ÿ2
;

437 
ªsu…
, 
ªsu…2
;

439 
	`vfs_biglock_acquúe
();

441 
	`KASSERT
(
d1
==
d2
);

442 
	`KASSERT
(
sv
->
sv_öo
 =
SFS_ROOTDIR_INO
);

445 
ªsu…
 = 
	`sfs_look⁄˚
(
sv
, 
n1
, &
g1
, &
¶Ÿ1
);

446 i‡(
ªsu…
) {

447 
	`vfs_biglock_ªÀa£
();

448  
ªsu…
;

452 
	`KASSERT
(
g1
->
sv_i
.
sfi_ty≥
 =
SFS_TYPE_FILE
);

462 
ªsu…
 = 
	`sfs_dú_lök
(
sv
, 
n2
, 
g1
->
sv_öo
, &
¶Ÿ2
);

463 i‡(
ªsu…
) {

464 
puke
;

468 
g1
->
sv_i
.
sfi_lökcou¡
++;

469 
g1
->
sv_dúty
 = 
åue
;

472 
ªsu…
 = 
	`sfs_dú_u∆ök
(
sv
, 
¶Ÿ1
);

473 i‡(
ªsu…
) {

474 
puke_h¨dî
;

481 
	`KASSERT
(
g1
->
sv_i
.
sfi_lökcou¡
>0);

482 
g1
->
sv_i
.
sfi_lökcou¡
--;

483 
g1
->
sv_dúty
 = 
åue
;

486 
	`VOP_DECREF
(&
g1
->
sv_absvn
);

488 
	`vfs_biglock_ªÀa£
();

491 
puke_h¨dî
:

495 
ªsu…2
 = 
	`sfs_dú_u∆ök
(
sv
, 
¶Ÿ2
);

496 i‡(
ªsu…2
) {

497 
	`k¥ötf
("sfs:Ñíame: %s\n", 
	`°ªº‹
(
ªsu…
));

498 
	`k¥ötf
("sfs:Ñename: while cleaning up: %s\n",

499 
	`°ªº‹
(
ªsu…2
));

500 
	`∑nic
("sfs:Ñename: CannotÑecover\n");

502 
g1
->
sv_i
.
sfi_lökcou¡
--;

503 
puke
:

505 
	`VOP_DECREF
(&
g1
->
sv_absvn
);

506 
	`vfs_biglock_ªÀa£
();

507  
ªsu…
;

508 
	}
}

519 
	$sfs_look∑ª¡
(
vnode
 *
v
, *
∑th
, vnodê**
ªt
,

520 *
buf
, 
size_t
 
buÊí
)

522 
sfs_vnode
 *
sv
 = 
v
->
vn_d©a
;

524 
	`vfs_biglock_acquúe
();

526 i‡(
sv
->
sv_i
.
sfi_ty≥
 !
SFS_TYPE_DIR
) {

527 
	`vfs_biglock_ªÀa£
();

528  
ENOTDIR
;

531 i‡(
	`°æí
(
∑th
)+1 > 
buÊí
) {

532 
	`vfs_biglock_ªÀa£
();

533  
ENAMETOOLONG
;

535 
	`°r˝y
(
buf
, 
∑th
);

537 
	`VOP_INCREF
(&
sv
->
sv_absvn
);

538 *
ªt
 = &
sv
->
sv_absvn
;

540 
	`vfs_biglock_ªÀa£
();

542 
	}
}

552 
	$sfs_lookup
(
vnode
 *
v
, *
∑th
, vnodê**
ªt
)

554 
sfs_vnode
 *
sv
 = 
v
->
vn_d©a
;

555 
sfs_vnode
 *
föÆ
;

556 
ªsu…
;

558 
	`vfs_biglock_acquúe
();

560 i‡(
sv
->
sv_i
.
sfi_ty≥
 !
SFS_TYPE_DIR
) {

561 
	`vfs_biglock_ªÀa£
();

562  
ENOTDIR
;

565 
ªsu…
 = 
	`sfs_look⁄˚
(
sv
, 
∑th
, &
föÆ
, 
NULL
);

566 i‡(
ªsu…
) {

567 
	`vfs_biglock_ªÀa£
();

568  
ªsu…
;

571 *
ªt
 = &
föÆ
->
sv_absvn
;

573 
	`vfs_biglock_ªÀa£
();

575 
	}
}

583 c⁄° 
vnode_›s
 
	gsfs_fûe›s
 = {

584 .
v›_magic
 = 
VOP_MAGIC
,

586 .
	gv›_óch›í
 = 
sfs_óch›í
,

587 .
	gv›_ª˛aim
 = 
sfs_ª˛aim
,

589 .
	gv›_ªad
 = 
sfs_ªad
,

590 .
	gv›_ªadlök
 = 
v›Áû_uio_nŸdú
,

591 .
	gv›_gëdúíåy
 = 
v›Áû_uio_nŸdú
,

592 .
	gv›_wrôe
 = 
sfs_wrôe
,

593 .
	gv›_io˘l
 = 
sfs_io˘l
,

594 .
	gv›_°©
 = 
sfs_°©
,

595 .
	gv›_gëty≥
 = 
sfs_gëty≥
,

596 .
	gv›_is£ekabÀ
 = 
sfs_is£ekabÀ
,

597 .
	gv›_fsync
 = 
sfs_fsync
,

598 .
	gv›_mm≠
 = 
sfs_mm≠
,

599 .
	gv›_åunˇã
 = 
sfs_åunˇã
,

600 .
	gv›_«mefûe
 = 
v›Áû_uio_nŸdú
,

602 .
	gv›_¸ót
 = 
v›Áû_¸ót_nŸdú
,

603 .
	gv›_symlök
 = 
v›Áû_symlök_nŸdú
,

604 .
	gv›_mkdú
 = 
v›Áû_mkdú_nŸdú
,

605 .
	gv›_lök
 = 
v›Áû_lök_nŸdú
,

606 .
	gv›_ªmove
 = 
v›Áû_°rög_nŸdú
,

607 .
	gv›_rmdú
 = 
v›Áû_°rög_nŸdú
,

608 .
	gv›_ª«me
 = 
v›Áû_ª«me_nŸdú
,

610 .
	gv›_lookup
 = 
v›Áû_lookup_nŸdú
,

611 .
	gv›_look∑ª¡
 = 
v›Áû_look∑ª¡_nŸdú
,

617 c⁄° 
vnode_›s
 
	gsfs_dú›s
 = {

618 .
v›_magic
 = 
VOP_MAGIC
,

620 .
	gv›_óch›í
 = 
sfs_óch›ídú
,

621 .
	gv›_ª˛aim
 = 
sfs_ª˛aim
,

623 .
	gv›_ªad
 = 
v›Áû_uio_isdú
,

624 .
	gv›_ªadlök
 = 
v›Áû_uio_övÆ
,

625 .
	gv›_gëdúíåy
 = 
v›Áû_uio_nosys
,

626 .
	gv›_wrôe
 = 
v›Áû_uio_isdú
,

627 .
	gv›_io˘l
 = 
sfs_io˘l
,

628 .
	gv›_°©
 = 
sfs_°©
,

629 .
	gv›_gëty≥
 = 
sfs_gëty≥
,

630 .
	gv›_is£ekabÀ
 = 
sfs_is£ekabÀ
,

631 .
	gv›_fsync
 = 
sfs_fsync
,

632 .
	gv›_mm≠
 = 
v›Áû_mm≠_isdú
,

633 .
	gv›_åunˇã
 = 
v›Áû_åunˇã_isdú
,

634 .
	gv›_«mefûe
 = 
sfs_«mefûe
,

636 .
	gv›_¸ót
 = 
sfs_¸ót
,

637 .
	gv›_symlök
 = 
v›Áû_symlök_nosys
,

638 .
	gv›_mkdú
 = 
v›Áû_mkdú_nosys
,

639 .
	gv›_lök
 = 
sfs_lök
,

640 .
	gv›_ªmove
 = 
sfs_ªmove
,

641 .
	gv›_rmdú
 = 
v›Áû_°rög_nosys
,

642 .
	gv›_ª«me
 = 
sfs_ª«me
,

644 .
	gv›_lookup
 = 
sfs_lookup
,

645 .
	gv›_look∑ª¡
 = 
sfs_look∑ª¡
,

	@fs/sfs/sfsprivate.h

30 #i‚de‡
_SFSPRIVATE_H_


31 
	#_SFSPRIVATE_H_


	)

33 
	~<uio.h
>

37 c⁄° 
vnode_›s
 
sfs_fûe›s
;

38 c⁄° 
vnode_›s
 
sfs_dú›s
;

41 
	#SFSUIO
(
iov
, 
uio
, 
±r
, 
block
, 
rw
) \

42 
	`uio_köô
(
iov
, 
uio
, 
±r
, 
SFS_BLOCKSIZE
, ((
off_t
)(
block
))*SFS_BLOCKSIZE, 
rw
)

	)

46 
sfs_bÆloc
(
sfs_fs
 *
sfs
, 
daddr_t
 *
diskblock
);

47 
sfs_b‰ì
(
sfs_fs
 *
sfs
, 
daddr_t
 
diskblock
);

48 
sfs_bu£d
(
sfs_fs
 *
sfs
, 
daddr_t
 
diskblock
);

51 
sfs_bm≠
(
sfs_vnode
 *
sv
, 
uöt32_t
 
fûeblock
, 
boﬁ
 
dﬂŒoc
,

52 
daddr_t
 *
diskblock
);

53 
sfs_ôrunc
(
sfs_vnode
 *
sv
, 
off_t
 
Àn
);

56 
sfs_dú_föd«me
(
sfs_vnode
 *
sv
, c⁄° *
«me
,

57 
uöt32_t
 *
öo
, *
¶Ÿ
, *
em±y¶Ÿ
);

58 
sfs_dú_lök
(
sfs_vnode
 *
sv
, c⁄° *
«me
, 
uöt32_t
 
öo
,

59 *
¶Ÿ
);

60 
sfs_dú_u∆ök
(
sfs_vnode
 *
sv
, 
¶Ÿ
);

61 
sfs_look⁄˚
(
sfs_vnode
 *
sv
, c⁄° *
«me
,

62 
sfs_vnode
 **
ªt
,

63 *
¶Ÿ
);

66 
sfs_sync_öode
(
sfs_vnode
 *
sv
);

67 
sfs_ª˛aim
(
vnode
 *
v
);

68 
sfs_lﬂdvnode
(
sfs_fs
 *
sfs
, 
uöt32_t
 
öo
, 
f‹˚ty≥
,

69 
sfs_vnode
 **
ªt
);

70 
sfs_makeobj
(
sfs_fs
 *
sfs
, 
ty≥
, 
sfs_vnode
 **
ªt
);

71 
vnode
 *
sfs_gëroŸ
(
fs
 *fs);

74 
sfs_ªadblock
(
sfs_fs
 *
sfs
, 
daddr_t
 
block
, *
d©a
, 
size_t
 
Àn
);

75 
sfs_wrôeblock
(
sfs_fs
 *
sfs
, 
daddr_t
 
block
, *
d©a
, 
size_t
 
Àn
);

76 
sfs_io
(
sfs_vnode
 *
sv
, 
uio
 *uio);

77 
sfs_mëaio
(
sfs_vnode
 *
sv
, 
off_t
 
pos
, *
d©a
, 
size_t
 
Àn
,

78 
uio_rw
 
rw
);

	@include/addrspace.h

30 #i‚de‡
_ADDRSPACE_H_


31 
	#_ADDRSPACE_H_


	)

38 
	~<vm.h
>

39 
	~"›t-dumbvm.h
"

41 
	gvnode
;

51 
	saddr•a˚
 {

52 #i‡
OPT_DUMBVM


53 
vaddr_t
 
	mas_vba£1
;

54 
∑ddr_t
 
	mas_pba£1
;

55 
size_t
 
	mas_≈ages1
;

56 
vaddr_t
 
	mas_vba£2
;

57 
∑ddr_t
 
	mas_pba£2
;

58 
size_t
 
	mas_≈ages2
;

59 
∑ddr_t
 
	mas_°ackpba£
;

106 
addr•a˚
 *
as_¸óã
();

107 
as_c›y
(
addr•a˚
 *
§c
, addr•a˚ **
ªt
);

108 
as_a˘iv©e
();

109 
as_dó˘iv©e
();

110 
as_de°roy
(
addr•a˚
 *);

112 
as_deföe_ªgi⁄
(
addr•a˚
 *
as
,

113 
vaddr_t
 
vaddr
, 
size_t
 
sz
,

114 
ªadabÀ
,

115 
wrôóbÀ
,

116 
execuèbÀ
);

117 
as_¥ï¨e_lﬂd
(
addr•a˚
 *
as
);

118 
as_com∂ëe_lﬂd
(
addr•a˚
 *
as
);

119 
as_deföe_°ack
(
addr•a˚
 *
as
, 
vaddr_t
 *
öô°ack±r
);

129 
lﬂd_ñf
(
vnode
 *
v
, 
vaddr_t
 *
íåypoöt
);

	@include/array.h

30 #i‚de‡
_ARRAY_H_


31 
	#_ARRAY_H_


	)

33 
	~<cdefs.h
>

34 
	~<lib.h
>

36 
	#ARRAYS_CHECKED


	)

38 #ifde‡
ARRAYS_CHECKED


39 
	#ARRAYASSERT
 
KASSERT


	)

41 
	#ARRAYASSERT
(
x
Ë(()(x))

	)

44 #i‚de‡
ARRAYINLINE


45 
	#ARRAYINLINE
 
INLINE


	)

70 
	s¨øy
 {

71 **
	mv
;

72 
	mnum
, 
	mmax
;

75 
¨øy
 *
¨øy_¸óã
();

76 
¨øy_de°roy
(
¨øy
 *);

77 
¨øy_öô
(
¨øy
 *);

78 
¨øy_˛ónup
(
¨øy
 *);

79 
ARRAYINLINE
 
¨øy_num
(c⁄° 
¨øy
 *);

80 
ARRAYINLINE
 *
¨øy_gë
(c⁄° 
¨øy
 *, 
ödex
);

81 
ARRAYINLINE
 
¨øy_£t
(c⁄° 
¨øy
 *, 
ödex
, *
vÆ
);

82 
¨øy_¥óŒoˇã
(
¨øy
 *, 
num
);

83 
¨øy_£tsize
(
¨øy
 *, 
num
);

84 
ARRAYINLINE
 
¨øy_add
(
¨øy
 *, *
vÆ
, *
ödex_ªt
);

85 
¨øy_ªmove
(
¨øy
 *, 
ödex
);

91 
ARRAYINLINE
 

92 
	$¨øy_num
(c⁄° 
¨øy
 *
a
)

94  
a
->
num
;

95 
	}
}

97 
ARRAYINLINE
 *

98 
	$¨øy_gë
(c⁄° 
¨øy
 *
a
, 
ödex
)

100 
	`ARRAYASSERT
(
ödex
 < 
a
->
num
);

101  
a
->
v
[
ödex
];

102 
	}
}

104 
ARRAYINLINE
 

105 
	$¨øy_£t
(c⁄° 
¨øy
 *
a
, 
ödex
, *
vÆ
)

107 
	`ARRAYASSERT
(
ödex
 < 
a
->
num
);

108 
a
->
v
[
ödex
] = 
vÆ
;

109 
	}
}

111 
ARRAYINLINE
 

112 
	$¨øy_add
(
¨øy
 *
a
, *
vÆ
, *
ödex_ªt
)

114 
ödex
;

115 
ªt
;

117 
ödex
 = 
a
->
num
;

118 
ªt
 = 
	`¨øy_£tsize
(
a
, 
ödex
+1);

119 i‡(
ªt
) {

120  
ªt
;

122 
a
->
v
[
ödex
] = 
vÆ
;

123 i‡(
ödex_ªt
 !
NULL
) {

124 *
ödex_ªt
 = 
ödex
;

127 
	}
}

168 
	#DECLARRAY_BYTYPE
(
ARRAY
, 
T
, 
INLINE
) \

169 
	sARRAY
 { \

170 
¨øy
 
¨r
; \

173 
INLINE
 
ARRAY
 *ARRAY##
	`_¸óã
(); \

174 
INLINE
 
ARRAY
##
	`_de°roy
(ARRAY *
a
); \

175 
INLINE
 
ARRAY
##
	`_öô
(ARRAY *
a
); \

176 
INLINE
 
ARRAY
##
	`_˛ónup
(ARRAY *
a
); \

177 
INLINE
 
ARRAY
##
	`_num
(c⁄° ARRAY *
a
); \

178 
INLINE
 
T
 *
ARRAY
##
	`_gë
(c⁄° ARRAY *
a
, 
ödex
); \

179 
INLINE
 
ARRAY
##
	`_£t
(ARRAY *
a
, 
ödex
, 
T
 *
vÆ
); \

180 
INLINE
 
ARRAY
##
	`_¥óŒoˇã
(ARRAY *
a
, 
num
); \

181 
INLINE
 
ARRAY
##
	`_£tsize
(ARRAY *
a
, 
num
); \

182 
INLINE
 
ARRAY
##
	`_add
(ARRAY *
a
, 
T
 *
vÆ
, *
ödex_ªt
); \

183 
INLINE
 
ARRAY
##
	`_ªmove
(ARRAY *
a
, 
ödex
)

	)

185 
	#DEFARRAY_BYTYPE
(
ARRAY
, 
T
, 
INLINE
) \

186 
INLINE
 
ARRAY
 * \

187 
ARRAY
##
	`_¸óã
() \

189 
ARRAY
 *
a
 = 
	`kmÆloc
((*a)); \

190 i‡(
a
 =
NULL
) { \

191  
NULL
; \

193 
	`¨øy_öô
(&
a
->
¨r
); \

194  
a
; \

197 
INLINE
 \

198 
ARRAY
##
	`_de°roy
(ARRAY *
a
) \

200 
	`¨øy_˛ónup
(&
a
->
¨r
); \

201 
	`k‰ì
(
a
); \

204 
INLINE
 \

205 
ARRAY
##
	`_öô
(ARRAY *
a
) \

207 
	`¨øy_öô
(&
a
->
¨r
); \

210 
INLINE
 \

211 
ARRAY
##
	`_˛ónup
(ARRAY *
a
) \

213 
	`¨øy_˛ónup
(&
a
->
¨r
); \

216 
INLINE
 \

217 
ARRAY
##
	`_num
(c⁄° ARRAY *
a
) \

219  
	`¨øy_num
(&
a
->
¨r
); \

222 
INLINE
 
T
 * \

223 
ARRAY
##
	`_gë
(c⁄° ARRAY *
a
, 
ödex
) \

225  (
T
 *)
	`¨øy_gë
(&
a
->
¨r
, 
ödex
); \

228 
INLINE
 \

229 
ARRAY
##
	`_£t
(ARRAY *
a
, 
ödex
, 
T
 *
vÆ
) \

231 
	`¨øy_£t
(&
a
->
¨r
, 
ödex
, (*)
vÆ
); \

234 
INLINE
 \

235 
ARRAY
##
	`_¥óŒoˇã
(ARRAY *
a
, 
num
) \

237  
	`¨øy_¥óŒoˇã
(&
a
->
¨r
, 
num
); \

240 
INLINE
 \

241 
ARRAY
##
	`_£tsize
(ARRAY *
a
, 
num
) \

243  
	`¨øy_£tsize
(&
a
->
¨r
, 
num
); \

246 
INLINE
 \

247 
ARRAY
##
	`_add
(ARRAY *
a
, 
T
 *
vÆ
, *
ödex_ªt
) \

249  
	`¨øy_add
(&
a
->
¨r
, (*)
vÆ
, 
ödex_ªt
); \

252 
INLINE
 \

253 
ARRAY
##
	`_ªmove
(ARRAY *
a
, 
ödex
) \

255 
	`¨øy_ªmove
(&
a
->
¨r
, 
ödex
); \

256 }

	)

258 
	#DECLARRAY
(
T
, 
INLINE
Ë
	`DECLARRAY_BYTYPE
(T##
¨øy
, T, INLINE)

	)

259 
	#DEFARRAY
(
T
, 
INLINE
Ë
	`DEFARRAY_BYTYPE
(T##
¨øy
, T, INLINE)

	)

265 
DECLARRAY_BYTYPE
(
°rög¨øy
, , 
ARRAYINLINE
);

266 
DEFARRAY_BYTYPE
(
°rög¨øy
, , 
ARRAYINLINE
);

	@include/bitmap.h

30 #i‚de‡
_BITMAP_H_


31 
	#_BITMAP_H_


	)

48 
	gbôm≠
;

50 
bôm≠
 *
bôm≠_¸óã
(
nbôs
);

51 *
bôm≠_gëd©a
(
bôm≠
 *);

52 
bôm≠_Æloc
(
bôm≠
 *, *
ödex
);

53 
bôm≠_m¨k
(
bôm≠
 *, 
ödex
);

54 
bôm≠_unm¨k
(
bôm≠
 *, 
ödex
);

55 
bôm≠_is£t
(
bôm≠
 *, 
ödex
);

56 
bôm≠_de°roy
(
bôm≠
 *);

	@include/cdefs.h

30 #i‚de‡
_CDEFS_H_


31 
	#_CDEFS_H_


	)

42 
	#COMPILE_ASSERT
(
x
Ë(()(°ru˘ { : ((x)?1:-1); }))

	)

48 
	#ARRAYCOUNT
(
¨r
Ë(◊ºË/ (◊º)[0]))

	)

56 #ifde‡
__GNUC__


57 
	#__PF
(
a
,
b
Ë
	`__©åibuã__
((
	`__f‹m©__
(
__¥ötf__
,á, b)))

	)

58 
	#__DEAD
 
	`__©åibuã__
((
__n‹ëu∫__
))

	)

59 
	#__UNUSED
 
	`__©åibuã__
((
__unu£d__
))

	)

61 
	#__PF
(
a
,
b
)

	)

62 
	#__DEAD


	)

63 
	#__UNUSED


	)

127 #i‡
deföed
(
__GNUC__
Ë&& !deföed(
__GNUC_STDC_INLINE__
)

129 
	#INLINE
 
ölöe


	)

131 #ñi‡
deföed
(
__STDC__
Ë&& 
__STDC_VERSION__
 >= 199901L

133 
	#INLINE
 
ölöe


	)

137 
	#INLINE
 
__UNUSED
 
ölöe


	)

	@include/clock.h

30 #i‚de‡
_CLOCK_H_


31 
	#_CLOCK_H_


	)

37 
	~<kîn/time.h
>

40 
	~"›t-synch¥obs.h
"

49 #i‡
OPT_SYNCHPROBS


51 
	#HZ
 10000

	)

54 
	#HZ
 100

	)

58 
h¨d˛ock_boŸ°øp
();

59 
h¨d˛ock
();

65 
timî˛ock
();

70 
gëtime
(
time•ec
 *
ªt
);

79 
time•ec_add
(c⁄° 
time•ec
 *
t1
,

80 c⁄° 
time•ec
 *
t2
,

81 
time•ec
 *
ªt
);

82 
time•ec_sub
(c⁄° 
time•ec
 *
t1
,

83 c⁄° 
time•ec
 *
t2
,

84 
time•ec
 *
ªt
);

90 
˛ock¶ìp
(
£c⁄ds
);

	@include/copyinout.h

30 #i‚de‡
_COPYINOUT_H_


31 
	#_COPYINOUT_H_


	)

67 
c›yö
(
c⁄°_u£Ωå_t
 
u£r§c
, *
de°
, 
size_t
 
Àn
);

68 
c›yout
(c⁄° *
§c
, 
u£Ωå_t
 
u£rde°
, 
size_t
 
Àn
);

69 
c›yö°r
(
c⁄°_u£Ωå_t
 
u£r§c
, *
de°
, 
size_t
 
Àn
, size_à*
gŸ
);

70 
c›yout°r
(c⁄° *
§c
, 
u£Ωå_t
 
u£rde°
, 
size_t
 
Àn
, size_à*
gŸ
);

	@include/cpu.h

30 #i‚de‡
_CPU_H_


31 
	#_CPU_H_


	)

34 
	~<•ölock.h
>

35 
	~<thªadli°.h
>

36 
	~<machöe/vm.h
>

49 
	s˝u
 {

53 
˝u
 *
	mc_£lf
;

54 
	mc_numbî
;

55 
	mc_h¨dw¨e_numbî
;

60 
thªad
 *
	mc_cuπhªad
;

61 
thªadli°
 
	mc_zombõs
;

62 
	mc_h¨d˛ocks
;

63 
	mc_•ölocks
;

69 
boﬁ
 
	mc_isidÀ
;

70 
thªadli°
 
	mc_runqueue
;

71 
•ölock
 
	mc_runqueue_lock
;

87 
uöt32_t
 
	mc_ùi_≥ndög
;

88 
ébshoŸdown
 
	mc_shoŸdown
[
TLBSHOOTDOWN_MAX
];

89 
	mc_numshoŸdown
;

90 
•ölock
 
	mc_ùi_lock
;

93 
	#TLBSHOOTDOWN_ALL
 (-1)

	)

108 
˝u
 *
˝u_¸óã
(
h¨dw¨e_numbî
);

109 
˝u_machdï_öô
(
˝u
 *);

110  
˝u_°¨t_£c⁄d¨y
();

111 
˝u_h©ch
(
so·w¨e_numbî
);

116 
˝u_idítify
(*
buf
, 
size_t
 
max
);

123 
˝u_úqoff
();

124 
˝u_úq⁄
();

140 
˝u_idÀ
();

141 
˝u_hÆt
();

162 
	#IPI_PANIC
 0

	)

163 
	#IPI_OFFLINE
 1

	)

164 
	#IPI_UNIDLE
 2

	)

165 
	#IPI_TLBSHOOTDOWN
 3

	)

167 
ùi_£nd
(
˝u
 *
èrgë
, 
code
);

168 
ùi_brﬂdˇ°
(
code
);

169 
ùi_ébshoŸdown
(
˝u
 *
èrgë
, c⁄° 
ébshoŸdown
 *
m≠pög
);

171 
öãΩro˚ss‹_öãºu±
();

	@include/current.h

30 #i‚de‡
_CURRENT_H_


31 
	#_CURRENT_H_


	)

66 
	~<machöe/cuºít.h
>

68 #i‡
deföed
(
__NEED_CURTHREAD
)

70 
	~<˝u.h
>

71 
	#cuπhªad
 
cur˝u
->
c_cuπhªad


	)

72 
	#CURCPU_EXISTS
(Ë(
cur˝u
 !
NULL
)

	)

76 #i‡
deföed
(
__NEED_CURCPU
)

78 
	~<thªad.h
>

79 
	#cur˝u
 
cuπhªad
->
t_˝u


	)

80 
	#CURCPU_EXISTS
(Ë(
cuπhªad
 !
NULL
)

	)

90 
	#cuΩroc
 (
cuπhªad
->
t_¥oc
)

	)

	@include/device.h

30 #i‚de‡
_DEVICE_H_


31 
	#_DEVICE_H_


	)

38 
	guio
;

43 
	sdevi˚
 {

44 c⁄° 
devi˚_›s
 *
	md_›s
;

46 
blk˙t_t
 
	md_blocks
;

47 
blksize_t
 
	md_blocksize
;

49 
dev_t
 
	md_devnumbî
;

51 *
	md_d©a
;

60 
	sdevi˚_›s
 {

61 (*
	mdev›_óch›í
)(
	mdevi˚
 *, 
	mÊags_‰om_›í
);

62 (*
	mdev›_io
)(
	mdevi˚
 *, 
	muio
 *);

63 (*
	mdev›_io˘l
)(
	mdevi˚
 *, 
	m›
, 
u£Ωå_t
 
	md©a
);

69 
	#DEVOP_EACHOPEN
(
d
, 
f
Ë((d)->
d_›s
->
	`dev›_óch›í
(d, f))

	)

70 
	#DEVOP_IO
(
d
, 
u
Ë((d)->
d_›s
->
	`dev›_io
(d, u))

	)

71 
	#DEVOP_IOCTL
(
d
, 
›
, 
p
Ë((d)->
d_›s
->
	`dev›_io˘l
(d, op,Ö))

	)

75 
vnode
 *
dev_¸óã_vnode
(
devi˚
 *
dev
);

79 
devnuŒ_¸óã
();

82 
dev_boŸ°øp
();

	@include/elf.h

30 #i‚de‡
_ELF_H_


31 
	#_ELF_H_


	)

44 
	~<machöe/ñf.h
>

50 
	#ELF_NIDENT
 16

	)

52 
	me_idít
[
ELF_NIDENT
];

53 
uöt16_t
 
	me_ty≥
;

54 
uöt16_t
 
	me_machöe
;

55 
uöt32_t
 
	me_vîsi⁄
;

56 
uöt32_t
 
	me_íåy
;

57 
uöt32_t
 
	me_phoff
;

58 
uöt32_t
 
	me_shoff
;

59 
uöt32_t
 
	me_Êags
;

60 
uöt16_t
 
	me_ehsize
;

61 
uöt16_t
 
	me_phítsize
;

62 
uöt16_t
 
	me_phnum
;

63 
uöt16_t
 
	me_shítsize
;

64 
uöt16_t
 
	me_shnum
;

65 
uöt16_t
 
	me_sh°∫dx
;

66 } 
	tElf32_Ehdr
;

69 
	#EI_MAG0
 0

	)

70 
	#EI_MAG1
 1

	)

71 
	#EI_MAG2
 2

	)

72 
	#EI_MAG3
 3

	)

73 
	#EI_CLASS
 4

	)

74 
	#EI_DATA
 5

	)

75 
	#EI_VERSION
 6

	)

76 
	#EI_OSABI
 7

	)

77 
	#EI_ABIVERSION
 8

	)

78 
	#EI_PAD
 9

	)

83 
	#ELFMAG0
 0x7f

	)

84 
	#ELFMAG1
 'E'

	)

85 
	#ELFMAG2
 'L'

	)

86 
	#ELFMAG3
 'F'

	)

89 
	#ELFCLASSNONE
 0

	)

90 
	#ELFCLASS32
 1

	)

91 
	#ELFCLASS64
 2

	)

94 
	#ELFDATANONE
 0

	)

95 
	#ELFDATA2LSB
 1

	)

96 
	#ELFDATA2MSB
 2

	)

99 
	#EV_NONE
 0

	)

100 
	#EV_CURRENT
 1

	)

103 
	#ELFOSABI_SYSV
 0

	)

104 
	#ELFOSABI_HPUX
 1

	)

105 
	#ELFOSABI_STANDALONE
 255

	)

111 
	#ET_NONE
 0

	)

112 
	#ET_REL
 1

	)

113 
	#ET_EXEC
 2

	)

114 
	#ET_DYN
 3

	)

115 
	#ET_CORE
 4

	)

116 
	#ET_NUM
 5

	)

121 
	#EM_NONE
 0

	)

122 
	#EM_M32
 1

	)

123 
	#EM_SPARC
 2

	)

124 
	#EM_386
 3

	)

125 
	#EM_68K
 4

	)

126 
	#EM_88K
 5

	)

127 
	#EM_486
 6

	)

128 
	#EM_860
 7

	)

129 
	#EM_MIPS
 8

	)

130 
	#EM_S370
 9

	)

131 
	#EM_MIPS_RS3_LE
 10

	)

132 
	#EM_RS6000
 11

	)

133 
	#EM_PARISC
 15

	)

134 
	#EM_NCUBE
 16

	)

135 
	#EM_VPP500
 17

	)

136 
	#EM_SPARC32PLUS
 18

	)

137 
	#EM_960
 19

	)

138 
	#EM_PPC
 20

	)

139 
	#EM_V800
 36

	)

140 
	#EM_FR20
 37

	)

141 
	#EM_RH32
 38

	)

142 
	#EM_RCE
 39

	)

143 
	#EM_ARM
 40

	)

144 
	#EM_ALPHA
 41

	)

145 
	#EM_SH
 42

	)

146 
	#EM_SPARCV9
 43

	)

147 
	#EM_TRICORE
 44

	)

148 
	#EM_ARC
 45

	)

149 
	#EM_H8_300
 46

	)

150 
	#EM_H8_300H
 47

	)

151 
	#EM_H8S
 48

	)

152 
	#EM_H8_500
 49

	)

153 
	#EM_IA_64
 50

	)

154 
	#EM_MIPS_X
 51

	)

155 
	#EM_COLDFIRE
 52

	)

156 
	#EM_68HC12
 53

	)

157 
	#EM_VAX
 75

	)

158 
	#EM_ALPHA_EXP
 36902

	)

159 
	#EM_NUM
 36903

	)

169 
uöt32_t
 
	mp_ty≥
;

170 
uöt32_t
 
	mp_off£t
;

171 
uöt32_t
 
	mp_vaddr
;

172 
uöt32_t
 
	mp_∑ddr
;

173 
uöt32_t
 
	mp_fûesz
;

174 
uöt32_t
 
	mp_memsz
;

175 
uöt32_t
 
	mp_Êags
;

176 
uöt32_t
 
	mp_Æign
;

177 } 
	tElf32_Phdr
;

180 
	#PT_NULL
 0

	)

181 
	#PT_LOAD
 1

	)

182 
	#PT_DYNAMIC
 2

	)

183 
	#PT_INTERP
 3

	)

184 
	#PT_NOTE
 4

	)

185 
	#PT_SHLIB
 5

	)

186 
	#PT_PHDR
 6

	)

187 
	#PT_NUM
 7

	)

188 
	#PT_MIPS_REGINFO
 0x70000000

	)

191 
	#PF_R
 0x4

	)

192 
	#PF_W
 0x2

	)

193 
	#PF_X
 0x1

	)

196 
Elf32_Ehdr
 
	tElf_Ehdr
;

197 
Elf32_Phdr
 
	tElf_Phdr
;

	@include/emufs.h

30 #i‚de‡
_EMUFS_H_


31 
	#_EMUFS_H_


	)

37 
	~<fs.h
>

38 
	~<vnode.h
>

44 
	semufs_vnode
 {

45 
vnode
 
	mev_v
;

46 
emu_so·c
 *
	mev_emu
;

47 
uöt32_t
 
	mev_h™dÀ
;

50 
	semufs_fs
 {

51 
fs
 
	mef_fs
;

52 
emu_so·c
 *
	mef_emu
;

53 
emufs_vnode
 *
	mef_roŸ
;

54 
vnodóºay
 *
	mef_vnodes
;

	@include/endian.h

30 #i‚de‡
_ENDIAN_H_


31 
	#_ENDIAN_H_


	)

33 
	~<kîn/ídün.h
>

39 
uöt16_t
 
bsw≠16
(uint16_t);

40 
uöt32_t
 
bsw≠32
(uint32_t);

41 
uöt64_t
 
bsw≠64
(uint64_t);

43 
uöt16_t
 
¡ohs
(uint16_t);

44 
uöt16_t
 
ht⁄s
(uint16_t);

45 
uöt32_t
 
¡ohl
(uint32_t);

46 
uöt32_t
 
ht⁄l
(uint32_t);

47 
uöt64_t
 
¡ohŒ
(uint64_t);

48 
uöt64_t
 
ht⁄Œ
(uint64_t);

51 
joö32to64
(
uöt32_t
 
x1
, uöt32_à
x2
, 
uöt64_t
 *
y2
);

52 
•lô64to32
(
uöt64_t
 
x
, 
uöt32_t
 *
y1
, uöt32_à*
y2
);

	@include/filetable.h

1 #i‚de‡
_FILETABLE_H_


2 
	#_FILETABLE_H_


	)

4 
	~<ty≥s.h
>

5 
	~<vnode.h
>

6 
	~<synch.h
>

7 
	~<¨øy.h
>

9 
	sfûe
 {

10 
	mªfcou¡
;

11 
	m°©us
;

12 
off_t
 
	moff£t
;

13 
vnode
* 
	mvn
;

14 
lock
* 
	ml
;

15 
	mvÆid
;

18 
	sfûëabÀ
{

19 
¨øy
* 
	m¨r
;

22 
fûëabÀ_öô
(
fûëabÀ
* 
·
);

23 
fûëabÀ_ö£π
(
fûëabÀ
* 
·
, 
fûe
* 
f
);

25 
fûëabÀ
 filetable;

	@include/fs.h

30 #i‚de‡
_FS_H_


31 
	#_FS_H_


	)

40 
	sfs
 {

41 *
	mfs_d©a
;

42 c⁄° 
fs_›s
 *
	mfs_›s
;

70 
	sfs_›s
 {

71 (*
	mfs›_sync
)(
	mfs
 *);

72 c⁄° *(*
	mfs›_gëvﬁ«me
)(
	mfs
 *);

73 
	mvnode
 *(*
	mfs›_gëroŸ
)(
	mfs
 *);

74 (*
	mfs›_unmou¡
)(
	mfs
 *);

80 
	#FSOP_SYNC
(
fs
Ë((fs)->
fs_›s
->
	`fs›_sync
(fs))

	)

81 
	#FSOP_GETVOLNAME
(
fs
Ë((fs)->
fs_›s
->
	`fs›_gëvﬁ«me
(fs))

	)

82 
	#FSOP_GETROOT
(
fs
Ë((fs)->
fs_›s
->
	`fs›_gëroŸ
(fs))

	)

83 
	#FSOP_UNMOUNT
(
fs
Ë((fs)->
fs_›s
->
	`fs›_unmou¡
(fs))

	)

86 
£mfs_boŸ°øp
();

	@include/kern/endian.h

30 #i‚de‡
_KERN_ENDIAN_H_


31 
	#_KERN_ENDIAN_H_


	)

42 
	#_LITTLE_ENDIAN
 1234

	)

43 
	#_BIG_ENDIAN
 4321

	)

44 
	#_PDP_ENDIAN
 3412

	)

47 
	~<kîn/machöe/ídün.h
>

	@include/kern/errmsg.h

30 #i‚de‡
_KERN_ERRMSG_H_


31 
	#_KERN_ERRMSG_H_


	)

41 c⁄° *c⁄° 
	gsys_îæi°
[] = {

112 c⁄° 
	gsys_√º
 = (
sys_îæi°
)/(const *);

	@include/kern/errno.h

30 #i‚de‡
_KERN_ERRNO_H_


31 
	#_KERN_ERRNO_H_


	)

45 
	#ENOSYS
 1

	)

47 
	#ENOMEM
 3

	)

48 
	#EAGAIN
 4

	)

49 
	#EINTR
 5

	)

50 
	#EFAULT
 6

	)

51 
	#ENAMETOOLONG
 7

	)

52 
	#EINVAL
 8

	)

53 
	#EPERM
 9

	)

54 
	#EACCES
 10

	)

55 
	#EMPROC
 11

	)

56 
	#ENPROC
 12

	)

57 
	#ENOEXEC
 13

	)

58 
	#E2BIG
 14

	)

59 
	#ESRCH
 15

	)

60 
	#ECHILD
 16

	)

61 
	#ENOTDIR
 17

	)

62 
	#EISDIR
 18

	)

63 
	#ENOENT
 19

	)

64 
	#ELOOP
 20

	)

65 
	#ENOTEMPTY
 21

	)

66 
	#EEXIST
 22

	)

67 
	#EMLINK
 23

	)

68 
	#EXDEV
 24

	)

69 
	#ENODEV
 25

	)

70 
	#ENXIO
 26

	)

71 
	#EBUSY
 27

	)

72 
	#EMFILE
 28

	)

73 
	#ENFILE
 29

	)

74 
	#EBADF
 30

	)

75 
	#EIOCTL
 31

	)

76 
	#EIO
 32

	)

77 
	#ESPIPE
 33

	)

78 
	#EPIPE
 34

	)

79 
	#EROFS
 35

	)

80 
	#ENOSPC
 36

	)

81 
	#EDQUOT
 37

	)

82 
	#EFBIG
 38

	)

83 
	#EFTYPE
 39

	)

84 
	#EDOM
 40

	)

85 
	#ERANGE
 41

	)

86 
	#EILSEQ
 42

	)

87 
	#ENOTSOCK
 43

	)

88 
	#EISSOCK
 44

	)

89 
	#EISCONN
 45

	)

90 
	#ENOTCONN
 46

	)

91 
	#ESHUTDOWN
 47

	)

92 
	#EPFNOSUPPORT
 48

	)

93 
	#ESOCKTNOSUPPORT
 49

	)

94 
	#EPROTONOSUPPORT
 50

	)

95 
	#EPROTOTYPE
 51

	)

96 
	#EAFNOSUPPORT
 52

	)

97 
	#ENOPROTOOPT
 53

	)

98 
	#EADDRINUSE
 54

	)

99 
	#EADDRNOTAVAIL
 55

	)

100 
	#ENETDOWN
 56

	)

101 
	#ENETUNREACH
 57

	)

102 
	#EHOSTDOWN
 58

	)

103 
	#EHOSTUNREACH
 59

	)

104 
	#ECONNREFUSED
 60

	)

105 
	#ETIMEDOUT
 61

	)

106 
	#ECONNRESET
 62

	)

107 
	#EMSGSIZE
 63

	)

108 
	#ENOTSUP
 64

	)

	@include/kern/fcntl.h

30 #i‚de‡
_KERN_FCNTL_H_


31 
	#_KERN_FCNTL_H_


	)

43 
	#O_RDONLY
 0

	)

44 
	#O_WRONLY
 1

	)

45 
	#O_RDWR
 2

	)

47 
	#O_CREAT
 4

	)

48 
	#O_EXCL
 8

	)

49 
	#O_TRUNC
 16

	)

50 
	#O_APPEND
 32

	)

51 
	#O_NOCTTY
 64

	)

54 
	#O_ACCMODE
 3

	)

61 
	#LOCK_SH
 1

	)

62 
	#LOCK_EX
 2

	)

63 
	#LOCK_UN
 3

	)

64 
	#LOCK_NB
 4

	)

71 
	#F_DUPFD
 0

	)

72 
	#F_GETFD
 1

	)

73 
	#F_SETFD
 2

	)

74 
	#F_GETFL
 3

	)

75 
	#F_SETFL
 4

	)

76 
	#F_GETOWN
 5

	)

77 
	#F_SETOWN
 6

	)

78 
	#F_GETLK
 7

	)

79 
	#F_SETLK
 8

	)

80 
	#F_SETLKW
 9

	)

83 
	#FD_CLOEXEC
 1

	)

86 
	#F_RDLCK
 0

	)

87 
	#F_WRLCK
 1

	)

88 
	#F_UNLCK
 2

	)

91 
	sÊock
 {

92 
off_t
 
	ml_°¨t
;

93 
	ml_whí˚
;

94 
	ml_ty≥
;

95 
off_t
 
	ml_Àn
;

96 
pid_t
 
	ml_pid
;

	@include/kern/ioctl.h

30 #i‚de‡
_KERN_IOCTL_H_


31 
	#_KERN_IOCTL_H_


	)

	@include/kern/iovec.h

30 #i‚de‡
_KERN_IOVEC_H_


31 
	#_KERN_IOVEC_H_


	)

38 
	siovec
 {

57 #ifde‡
_KERNEL


59 
u£Ωå_t
 
	miov_uba£
;

60 *
	miov_kba£
;

63 *
	miov_ba£
;

65 
size_t
 
	miov_Àn
;

	@include/kern/limits.h

30 #i‚de‡
_KERN_LIMITS_H_


31 
	#_KERN_LIMITS_H_


	)

60 
	#__NAME_MAX
 255

	)

63 
	#__PATH_MAX
 1024

	)

66 
	#__ARG_MAX
 (64 * 1024)

	)

77 
	#__PID_MIN
 2

	)

80 
	#__PID_MAX
 32767

	)

83 
	#__OPEN_MAX
 32

	)

86 
	#__PIPE_BUF
 512

	)

95 
	#__NGROUPS_MAX
 32

	)

98 
	#__LOGIN_NAME_MAX
 17

	)

106 
	#__IOV_MAX
 1024

	)

	@include/kern/reboot.h

30 #i‚de‡
_KERN_REBOOT_H_


31 
	#_KERN_REBOOT_H_


	)

40 
	#RB_REBOOT
 0

	)

41 
	#RB_HALT
 1

	)

42 
	#RB_POWEROFF
 2

	)

	@include/kern/resource.h

30 #i‚de‡
_KERN_RESOURCE_H_


31 
	#_KERN_RESOURCE_H_


	)

41 
	#PRIO_MIN
 (-20)

	)

42 
	#PRIO_MAX
 20

	)

45 
	#PRIO_PROCESS
 0

	)

46 
	#PRIO_PGRP
 1

	)

47 
	#PRIO_USER
 2

	)

50 
	#RUSAGE_SELF
 0

	)

51 
	#RUSAGE_CHILDREN
 (-1)

	)

53 
	srußge
 {

54 
timevÆ
 
	mru_utime
;

55 
timevÆ
 
	mru_°ime
;

56 
__size_t
 
	mru_maxrss
;

57 
__cou¡î_t
 
	mru_ixrss
;

58 
__cou¡î_t
 
	mru_idrss
;

59 
__cou¡î_t
 
	mru_i§ss
;

60 
__cou¡î_t
 
	mru_möÊt
;

61 
__cou¡î_t
 
	mru_majÊt
;

62 
__cou¡î_t
 
	mru_nsw≠
;

63 
__cou¡î_t
 
	mru_öblock
;

64 
__cou¡î_t
 
	mru_oublock
;

65 
__cou¡î_t
 
	mru_msgrcv
;

66 
__cou¡î_t
 
	mru_msg¢d
;

67 
__cou¡î_t
 
	mru_nsig«ls
;

68 
__cou¡î_t
 
	mru_nvcsw
;

69 
__cou¡î_t
 
	mru_nivcsw
;

74 
	#RLIMIT_NPROC
 0

	)

75 
	#RLIMIT_NOFILE
 1

	)

76 
	#RLIMIT_CPU
 2

	)

77 
	#RLIMIT_DATA
 3

	)

78 
	#RLIMIT_STACK
 4

	)

79 
	#RLIMIT_MEMLOCK
 5

	)

80 
	#RLIMIT_RSS
 6

	)

81 
	#RLIMIT_CORE
 7

	)

82 
	#RLIMIT_FSIZE
 8

	)

83 
	#__RLIMIT_NUM
 9

	)

85 
	sæimô
 {

86 
__æim_t
 
	mæim_cur
;

87 
__æim_t
 
	mæim_max
;

90 
	#RLIM_INFINITY
 (~(
__æim_t
)0)

	)

	@include/kern/seek.h

30 #i‚de‡
_KERN_SEEK_H_


31 
	#_KERN_SEEK_H_


	)

42 
	#SEEK_SET
 0

	)

43 
	#SEEK_CUR
 1

	)

44 
	#SEEK_END
 2

	)

	@include/kern/sfs.h

30 #i‚de‡
_KERN_SFS_H_


31 
	#_KERN_SFS_H_


	)

39 
	#SFS_MAGIC
 0xabadf001

	)

40 
	#SFS_BLOCKSIZE
 512

	)

41 
	#SFS_VOLNAME_SIZE
 32

	)

42 
	#SFS_NDIRECT
 15

	)

43 
	#SFS_NINDIRECT
 1

	)

44 
	#SFS_NDINDIRECT
 0

	)

45 
	#SFS_NTINDIRECT
 0

	)

46 
	#SFS_DBPERIDB
 128

	)

47 
	#SFS_NAMELEN
 60

	)

48 
	#SFS_SUPER_BLOCK
 0

	)

49 
	#SFS_FREEMAP_START
 2

	)

50 
	#SFS_NOINO
 0

	)

51 
	#SFS_ROOTDIR_INO
 1

	)

54 
	#SFS_BITSPERBLOCK
 (
SFS_BLOCKSIZE
 * 
CHAR_BIT
)

	)

57 
	#SFS_ROUNDUP
(
a
,
b
Ë(((◊)+(b)-1)/(b))*b)

	)

60 
	#SFS_FREEMAPBITS
(
nblocks
Ë
	`SFS_ROUNDUP
“blocks, 
SFS_BITSPERBLOCK
)

	)

63 
	#SFS_FREEMAPBLOCKS
(
nblocks
Ë(
	`SFS_FREEMAPBITS
“blocks)/
SFS_BITSPERBLOCK
)

	)

66 
	#SFS_TYPE_INVAL
 0

	)

67 
	#SFS_TYPE_FILE
 1

	)

68 
	#SFS_TYPE_DIR
 2

	)

73 
	ssfs_su≥rblock
 {

74 
uöt32_t
 
	msb_magic
;

75 
uöt32_t
 
	msb_nblocks
;

76 
	msb_vﬁ«me
[
SFS_VOLNAME_SIZE
];

77 
uöt32_t
 
	mª£rved
[118];

83 
	ssfs_döode
 {

84 
uöt32_t
 
	msfi_size
;

85 
uöt16_t
 
	msfi_ty≥
;

86 
uöt16_t
 
	msfi_lökcou¡
;

87 
uöt32_t
 
	msfi_dúe˘
[
SFS_NDIRECT
];

88 
uöt32_t
 
	msfi_ödúe˘
;

89 
uöt32_t
 
	msfi_wa°e
[128-3-
SFS_NDIRECT
];

95 
	ssfs_dúíåy
 {

96 
uöt32_t
 
	msfd_öo
;

97 
	msfd_«me
[
SFS_NAMELEN
];

	@include/kern/signal.h

37 #i‚de‡
_KERN_SIGNAL_H_


38 
	#_KERN_SIGNAL_H_


	)

56 
	#SIGHUP
 1

	)

57 
	#SIGINT
 2

	)

58 
	#SIGQUIT
 3

	)

59 
	#SIGILL
 4

	)

60 
	#SIGTRAP
 5

	)

61 
	#SIGABRT
 6

	)

62 
	#SIGEMT
 7

	)

63 
	#SIGFPE
 8

	)

64 
	#SIGKILL
 9

	)

65 
	#SIGBUS
 10

	)

66 
	#SIGSEGV
 11

	)

67 
	#SIGSYS
 12

	)

68 
	#SIGPIPE
 13

	)

69 
	#SIGALRM
 14

	)

70 
	#SIGTERM
 15

	)

71 
	#SIGURG
 16

	)

72 
	#SIGSTOP
 17

	)

73 
	#SIGTSTP
 18

	)

74 
	#SIGCONT
 19

	)

75 
	#SIGCHLD
 20

	)

76 
	#SIGTTIN
 21

	)

77 
	#SIGTTOU
 22

	)

78 
	#SIGIO
 23

	)

79 
	#SIGXCPU
 24

	)

80 
	#SIGXFSZ
 25

	)

81 
	#SIGVTALRM
 26

	)

82 
	#SIGPROF
 27

	)

83 
	#SIGWINCH
 28

	)

84 
	#SIGINFO
 29

	)

85 
	#SIGUSR1
 20

	)

86 
	#SIGUSR2
 31

	)

87 
	#SIGPWR
 32

	)

88 
	#_NSIG
 32

	)

92 
__u32
 
	tsig£t_t
;

95 
	#SA_ONSTACK
 1

	)

96 
	#SA_RESTART
 2

	)

97 
	#SA_RESETHAND
 4

	)

100 
	#SIG_BLOCK
 1

	)

101 
	#SIG_UNBLOCK
 2

	)

102 
	#SIG_SETMASK
 3

	)

105 (*
	t__sigfunc
)();

108 
	#SIG_DFL
 ((
__sigfunc
Ë0Ë

	)

109 
	#SIG_IGN
 ((
__sigfunc
Ë1Ë

	)

114 
	ssiga˘i⁄
 {

115 
__sigfunc
 
ß_h™dÀr
;

116 
sig£t_t
 
ß_mask
;

117 
ß_Êags
;

124 
	ssigÆt°ack
 {

125 *
ss_•
;

126 
size_t
 
ss_size
;

127 
ss_Êags
;

	@include/kern/socket.h

30 #i‚de‡
_KERN_SOCKET_H_


31 
	#_KERN_SOCKET_H_


	)

43 
	#SOCK_STREAM
 1

	)

44 
	#SOCK_DGRAM
 2

	)

45 
	#SOCK_RAW
 3

	)

48 
	#AF_UNSPEC
 0

	)

49 
	#AF_UNIX
 1

	)

50 
	#AF_INET
 2

	)

51 
	#AF_INET6
 3

	)

54 
	#PF_UNSPEC
 
AF_UNSPEC


	)

55 
	#PF_UNIX
 
AF_UNIX


	)

56 
	#PF_INET
 
AF_INET


	)

57 
	#PF_INET6
 
AF_INET6


	)

73 
	ssockaddr
 {

74 
__u8
 
	mß_Àn
;

75 
__u8
 
	mß_Ámûy
;

78 
	#_SS_SIZE
 128

	)

79 
	ssockaddr_°‹age
 {

80 
__u8
 
	mss_Àn
;

81 
__u8
 
	mss_Ámûy
;

82 
__u8
 
	m__ss_∑d1
;

83 
__u8
 
	m__ss_∑d2
;

84 
__u32
 
	m__ss_∑d3
;

85 
__u64
 
	m__ss_∑d4
;

86 
	m__ss_∑d5
[
_SS_SIZE
 - (
__u64
Ë- (
__u32
Ë- 4*(
__u8
)];

98 
	smsghdr
 {

99 *
	mmsg_«me
;

100 
sockÀn_t
 
	mmsg_«mñí
;

101 
iovec
 *
	mmsg_iov
;

102 
	mmsg_iovÀn
;

103 *
	mmsg_c⁄åﬁ
;

104 
sockÀn_t
 
	mmsg_c⁄åﬁÀn
;

105 
	mmsg_Êags
;

108 
	scmsghdr
 {

109 
sockÀn_t
 
	mcmsg_Àn
;

110 
	mcmsg_Àvñ
;

111 
	mcmsg_ty≥
;

	@include/kern/stat.h

30 #i‚de‡
_KERN_STAT_H_


31 
	#_KERN_STAT_H_


	)

42 
	s°©
 {

44 
off_t
 
	m°_size
;

45 
mode_t
 
	m°_mode
;

46 
∆ök_t
 
	m°_∆ök
;

47 
blk˙t_t
 
	m°_blocks
;

50 
dev_t
 
	m°_dev
;

51 
öo_t
 
	m°_öo
;

52 
dev_t
 
	m°_rdev
;

55 
time_t
 
	m°_©ime
;

56 
time_t
 
	m°_˘ime
;

57 
time_t
 
	m°_mtime
;

58 
__u32
 
	m°_©imí£c
;

59 
__u32
 
	m°_˘imí£c
;

60 
__u32
 
	m°_mtimí£c
;

63 
uid_t
 
	m°_uid
;

64 
gid_t
 
	m°_gid
;

67 
__u32
 
	m°_gí
;

68 
blksize_t
 
	m°_blksize
;

	@include/kern/stattypes.h

30 #i‚de‡
_KERN_STATTYPES_H_


31 
	#_KERN_STATTYPES_H_


	)

45 
	#_S_IFMT
 070000

	)

46 
	#_S_IFREG
 010000

	)

47 
	#_S_IFDIR
 020000

	)

48 
	#_S_IFLNK
 030000

	)

49 
	#_S_IFIFO
 040000

	)

50 
	#_S_IFSOCK
 050000

	)

51 
	#_S_IFCHR
 060000

	)

52 
	#_S_IFBLK
 070000

	)

	@include/kern/syscall.h

30 #i‚de‡
_KERN_SYSCALL_H_


31 
	#_KERN_SYSCALL_H_


	)

50 
	#SYS_f‹k
 0

	)

51 
	#SYS_vf‹k
 1

	)

52 
	#SYS_execv
 2

	)

53 
	#SYS__exô
 3

	)

54 
	#SYS_waôpid
 4

	)

55 
	#SYS_gëpid
 5

	)

56 
	#SYS_gëµid
 6

	)

58 
	#SYS_sbrk
 7

	)

59 
	#SYS_mm≠
 8

	)

60 
	#SYS_munm≠
 9

	)

61 
	#SYS_m¥Ÿe˘
 10

	)

69 
	#SYS_umask
 17

	)

70 
	#SYS_is£tugid
 18

	)

71 
	#SYS_gëªsuid
 19

	)

72 
	#SYS_£åesuid
 20

	)

73 
	#SYS_gëªsgid
 21

	)

74 
	#SYS_£åesgid
 22

	)

75 
	#SYS_gëgroups
 23

	)

76 
	#SYS_£tgroups
 24

	)

77 
	#SYS___gëlogö
 25

	)

78 
	#SYS___£éogö
 26

	)

80 
	#SYS_kûl
 27

	)

81 
	#SYS_siga˘i⁄
 28

	)

82 
	#SYS_sig≥ndög
 29

	)

83 
	#SYS_sig¥ocmask
 30

	)

84 
	#SYS_sigsu•íd
 31

	)

85 
	#SYS_sigªtu∫
 32

	)

105 
	#SYS_›í
 45

	)

106 
	#SYS_pùe
 46

	)

107 
	#SYS_dup
 47

	)

108 
	#SYS_dup2
 48

	)

109 
	#SYS_˛o£
 49

	)

110 
	#SYS_ªad
 50

	)

111 
	#SYS_¥ód
 51

	)

114 
	#SYS_gëdúíåy
 54

	)

115 
	#SYS_wrôe
 55

	)

116 
	#SYS_pwrôe
 56

	)

119 
	#SYS_l£ek
 59

	)

120 
	#SYS_Êock
 60

	)

121 
	#SYS_·runˇã
 61

	)

122 
	#SYS_fsync
 62

	)

123 
	#SYS_f˙é
 63

	)

124 
	#SYS_io˘l
 64

	)

125 
	#SYS_£À˘
 65

	)

126 
	#SYS_pﬁl
 66

	)

129 
	#SYS_lök
 67

	)

130 
	#SYS_ªmove
 68

	)

131 
	#SYS_mkdú
 69

	)

132 
	#SYS_rmdú
 70

	)

133 
	#SYS_mkfifo
 71

	)

134 
	#SYS_ª«me
 72

	)

135 
	#SYS_ac˚ss
 73

	)

137 
	#SYS_chdú
 74

	)

138 
	#SYS_fchdú
 75

	)

139 
	#SYS___gëcwd
 76

	)

141 
	#SYS_symlök
 77

	)

142 
	#SYS_ªadlök
 78

	)

144 
	#SYS_mou¡
 79

	)

145 
	#SYS_unmou¡
 80

	)

149 
	#SYS_°©
 81

	)

150 
	#SYS_f°©
 82

	)

151 
	#SYS_l°©
 83

	)

153 
	#SYS_utimes
 84

	)

154 
	#SYS_futimes
 85

	)

155 
	#SYS_lutimes
 86

	)

157 
	#SYS_chmod
 87

	)

158 
	#SYS_chown
 88

	)

159 
	#SYS_fchmod
 89

	)

160 
	#SYS_fchown
 90

	)

161 
	#SYS_lchmod
 91

	)

162 
	#SYS_lchown
 92

	)

172 
	#SYS_sockë
 98

	)

173 
	#SYS_böd
 99

	)

174 
	#SYS_c⁄√˘
 100

	)

175 
	#SYS_li°í
 101

	)

176 
	#SYS_ac˚±
 102

	)

178 
	#SYS_shutdown
 104

	)

179 
	#SYS_gësock«me
 105

	)

180 
	#SYS_gë≥î«me
 106

	)

181 
	#SYS_gësock›t
 107

	)

182 
	#SYS_£tsock›t
 108

	)

189 
	#SYS___time
 113

	)

190 
	#SYS___£âime
 114

	)

191 
	#SYS_«no¶ìp
 115

	)

196 
	#SYS_sync
 118

	)

197 
	#SYS_ªboŸ
 119

	)

	@include/kern/time.h

30 #i‚de‡
_KERN_TIME_H_


31 
	#_KERN_TIME_H_


	)

43 
	stimevÆ
 {

44 
__time_t
 
	mtv_£c
;

45 
__i32
 
	mtv_u£c
;

48 
	stime•ec
 {

49 
__time_t
 
	mtv_£c
;

50 
__i32
 
	mtv_n£c
;

59 
	#ITIMER_REAL
 0

	)

60 
	#ITIMER_VIRTUAL
 1

	)

61 
	#ITIMER_PROF
 2

	)

64 
	sôimîvÆ
 {

65 
timevÆ
 
	mô_öãrvÆ
;

66 
timevÆ
 
	mô_vÆue
;

	@include/kern/types.h

30 #i‚de‡
_KERN_TYPES_H_


31 
	#_KERN_TYPES_H_


	)

34 
	~<kîn/machöe/ty≥s.h
>

64 
__u32
 
	t__blk˙t_t
;

65 
__u32
 
	t__blksize_t
;

66 
__u64
 
	t__cou¡î_t
;

67 
__u32
 
	t__daddr_t
;

68 
__u32
 
	t__dev_t
;

69 
__u32
 
	t__fsid_t
;

70 
__i32
 
	t__gid_t
;

71 
__u32
 
	t__ö_addr_t
;

72 
__u32
 
	t__ö_p‹t_t
;

73 
__u32
 
	t__öo_t
;

74 
__u32
 
	t__mode_t
;

75 
__u16
 
	t__∆ök_t
;

76 
__i64
 
	t__off_t
;

77 
__i32
 
	t__pid_t
;

78 
__u64
 
	t__æim_t
;

79 
__u8
 
	t__ß_Ámûy_t
;

80 
__i64
 
	t__time_t
;

81 
__i32
 
	t__uid_t
;

83 
	t__nfds_t
;

84 
	t__sockÀn_t
;

87 #ifde‡
__GNUC__


88 
__buûtö_va_li°
 
	t__va_li°
;

	@include/kern/unistd.h

30 #i‚de‡
_KERN_UNISTD_H_


31 
	#_KERN_UNISTD_H_


	)

34 
	#STDIN_FILENO
 0

	)

35 
	#STDOUT_FILENO
 1

	)

36 
	#STDERR_FILENO
 2

	)

	@include/kern/wait.h

30 #i‚de‡
_KERN_WAIT_H_


31 
	#_KERN_WAIT_H_


	)

39 
	#WNOHANG
 1

	)

40 
	#WUNTRACED
 2

	)

43 
	#WAIT_ANY
 (-1Ë

	)

44 
	#WAIT_MYPGRP
 0

	)

54 
	#_WWHAT
(
x
Ë((x)&3Ë

	)

55 
	#_WVAL
(
x
Ë((x)>>2Ë

	)

56 
	#_MKWVAL
(
x
Ë((x)<<2Ë

	)

59 
	#__WEXITED
 0

	)

60 
	#__WSIGNALED
 1

	)

61 
	#__WCORED
 2

	)

62 
	#__WSTOPPED
 3

	)

65 
	#WIFEXITED
(
x
Ë(
	`_WWHAT
(x)==
__WEXITED
)

	)

66 
	#WIFSIGNALED
(
x
Ë(
	`_WWHAT
(x)==
__WSIGNALED
 || _WWHAT(x)==
__WCORED
)

	)

67 
	#WIFSTOPPED
(
x
Ë(
	`_WWHAT
(x)==
__WSTOPPED
)

	)

68 
	#WEXITSTATUS
(
x
Ë(
	`_WVAL
(x))

	)

69 
	#WTERMSIG
(
x
Ë(
	`_WVAL
(x))

	)

70 
	#WSTOPSIG
(
x
Ë(
	`_WVAL
(x))

	)

71 
	#WCOREDUMP
(
x
Ë(
	`_WWHAT
(x)==
__WCORED
)

	)

74 
	#_MKWAIT_EXIT
(
x
Ë(
	`_MKWVAL
(x)|
__WEXITED
)

	)

75 
	#_MKWAIT_SIG
(
x
Ë(
	`_MKWVAL
(x)|
__WSIGNALED
)

	)

76 
	#_MKWAIT_CORE
(
x
Ë(
	`_MKWVAL
(x)|
__WCORED
)

	)

77 
	#_MKWAIT_STOP
(
x
Ë(
	`_MKWVAL
(x)|
__WSTOPPED
)

	)

	@include/lib.h

30 #i‚de‡
_LIB_H_


31 
	#_LIB_H_


	)

41 
	~<cdefs.h
>

60 
	~"›t-nﬂs£πs.h
"

62 #i‡
OPT_NOASSERTS


63 
	#KASSERT
(
ex¥
Ë(()”x¥))

	)

65 
	#KASSERT
(
ex¥
) \

66 ((
ex¥
Ë? ()0 : 
	`badas£π
(#ex¥, 
__FILE__
, 
__LINE__
, 
__func__
))

	)

70 
	#DEBUGASSERT
(
ex¥
Ë(()”x¥))

	)

72 
	#DEBUGASSERT
(
ex¥
) \

73 ((
ex¥
Ë? ()0 : 
	`badas£π
(#ex¥, 
__FILE__
, 
__LINE__
, 
__func__
))

	)

79 
	#DB_LOCORE
 0x0001

	)

80 
	#DB_SYSCALL
 0x0002

	)

81 
	#DB_INTERRUPT
 0x0004

	)

82 
	#DB_DEVICE
 0x0008

	)

83 
	#DB_THREADS
 0x0010

	)

84 
	#DB_VM
 0x0020

	)

85 
	#DB_EXEC
 0x0040

	)

86 
	#DB_VFS
 0x0080

	)

87 
	#DB_SEMFS
 0x0100

	)

88 
	#DB_SFS
 0x0200

	)

89 
	#DB_NET
 0x0400

	)

90 
	#DB_NETFS
 0x0800

	)

91 
	#DB_KMALLOC
 0x1000

	)

93 
uöt32_t
 
dbÊags
;

111 
	#DEBUG
(
d
, ...Ë((
dbÊags
 & (d)Ë? 
	`k¥ötf
(
__VA_ARGS__
Ë: 0)

	)

118 
	#RANDOM_MAX
 (
	`øndmax
())

	)

119 
uöt32_t
 
øndmax
();

120 
uöt32_t
 
øndom
();

129 *
kmÆloc
(
size_t
 
size
);

130 
k‰ì
(*
±r
);

131 
khóp_¥öt°©s
();

132 
khóp_√xtgíî©i⁄
();

133 
khóp_dump
();

134 
khóp_dum∑Œ
();

142 
size_t
 
°æí
(c⁄° *
°r
);

143 
°rcmp
(c⁄° *
°r1
, c⁄° *
°r2
);

144 *
°r˝y
(*
de°
, c⁄° *
§c
);

145 *
°rˇt
(*
de°
, c⁄° *
§c
);

146 *
k°rdup
(c⁄° *
°r
);

147 *
°rchr
(c⁄° *
£¨ched
, 
£¨chf‹
);

148 *
°ºchr
(c⁄° *
£¨ched
, 
£¨chf‹
);

149 *
°πok_r
(*
buf
, c⁄° *
£ps
, **
c⁄ãxt
);

151 *
mem˝y
(*
de°
, c⁄° *
§c
, 
size_t
 
Àn
);

152 *
memmove
(*
de°
, c⁄° *
§c
, 
size_t
 
Àn
);

153 *
mem£t
(*
block
, 
ch
, 
size_t
 
Àn
);

154 
bzîo
(*
±r
, 
size_t
 
Àn
);

155 
©oi
(c⁄° *
°r
);

157 
	$¢¥ötf
(*
buf
, 
size_t
 
maxÀn
, c⁄° *
fmt
, ...Ë
	`__PF
(3,4);

159 c⁄° *
	`°ªº‹
(
îrcode
);

164 
	`putch
(
ch
);

165 
	`gëch
();

166 
	`bìp
();

181 
	$k¥ötf
(c⁄° *
f‹m©
, ...Ë
	`__PF
(1,2);

182 
__DEAD
 
	$∑nic
(c⁄° *
f‹m©
, ...Ë
	`__PF
(1,2);

183 
__DEAD
 
	`badas£π
(c⁄° *
ex¥
, c⁄° *
fûe
,

184 
löe
, c⁄° *
func
);

186 
	`kgës
(*
buf
, 
size_t
 
maxbuÊí
);

188 
	`k¥ötf_boŸ°øp
();

194 
	#DIVROUNDUP
(
a
,
b
Ë((◊)+(b)-1)/(b))

	)

195 
	#ROUNDUP
(
a
,
b
Ë(
	`DIVROUNDUP
◊,b)*b)

	)

	@include/limits.h

30 #i‚de‡
_LIMITS_H_


31 
	#_LIMITS_H_


	)

38 
	~<kîn/limôs.h
>

41 
	#NAME_MAX
 
__NAME_MAX


	)

42 
	#PATH_MAX
 
__PATH_MAX


	)

44 
	#ARG_MAX
 
__ARG_MAX


	)

45 
	#PID_MIN
 
__PID_MIN


	)

46 
	#PID_MAX
 
__PID_MAX


	)

47 
	#PIPE_BUF
 
__PIPE_BUF


	)

48 
	#NGROUPS_MAX
 
__NGROUPS_MAX


	)

49 
	#LOGIN_NAME_MAX
 
__LOGIN_NAME_MAX


	)

50 
	#OPEN_MAX
 
__OPEN_MAX


	)

51 
	#IOV_MAX
 
__IOV_MAX


	)

	@include/mainbus.h

30 #i‚de‡
_MAINBUS_H_


31 
	#_MAINBUS_H_


	)

38 
	g˝u
;

39 
	gå≠‰ame
;

43 
maöbus_boŸ°øp
();

46 
maöbus_°¨t_˝us
();

49 
maöbus_öãºu±
(
å≠‰ame
 *);

53 
size_t
 
maöbus_ømsize
();

56 
maöbus_£nd_ùi
(
˝u
 *
èrgë
);

64 
maöbus_hÆt
();

65 
maöbus_powîoff
();

66 
maöbus_ªboŸ
();

67 
maöbus_∑nic
();

	@include/membar.h

30 #i‚de‡
_MEMBAR_H_


31 
	#_MEMBAR_H_


	)

80 #i‚de‡
MEMBAR_INLINE


81 
	#MEMBAR_INLINE
 
INLINE


	)

84 
MEMBAR_INLINE
 
memb¨_lﬂd_lﬂd
();

85 
MEMBAR_INLINE
 
memb¨_°‹e_°‹e
();

86 
MEMBAR_INLINE
 
memb¨_°‹e_™y
();

87 
MEMBAR_INLINE
 
memb¨_™y_°‹e
();

88 
MEMBAR_INLINE
 
memb¨_™y_™y
();

91 
	~<machöe/memb¨.h
>

	@include/proc.h

30 #i‚de‡
_PROC_H_


31 
	#_PROC_H_


	)

39 
	~<•ölock.h
>

40 
	~<thªad.h
>

41 
	~<¨øy.h
>

42 
	~<fûëabÀ.h
>

43 
	~<pid.h
>

45 
	gaddr•a˚
;

46 
	gvnode
;

51 
	sfd_íåy
{

52 
	mfd
;

53 
fûe
* 
	mf
;

55 
	s¥oc
 {

56 *
	mp_«me
;

57 
•ölock
 
	mp_lock
;

58 
thªad¨øy
 
	mp_thªads
;

61 
addr•a˚
 *
	mp_addr•a˚
;

64 
vnode
 *
	mp_cwd
;

67 
¨øy
* 
	mfd_¨øy
;

68 
lock
* 
	m¨øy_lock
;

69 
pid_öfo
* 
	mpi
;

73 
¥oc
 *
k¥oc
;

76 
¥oc_boŸ°øp
();

79 
¥oc
 *
¥oc_¸óã_ru≈rogøm
(c⁄° *
«me
);

82 
¥oc_de°roy
(
¥oc
 *proc);

85 
¥oc_addthªad
(
¥oc
 *¥oc, 
thªad
 *
t
);

88 
¥oc_ªmthªad
(
thªad
 *
t
);

91 
addr•a˚
 *
¥oc_gëas
();

94 
addr•a˚
 *
¥oc_£ès
(addrspace *);

96 
¥oc_öô
(
¥oc
*Öroc);

98 
fd_íåy
* 
gë
(
¨øy
* 
¨r
, 
fd
, * 
ödex
);

100 
fd_¨øy_c›y
(
¥oc
* 
§˝roc
,¥oc* 
d°¥oc
);

	@include/setjmp.h

30 #i‚de‡
_SETJMP_H_


31 
	#_SETJMP_H_


	)

38 
	~<kîn/machöe/£tjmp.h
>

40 
£tjmp
(
jmp_buf
 
jb
);

41 
l⁄gjmp
(
jmp_buf
 
jb
, 
ªtvÆ
);

	@include/sfs.h

30 #i‚de‡
_SFS_H_


31 
	#_SFS_H_


	)

42 
	~<fs.h
>

43 
	~<vnode.h
>

49 
	~<kîn/sfs.h
>

54 
	ssfs_vnode
 {

55 
vnode
 
	msv_absvn
;

56 
sfs_döode
 
	msv_i
;

57 
uöt32_t
 
	msv_öo
;

58 
boﬁ
 
	msv_dúty
;

64 
	ssfs_fs
 {

65 
fs
 
	msfs_absfs
;

66 
sfs_su≥rblock
 
	msfs_sb
;

67 
boﬁ
 
	msfs_su≥rdúty
;

68 
devi˚
 *
	msfs_devi˚
;

69 
vnodóºay
 *
	msfs_vnodes
;

70 
bôm≠
 *
	msfs_‰ìm≠
;

71 
boﬁ
 
	msfs_‰ìm≠dúty
;

77 
sfs_mou¡
(c⁄° *
devi˚
);

	@include/signal.h

30 #i‚de‡
_SIGNAL_H_


31 
	#_SIGNAL_H_


	)

35 
	~<kîn/machöe/sig«l.h
>

36 
	~<kîn/sig«l.h
>

	@include/spinlock.h

30 #i‚de‡
_SPINLOCK_H_


31 
	#_SPINLOCK_H_


	)

38 
	~<cdefs.h
>

41 #i‚de‡
SPINLOCK_INLINE


42 
	#SPINLOCK_INLINE
 
INLINE


	)

46 
	~<machöe/•ölock.h
>

57 
	s•ölock
 {

58 vﬁ©ûê
•ölock_d©a_t
 
	m•lk_lock
;

59 
˝u
 *
	m•lk_hﬁdî
;

65 
	#SPINLOCK_INITIALIZER
 { 
SPINLOCK_DATA_INITIALIZER
, 
NULL
 }

	)

79 
•ölock_öô
(
•ölock
 *
lk
);

80 
•ölock_˛ónup
(
•ölock
 *
lk
);

82 
•ölock_acquúe
(
•ölock
 *
lk
);

83 
•ölock_ªÀa£
(
•ölock
 *
lk
);

85 
boﬁ
 
•ölock_do_i_hﬁd
(
•ölock
 *
lk
);

	@include/spl.h

30 #i‚de‡
_SPL_H_


31 
	#_SPL_H_


	)

33 
	~<cdefs.h
>

36 #i‚de‡
SPL_INLINE


37 
	#SPL_INLINE
 
INLINE


	)

70 
SPL_INLINE
 
•l0
();

71 
SPL_INLINE
 
•lhigh
();

72 
•lx
();

77 
	#IPL_NONE
 0

	)

78 
	#IPL_HIGH
 1

	)

89 
•Ãai£
(
ﬁdùl
, 
√wùl
);

90 
•Œowî
(
ﬁdùl
, 
√wùl
);

94 
SPL_INLINE


96 
	$•l0
()

98  
	`•lx
(
IPL_NONE
);

99 
	}
}

101 
SPL_INLINE


103 
	$•lhigh
()

105  
	`•lx
(
IPL_HIGH
);

106 
	}
}

	@include/stat.h

30 #i‚de‡
_STAT_H_


31 
	#_STAT_H_


	)

34 
	~<kîn/°©.h
>

37 
	~<kîn/°©ty≥s.h
>

40 
	#S_IFMT
 
_S_IFMT


	)

41 
	#S_IFREG
 
_S_IFREG


	)

42 
	#S_IFDIR
 
_S_IFDIR


	)

43 
	#S_IFLNK
 
_S_IFLNK


	)

44 
	#S_IFIFO
 
_S_IFIFO


	)

45 
	#S_IFSOCK
 
_S_IFSOCK


	)

46 
	#S_IFCHR
 
_S_IFCHR


	)

47 
	#S_IFBLK
 
_S_IFBLK


	)

	@include/stdarg.h

30 #i‚de‡
_STDARG_H_


31 
	#_STDARG_H_


	)

35 
	~<cdefs.h
>

45 #ifde‡
__GNUC__


46 
__va_li°
 
	tva_li°
;

48 #i‡
__GNUC__
 < 4 || (__GNUC__ =4 && 
__GNUC_MINOR__
 < 8)

49 
	#va_°¨t
(
≠
, 
fmt
Ë
	`__buûtö_°d¨g_°¨t
◊p, fmt)

	)

51 
	#va_°¨t
(
≠
, 
fmt
Ë
	`__buûtö_va_°¨t
◊p, fmt)

	)

53 
	#va_¨g
(
≠
,
t
Ë
	`__buûtö_va_¨g
◊p,Å)

	)

54 
	#va_c›y
(
≠1
, 
≠2
Ë
	`__buûtö_va_c›y
◊p1,áp2)

	)

55 
	#va_íd
(
≠
Ë
	`__buûtö_va_íd
◊p)

	)

65 
	$vk¥ötf
(c⁄° *
fmt
, 
va_li°
 
≠
Ë
	`__PF
(1,0);

66 
	$v¢¥ötf
(*
buf
, 
size_t
 
maxÀn
, c⁄° *
fmt
, 
va_li°
 
≠
Ë
	`__PF
(3,0);

75 
	`__v¥ötf
((*
func
)(*
˛õ¡d©a
, c⁄° *
°r
, 
size_t
 
Àn
),

76 *
˛õ¡d©a
, c⁄° *
f‹m©
, 
va_li°
 
≠
Ë
	`__PF
(3,0);

	@include/synch.h

30 #i‚de‡
_SYNCH_H_


31 
	#_SYNCH_H_


	)

38 
	~<•ölock.h
>

46 
	s£m≠h‹e
 {

47 *
	m£m_«me
;

48 
wch™
 *
	m£m_wch™
;

49 
•ölock
 
	m£m_lock
;

50 vﬁ©ûê
	m£m_cou¡
;

53 
£m≠h‹e
 *
£m_¸óã
(c⁄° *
«me
, 
öôül_cou¡
);

54 
£m_de°roy
(
£m≠h‹e
 *);

62 
P
(
£m≠h‹e
 *);

63 
V
(
£m≠h‹e
 *);

75 
	slock
 {

76 *
	mlk_«me
;

80 *
	mlk_hﬁdî
;

81 
wch™
 *
	mlk_wch™
;

82 
•ölock
 
	mlk_¶ock
;

86 
lock
 *
lock_¸óã
(c⁄° *
«me
);

87 
lock_de°roy
(
lock
 *);

100 
lock_acquúe
(
lock
 *);

101 
lock_ªÀa£
(
lock
 *);

102 
boﬁ
 
lock_do_i_hﬁd
(
lock
 *);

119 
	scv
 {

120 *
	mcv_«me
;

124 
wch™
 *
	mcv_wch™
;

125 
•ölock
 
	mcv_¶ock
;

128 
cv
 *
cv_¸óã
(c⁄° *
«me
);

129 
cv_de°roy
(
cv
 *);

144 
cv_waô
(
cv
 *cv, 
lock
 *lock);

145 
cv_sig«l
(
cv
 *cv, 
lock
 *lock);

146 
cv_brﬂdˇ°
(
cv
 *cv, 
lock
 *lock);

	@include/syscall.h

30 #i‚de‡
_SYSCALL_H_


31 
	#_SYSCALL_H_


	)

34 
	~<cdefs.h
>

35 
	gå≠‰ame
;

41 
sysˇŒ
(
å≠‰ame
 *
tf
);

48 
íãr_f‹ked_¥o˚ss
(*
tf
,
nŸu£d
);

51 
__DEAD
 
íãr_√w_¥o˚ss
(
¨gc
, 
u£Ωå_t
 
¨gv
, u£Ωå_à
ív
,

52 
vaddr_t
 
°ack±r
, vaddr_à
íåypoöt
);

59 
sys_ªboŸ
(
code
);

60 
sys___time
(
u£Ωå_t
 
u£r_£c⁄ds
, u£Ωå_à
u£r_«no£c⁄ds
);

64 
sys_wrôe
 (
fd
, c⁄° *
buf
, 
size_t
 
nbyãs
,
öt32_t
* 
ªtVÆ
);

66 
sys_›í
 (c⁄° *
fûíame
, 
Êags
, 
mode_t
 
mode
,
öt32_t
* 
ªtVÆ
);

68 
sys_˛o£
 (
fd
);

69 
sys_ªad
 (
fd
, *
buf
, 
size_t
 
buÊí
,
öt32_t
* 
ªtVÆ
);

70 
sys_l£ek
(
fd
, 
off_t
 
pos
, 
whí˚
,off_t* 
ªtvÆ
);

71 
sys_dup2
(
ﬁdfd
, 
√wfd
,
öt32_t
* 
ªtvÆ
);

72 
sys___gëcwd
(*
buf
, 
size_t
 
buÊí
, 
öt32_t
* 
ªtvÆ
);

73 
sys_chdú
(c⁄° *
∑th«me
, 
öt32_t
* 
ªtvÆ
);

74 
sys_f‹k
(
å≠‰ame
* 
tf
,(*
íåypoöt
)(*
d©a1
, 
d©a2
),
öt32_t
* 
ªtvÆ
);

75 
	`sys_gëpid
(
öt32_t
* 
ªtvÆ
);

76 
	`sys__exô
(
öt32_t
 
exô_code
);

77 
	`sys_waôpid
(
pid_t
 
pid
,* 
°©us
,
›ti⁄s
,
öt32_t
* 
ªtvÆ
);

78 
	`sys_execv
(c⁄° * 
¥ogøm
,** 
¨gs
);

80 
	`kwaôpid
(
pid_t
 
pid
);

81 
	`kexô
(
öt32_t
 
exô_code
);

	@include/test.h

30 #i‚de‡
_TEST_H_


31 
	#_TEST_H_


	)

41 
aúbÆlo⁄
(, **);

48 
¨øyã°
(, **);

49 
bôm≠ã°
(, **);

50 
thªadli°ã°
(, **);

53 
thªadã°
(, **);

54 
thªadã°2
(, **);

55 
thªadã°3
(, **);

56 
£mã°
(, **);

57 
lockã°
(, **);

58 
cvã°
(, **);

59 
cvã°2
(, **);

62 
f°e°
(, **);

63 
ªad°ªss
(, **);

64 
wrôe°ªss
(, **);

65 
wrôe°ªss2
(, **);

66 
l⁄g°ªss
(, **);

67 
¸óã°ªss
(, **);

68 
¥ötfûe
(, **);

71 
mÆlo˘e°
(, **);

72 
mÆloc°ªss
(, **);

73 
mÆlo˘e°3
(, **);

74 
mÆlo˘e°4
(, **);

75 
√âe°
(, **);

78 
ru≈rogøm
(*
¥og«me
);

81 
míu
(*
¨g°r
);

84 
kmaö
(*
boŸ°rög
);

	@include/thread.h

30 #i‚de‡
_THREAD_H_


31 
	#_THREAD_H_


	)

39 
	~<¨øy.h
>

40 
	~<•ölock.h
>

41 
	~<thªadli°.h
>

43 
	g˝u
;

46 
	~<machöe/thªad.h
>

50 
	#STACK_SIZE
 4096

	)

53 
	#STACK_MASK
 (~(
vaddr_t
)(
STACK_SIZE
-1))

	)

56 
	#SAME_STACK
(
p1
, 
p2
Ë((’1Ë& 
STACK_MASK
Ë=(’2Ë& STACK_MASK))

	)

61 
	mS_RUN
,

62 
	mS_READY
,

63 
	mS_SLEEP
,

64 
	mS_ZOMBIE
,

65 } 
	tthªad°©e_t
;

68 
	sthªad
 {

73 *
	mt_«me
;

74 c⁄° *
	mt_wch™_«me
;

75 
thªad°©e_t
 
	mt_°©e
;

80 
thªad_machdï
 
	mt_machdï
;

81 
thªadli°node
 
	mt_li°node
;

82 *
	mt_°ack
;

83 
swôch‰ame
 *
	mt_c⁄ãxt
;

84 
˝u
 *
	mt_˝u
;

85 
¥oc
 *
	mt_¥oc
;

100 
boﬁ
 
	mt_ö_öãºu±
;

101 
	mt_cur•l
;

102 
	mt_ùlhigh_cou¡
;

114 #i‚de‡
THREADINLINE


115 
	#THREADINLINE
 
INLINE


	)

118 
DECLARRAY
(
thªad
, 
THREADINLINE
);

119 
DEFARRAY
(
thªad
, 
THREADINLINE
);

122 
thªad_boŸ°øp
();

125 
thªad_°¨t_˝us
();

128 
thªad_∑nic
();

131 
thªad_shutdown
();

143 
thªad_f‹k
(c⁄° *
«me
, 
¥oc
 *proc,

144 (*
func
)(*, ),

145 *
d©a1
, 
d©a2
);

151 
__DEAD
 
	`thªad_exô
();

158 
	`thªad_yõld
();

163 
	`scheduÀ
();

169 
	`thªad_c⁄sidî_migøti⁄
();

	@include/threadlist.h

30 #i‚de‡
_THREADLIST_H_


31 
	#_THREADLIST_H_


	)

34 
	gthªad
;

53 
	sthªadli°node
 {

54 
thªadli°node
 *
	mén_¥ev
;

55 
thªadli°node
 *
	mén_√xt
;

56 
thªad
 *
	mén_£lf
;

59 
	sthªadli°
 {

60 
thªadli°node
 
	mé_hód
;

61 
thªadli°node
 
	mé_èû
;

62 
	mé_cou¡
;

66 
thªadli°node_öô
(
thªadli°node
 *
én
, 
thªad
 *
£lf
);

67 
thªadli°node_˛ónup
(
thªadli°node
 *
én
);

70 
thªadli°_öô
(
thªadli°
 *
é
);

71 
thªadli°_˛ónup
(
thªadli°
 *
é
);

74 
boﬁ
 
thªadli°_i£m±y
(
thªadli°
 *
é
);

77 
thªadli°_addhód
(
thªadli°
 *
é
, 
thªad
 *
t
);

78 
thªadli°_addèû
(
thªadli°
 *
é
, 
thªad
 *
t
);

79 
thªad
 *
thªadli°_ªmhód
(
thªadli°
 *
é
);

80 
thªad
 *
thªadli°_ªmèû
(
thªadli°
 *
é
);

83 
thªadli°_ö£πa·î
(
thªadli°
 *
é
,

84 
thªad
 *
⁄li°
, thªad *
addì
);

85 
thªadli°_ö£πbef‹e
(
thªadli°
 *
é
,

86 
thªad
 *
addì
, thªad *
⁄li°
);

87 
thªadli°_ªmove
(
thªadli°
 *
é
, 
thªad
 *
t
);

90 
	#THREADLIST_FORALL
(
ôîv¨
, 
é
) \

91 (
ôîv¨
Ë(
é
).
é_hód
.
én_√xt
->
én_£lf
; \

92 (
ôîv¨
Ë!
NULL
; \

93 (
ôîv¨
Ë(ôîv¨)->
t_li°node
.
én_√xt
->
én_£lf
)

	)

95 
	#THREADLIST_FORALL_REV
(
ôîv¨
, 
é
) \

96 (
ôîv¨
Ë(
é
).
é_èû
.
én_¥ev
->
én_£lf
; \

97 (
ôîv¨
Ë!
NULL
; \

98 (
ôîv¨
Ë(ôîv¨)->
t_li°node
.
én_¥ev
->
én_£lf
)

	)

	@include/threadprivate.h

30 #i‚de‡
_THREADPRIVATE_H_


31 
	#_THREADPRIVATE_H_


	)

33 
	gthªad
;

34 
	gthªad_machdï
;

35 
	gswôch‰ame
;

55 
thªad_°¨tup
((*
íåypoöt
)(*
d©a1
, 
d©a2
),

56 *
d©a1
, 
d©a2
);

59 
	`thªad_machdï_öô
(
thªad_machdï
 *
tm
);

60 
	`thªad_machdï_˛ónup
(
thªad_machdï
 *
tm
);

70 
	`swôch‰ame_swôch
(
swôch‰ame
 **
¥ev
, swôch‰amê**
√xt
);

73 
	`swôch‰ame_öô
(
thªad
 *,

74 (*
íåypoöt
)(*
d©a1
, 
d©a2
),

75 *
d©a1
, 
d©a2
);

	@include/types.h

30 #i‚de‡
_TYPES_H_


31 
	#_TYPES_H_


	)

80 
	~<kîn/ty≥s.h
>

83 
	~<machöe/ty≥s.h
>

90 
	s__u£Ωå
 { 
	m_dummy
; };

91 
__u£Ωå
 *
	tu£Ωå_t
;

92 c⁄° 
	t__u£Ωå
 *
	tc⁄°_u£Ωå_t
;

100 
__i8
 
	töt8_t
;

101 
__i16
 
	töt16_t
;

102 
__i32
 
	töt32_t
;

103 
__i64
 
	töt64_t
;

104 
__u8
 
	tuöt8_t
;

105 
__u16
 
	tuöt16_t
;

106 
__u32
 
	tuöt32_t
;

107 
__u64
 
	tuöt64_t
;

108 
__size_t
 
	tsize_t
;

109 
__ssize_t
 
	tssize_t
;

110 
__öçå_t
 
	töçå_t
;

111 
__uöçå_t
 
	tuöçå_t
;

112 
__±rdiff_t
 
	t±rdiff_t
;

115 
__blk˙t_t
 
	tblk˙t_t
;

116 
__blksize_t
 
	tblksize_t
;

117 
__daddr_t
 
	tdaddr_t
;

118 
__dev_t
 
	tdev_t
;

119 
__fsid_t
 
	tfsid_t
;

120 
__gid_t
 
	tgid_t
;

121 
__ö_addr_t
 
	tö_addr_t
;

122 
__ö_p‹t_t
 
	tö_p‹t_t
;

123 
__öo_t
 
	töo_t
;

124 
__mode_t
 
	tmode_t
;

125 
__∆ök_t
 
	t∆ök_t
;

126 
__off_t
 
	toff_t
;

127 
__pid_t
 
	tpid_t
;

128 
__æim_t
 
	tæim_t
;

129 
__ß_Ámûy_t
 
	tß_Ámûy_t
;

130 
__time_t
 
	ttime_t
;

131 
__uid_t
 
	tuid_t
;

133 
__nfds_t
 
	tnfds_t
;

134 
__sockÀn_t
 
	tsockÀn_t
;

140 
	#CHAR_BIT
 
__CHAR_BIT


	)

146 
	#NULL
 ((*)0)

	)

151 
_Boﬁ
 
	tboﬁ
;

152 
	#åue
 1

	)

153 
	#Ál£
 0

	)

	@include/uio.h

30 #i‚de‡
_UIO_H_


31 
	#_UIO_H_


	)

58 
	~<kîn/iovec.h
>

61 
	euio_rw
 {

62 
	mUIO_READ
,

63 
	mUIO_WRITE
,

67 
	euio_£g
 {

68 
	mUIO_USERISPACE
,

69 
	mUIO_USERSPACE
,

70 
	mUIO_SYSSPACE
,

73 
	suio
 {

74 
iovec
 *
	muio_iov
;

75 
	muio_iov˙t
;

76 
off_t
 
	muio_off£t
;

77 
size_t
 
	muio_ªsid
;

78 
uio_£g
 
	muio_£gÊg
;

79 
uio_rw
 
	muio_rw
;

80 
addr•a˚
 *
	muio_•a˚
;

119 
uiomove
(*
kbuf„r
, 
size_t
 
Àn
, 
uio
 *uio);

124 
uiomovezîos
(
size_t
 
Àn
, 
uio
 *uio);

138 
uio_köô
(
iovec
 *, 
uio
 *,

139 *
kbuf
, 
size_t
 
Àn
, 
off_t
 
pos
, 
uio_rw
 
rw
);

	@include/version.h

30 #i‚de‡
_VERSION_H_


31 
	#_VERSION_H_


	)

37 
	#BASE_VERSION
 "1.99.08"

	)

42 
	#GROUP_VERSION
 "0"

	)

	@include/vfs.h

30 #i‚de‡
_VFS_H_


31 
	#_VFS_H_


	)

34 
	~<¨øy.h
>

44 
	guio
;

45 
	gdevi˚
;

46 
	gfs
;

47 
	gvnode
;

62 
vfs_£tcurdú
(
vnode
 *
dú
);

63 
vfs_˛órcurdú
();

64 
vfs_gëcurdú
(
vnode
 **
ªtdú
);

65 
vfs_sync
();

66 
vfs_gëroŸ
(c⁄° *
dev«me
, 
vnode
 **
ªsu…
);

67 c⁄° *
vfs_gëdev«me
(
fs
 *fs);

80 
vfs_lookup
(*
∑th
, 
vnode
 **
ªsu…
);

81 
vfs_look∑ª¡
(*
∑th
, 
vnode
 **
ªsu…
,

82 *
buf
, 
size_t
 
buÊí
);

104 
vfs_›í
(*
∑th
, 
›íÊags
, 
mode_t
 
mode
, 
vnode
 **
ªt
);

105 
vfs_˛o£
(
vnode
 *
vn
);

106 
vfs_ªadlök
(*
∑th
, 
uio
 *
d©a
);

107 
vfs_symlök
(c⁄° *
c⁄ã¡s
, *
∑th
);

108 
vfs_mkdú
(*
∑th
, 
mode_t
 
mode
);

109 
vfs_lök
(*
ﬁd∑th
, *
√w∑th
);

110 
vfs_ªmove
(*
∑th
);

111 
vfs_rmdú
(*
∑th
);

112 
vfs_ª«me
(*
ﬁd∑th
, *
√w∑th
);

114 
vfs_chdú
(*
∑th
);

115 
vfs_gëcwd
(
uio
 *
buf
);

162 
vfs_boŸ°øp
();

164 
vfs_£tboŸfs
(c⁄° *
f¢ame
);

165 
vfs_˛órboŸfs
();

167 
vfs_adddev
(c⁄° *
dev«me
, 
devi˚
 *
dev
, 
mou¡abÀ
);

168 
vfs_addfs
(c⁄° *
dev«me
, 
fs
 *fs);

170 
vfs_mou¡
(c⁄° *
dev«me
, *
d©a
,

171 (*
mou¡func
)(*
d©a
,

172 
devi˚
 *
dev
,

173 
fs
 **
ªsu…
));

174 
	`vfs_unmou¡
(c⁄° *
dev«me
);

175 
	`vfs_unmou¡Æl
();

180 #i‚de‡
VFSINLINE


181 
	#VFSINLINE
 
INLINE


	)

184 
	`DECLARRAY
(
vnode
, 
VFSINLINE
);

185 
	`DEFARRAY
(
vnode
, 
VFSINLINE
);

191 
	`vfs_biglock_acquúe
();

192 
	`vfs_biglock_ªÀa£
();

193 
boﬁ
 
	`vfs_biglock_do_i_hﬁd
();

	@include/vm.h

30 #i‚de‡
_VM_H_


31 
	#_VM_H_


	)

40 
	~<machöe/vm.h
>

43 
	#VM_FAULT_READ
 0

	)

44 
	#VM_FAULT_WRITE
 1

	)

45 
	#VM_FAULT_READONLY
 2

	)

49 
vm_boŸ°øp
();

52 
vm_Áu…
(
Áu…ty≥
, 
vaddr_t
 
Áu…addªss
);

55 
vaddr_t
 
Æloc_k∑ges
(
≈ages
);

56 
‰ì_k∑ges
(
vaddr_t
 
addr
);

59 
vm_ébshoŸdown_Æl
();

60 
vm_ébshoŸdown
(c⁄° 
ébshoŸdown
 *);

	@include/vnode.h

30 #i‚de‡
_VNODE_H_


31 
	#_VNODE_H_


	)

33 
	~<•ölock.h
>

34 
	guio
;

35 
	g°©
;

51 
	svnode
 {

52 
	mvn_ªfcou¡
;

53 
•ölock
 
	mvn_cou¡lock
;

55 
fs
 *
	mvn_fs
;

57 *
	mvn_d©a
;

59 c⁄° 
vnode_›s
 *
	mvn_›s
;

178 
	#VOP_MAGIC
 0xa2b3c4d5

	)

180 
	svnode_›s
 {

181 
	mv›_magic
;

183 (*
	mv›_óch›í
)(
vnode
 *
	mobje˘
, 
	mÊags_‰om_›í
);

184 (*
	mv›_ª˛aim
)(
vnode
 *
	mvnode
);

187 (*
	mv›_ªad
)(
vnode
 *
	mfûe
, 
uio
 *
	muio
);

188 (*
	mv›_ªadlök
)(
vnode
 *
	mlök
, 
uio
 *
	muio
);

189 (*
	mv›_gëdúíåy
)(
vnode
 *
	mdú
, 
uio
 *
	muio
);

190 (*
	mv›_wrôe
)(
vnode
 *
	mfûe
, 
uio
 *
	muio
);

191 (*
	mv›_io˘l
)(
vnode
 *
	mobje˘
, 
	m›
, 
u£Ωå_t
 
	md©a
);

192 (*
	mv›_°©
)(
vnode
 *
	mobje˘
, 
°©
 *
	m°©buf
);

193 (*
	mv›_gëty≥
)(
vnode
 *
	mobje˘
, 
mode_t
 *
	mªsu…
);

194 
boﬁ
 (*
v›_is£ekabÀ
)(
vnode
 *
	mobje˘
);

195 (*
	mv›_fsync
)(
vnode
 *
	mobje˘
);

196 (*
	mv›_mm≠
)(
vnode
 *
	mfûe
 );

197 (*
	mv›_åunˇã
)(
vnode
 *
	mfûe
, 
off_t
 
	mÀn
);

198 (*
	mv›_«mefûe
)(
vnode
 *
	mfûe
, 
uio
 *
	muio
);

201 (*
	mv›_¸ót
)(
vnode
 *
	mdú
,

202 c⁄° *
	m«me
, 
boﬁ
 
	mex˛
, 
mode_t
 
	mmode
,

203 
vnode
 **
	mªsu…
);

204 (*
	mv›_symlök
)(
vnode
 *
	mdú
,

205 c⁄° *
	mc⁄ã¡s
, c⁄° *
	m«me
);

206 (*
	mv›_mkdú
)(
vnode
 *
	m∑ª¡dú
,

207 c⁄° *
	m«me
, 
mode_t
 
	mmode
);

208 (*
	mv›_lök
)(
vnode
 *
	mdú
,

209 c⁄° *
	m«me
, 
vnode
 *
	mfûe
);

210 (*
	mv›_ªmove
)(
vnode
 *
	mdú
,

211 c⁄° *
	m«me
);

212 (*
	mv›_rmdú
)(
vnode
 *
	mdú
,

213 c⁄° *
	m«me
);

215 (*
	mv›_ª«me
)(
vnode
 *
	mvn1
, c⁄° *
	m«me1
,

216 
vnode
 *
	mvn2
, c⁄° *
	m«me2
);

219 (*
	mv›_lookup
)(
vnode
 *
	mdú
,

220 *
	m∑th«me
, 
vnode
 **
	mªsu…
);

221 (*
	mv›_look∑ª¡
)(
vnode
 *
	mdú
,

222 *
	m∑th«me
, 
vnode
 **
	mªsu…
,

223 *
	mbuf
, 
size_t
 
	mÀn
);

226 
	#__VOP
(
vn
, 
sym
Ë(
	`vnode_check
(vn, #sym), (vn)->
vn_›s
->
v›_
##sym)

	)

228 
	#VOP_EACHOPEN
(
vn
, 
Êags
Ë(
	`__VOP
(vn, 
óch›í
)(vn, fœgs))

	)

229 
	#VOP_RECLAIM
(
vn
Ë(
	`__VOP
(vn, 
ª˛aim
)(vn))

	)

231 
	#VOP_READ
(
vn
, 
uio
Ë(
	`__VOP
(vn, 
ªad
)(vn, uio))

	)

232 
	#VOP_READLINK
(
vn
, 
uio
Ë(
	`__VOP
(vn, 
ªadlök
)(vn, uio))

	)

233 
	#VOP_GETDIRENTRY
(
vn
, 
uio
Ë(
	`__VOP
(vn,
gëdúíåy
)(vn, uio))

	)

234 
	#VOP_WRITE
(
vn
, 
uio
Ë(
	`__VOP
(vn, 
wrôe
)(vn, uio))

	)

235 
	#VOP_IOCTL
(
vn
, 
code
, 
buf
Ë(
	`__VOP
(vn, 
io˘l
)(vn,code,buf))

	)

236 
	#VOP_STAT
(
vn
, 
±r
Ë(
	`__VOP
(vn, 
°©
)(vn,Öå))

	)

237 
	#VOP_GETTYPE
(
vn
, 
ªsu…
Ë(
	`__VOP
(vn, 
gëty≥
)(vn,Ñesu…))

	)

238 
	#VOP_ISSEEKABLE
(
vn
Ë(
	`__VOP
(vn, 
is£ekabÀ
)(vn))

	)

239 
	#VOP_FSYNC
(
vn
Ë(
	`__VOP
(vn, 
fsync
)(vn))

	)

240 
	#VOP_MMAP
(
vn
 ) (
	`__VOP
(vn, 
mm≠
)(v¿ ))

	)

241 
	#VOP_TRUNCATE
(
vn
, 
pos
Ë(
	`__VOP
(vn, 
åunˇã
)(vn,Öos))

	)

242 
	#VOP_NAMEFILE
(
vn
, 
uio
Ë(
	`__VOP
(vn, 
«mefûe
)(vn, uio))

	)

244 
	#VOP_CREAT
(
vn
,
nm
,
ex˛
,
mode
,
ªs
Ë(
	`__VOP
(vn, 
¸ót
)(vn,nm,ex˛,mode,ªs))

	)

245 
	#VOP_SYMLINK
(
vn
, 
«me
, 
c⁄ã¡
Ë(
	`__VOP
(vn, 
symlök
)(vn,Çame, c⁄ã¡))

	)

246 
	#VOP_MKDIR
(
vn
, 
«me
, 
mode
Ë(
	`__VOP
(vn, 
mkdú
)(vn,Çame, mode))

	)

247 
	#VOP_LINK
(
vn
, 
«me
, 
vn2
Ë(
	`__VOP
(vn, 
lök
)(vn,Çame, vn2))

	)

248 
	#VOP_REMOVE
(
vn
, 
«me
Ë(
	`__VOP
(vn, 
ªmove
)(vn,Çame))

	)

249 
	#VOP_RMDIR
(
vn
, 
«me
Ë(
	`__VOP
(vn, 
rmdú
)(vn,Çame))

	)

250 
	#VOP_RENAME
(
vn1
,
«me1
,
vn2
,
«me2
)(
	`__VOP
(vn1,
ª«me
)(vn1,«me1,vn2,«me2))

	)

252 
	#VOP_LOOKUP
(
vn
, 
«me
, 
ªs
Ë(
	`__VOP
(vn, 
lookup
)(vn,Çame,Ñes))

	)

253 
	#VOP_LOOKPARENT
(
vn
,
nm
,
ªs
,
bf
,
 
Ë(
	`__VOP
(vn,
look∑ª¡
)(vn,nm,ªs,bf, ))

	)

258 
vnode_check
(
vnode
 *, c⁄° *
›
);

263 
vnode_ö¸ef
(
vnode
 *);

264 
vnode_de¸ef
(
vnode
 *);

266 
	#VOP_INCREF
(
vn
Ë
	`vnode_ö¸ef
(vn)

	)

267 
	#VOP_DECREF
(
vn
Ë
	`vnode_de¸ef
(vn)

	)

273 
vnode_öô
(
vnode
 *, c⁄° 
vnode_›s
 *
›s
,

274 
fs
 *fs, *
fsd©a
);

280 
vnode_˛ónup
(
vnode
 *);

285 
v›Áû_uio_nŸdú
(
vnode
 *
vn
, 
uio
 *uio);

286 
v›Áû_uio_isdú
(
vnode
 *
vn
, 
uio
 *uio);

287 
v›Áû_uio_övÆ
(
vnode
 *
vn
, 
uio
 *uio);

288 
v›Áû_uio_nosys
(
vnode
 *
vn
, 
uio
 *uio);

289 
v›Áû_mm≠_isdú
(
vnode
 *
vn
 );

290 
v›Áû_mm≠_≥rm
(
vnode
 *
vn
 );

291 
v›Áû_mm≠_nosys
(
vnode
 *
vn
 );

292 
v›Áû_åunˇã_isdú
(
vnode
 *
vn
, 
off_t
 
pos
);

293 
v›Áû_¸ót_nŸdú
(
vnode
 *
vn
, c⁄° *
«me
, 
boﬁ
 
ex˛
,

294 
mode_t
 
mode
, 
vnode
 **
ªsu…
);

295 
v›Áû_symlök_nŸdú
(
vnode
 *
vn
, c⁄° *
c⁄ã¡s
,

296 c⁄° *
«me
);

297 
v›Áû_symlök_nosys
(
vnode
 *
vn
, c⁄° *
c⁄ã¡s
,

298 c⁄° *
«me
);

299 
v›Áû_mkdú_nŸdú
(
vnode
 *
vn
, c⁄° *
«me
, 
mode_t
 
mode
);

300 
v›Áû_mkdú_nosys
(
vnode
 *
vn
, c⁄° *
«me
, 
mode_t
 
mode
);

301 
v›Áû_lök_nŸdú
(
vnode
 *
dú
, c⁄° *
«me
,

302 
vnode
 *
fûe
);

303 
v›Áû_lök_nosys
(
vnode
 *
dú
, c⁄° *
«me
,

304 
vnode
 *
fûe
);

305 
v›Áû_°rög_nŸdú
(
vnode
 *
vn
, c⁄° *
«me
);

306 
v›Áû_°rög_nosys
(
vnode
 *
vn
, c⁄° *
«me
);

307 
v›Áû_ª«me_nŸdú
(
vnode
 *
‰omdú
, c⁄° *
‰om«me
,

308 
vnode
 *
todú
, c⁄° *
t⁄ame
);

309 
v›Áû_ª«me_nosys
(
vnode
 *
‰omdú
, c⁄° *
‰om«me
,

310 
vnode
 *
todú
, c⁄° *
t⁄ame
);

311 
v›Áû_lookup_nŸdú
(
vnode
 *
vn
, *
∑th
, vnodê**
ªsu…
);

312 
v›Áû_look∑ª¡_nŸdú
(
vnode
 *
vn
, *
∑th
,

313 
vnode
 **
ªsu…
, *
buf
, 
size_t
 
Àn
);

	@include/wchan.h

30 #i‚de‡
_WCHAN_H_


31 
	#_WCHAN_H_


	)

38 
	g•ölock
;

39 
	gwch™
;

46 
wch™
 *
wch™_¸óã
(c⁄° *
«me
);

51 
wch™_de°roy
(
wch™
 *
wc
);

57 
boﬁ
 
wch™_i£m±y
(
wch™
 *
wc
, 
•ölock
 *
lk
);

67 
wch™_¶ìp
(
wch™
 *
wc
, 
•ölock
 *
lk
);

76 
wch™_wake⁄e
(
wch™
 *
wc
, 
•ölock
 *
lk
);

77 
wch™_wakóŒ
(
wch™
 *
wc
, 
•ölock
 *
lk
);

	@lib/array.c

30 
	#ARRAYINLINE


	)

32 
	~<ty≥s.h
>

33 
	~<kîn/î∫o.h
>

34 
	~<lib.h
>

35 
	~<¨øy.h
>

37 
¨øy
 *

38 
	$¨øy_¸óã
()

40 
¨øy
 *
a
;

42 
a
 = 
	`kmÆloc
((*a));

43 i‡(
a
 !
NULL
) {

44 
	`¨øy_öô
(
a
);

46  
a
;

47 
	}
}

50 
	$¨øy_de°roy
(
¨øy
 *
a
)

52 
	`¨øy_˛ónup
(
a
);

53 
	`k‰ì
(
a
);

54 
	}
}

57 
	$¨øy_öô
(
¨øy
 *
a
)

59 
a
->
num
 =á->
max
 = 0;

60 
a
->
v
 = 
NULL
;

61 
	}
}

64 
	$¨øy_˛ónup
(
¨øy
 *
a
)

71 
	`ARRAYASSERT
(
a
->
num
 == 0);

72 
	`k‰ì
(
a
->
v
);

73 #ifde‡
ARRAYS_CHECKED


74 
a
->
v
 = 
NULL
;

76 
	}
}

79 
	$¨øy_¥óŒoˇã
(
¨øy
 *
a
, 
num
)

81 **
√w±r
;

82 
√wmax
;

84 i‡(
num
 > 
a
->
max
) {

86 
√wmax
 = 
a
->
max
;

87 
num
 > 
√wmax
) {

88 
√wmax
 =Çewmax ?Çewmax*2 : 4;

98 
√w±r
 = 
	`kmÆloc
(
√wmax
*(*
a
->
v
));

99 i‡(
√w±r
 =
NULL
) {

100  
ENOMEM
;

102 
	`mem˝y
(
√w±r
, 
a
->
v
,á->
num
*(*a->v));

103 
	`k‰ì
(
a
->
v
);

104 
a
->
v
 = 
√w±r
;

105 
a
->
max
 = 
√wmax
;

108 
	}
}

111 
	$¨øy_£tsize
(
¨øy
 *
a
, 
num
)

113 
ªsu…
;

115 
ªsu…
 = 
	`¨øy_¥óŒoˇã
(
a
, 
num
);

116 i‡(
ªsu…
) {

117  
ªsu…
;

119 
a
->
num
 =Çum;

122 
	}
}

125 
	$¨øy_ªmove
(
¨øy
 *
a
, 
ödex
)

127 
num_to_move
;

129 
	`ARRAYASSERT
(
a
->
num
 <a->
max
);

130 
	`ARRAYASSERT
(
ödex
 < 
a
->
num
);

132 
num_to_move
 = 
a
->
num
 - (
ödex
 + 1);

133 
	`memmove
(
a
->
v
 + 
ödex
,á->v + index+1, 
num_to_move
*(*));

134 
a
->
num
--;

135 
	}
}

	@lib/bitmap.c

34 
	~<ty≥s.h
>

35 
	~<kîn/î∫o.h
>

36 
	~<lib.h
>

37 
	~<bôm≠.h
>

46 
	#BITS_PER_WORD
 (
CHAR_BIT
)

	)

47 
	#WORD_TYPE
 

	)

48 
	#WORD_ALLBITS
 (0xff)

	)

50 
	sbôm≠
 {

51 
	mnbôs
;

52 
WORD_TYPE
 *
	mv
;

56 
bôm≠
 *

57 
	$bôm≠_¸óã
(
nbôs
)

59 
bôm≠
 *
b
;

60 
w‹ds
;

62 
w‹ds
 = 
	`DIVROUNDUP
(
nbôs
, 
BITS_PER_WORD
);

63 
b
 = 
	`kmÆloc
((
bôm≠
));

64 i‡(
b
 =
NULL
) {

65  
NULL
;

67 
b
->
v
 = 
	`kmÆloc
(
w‹ds
*(
WORD_TYPE
));

68 i‡(
b
->
v
 =
NULL
) {

69 
	`k‰ì
(
b
);

70  
NULL
;

73 
	`bzîo
(
b
->
v
, 
w‹ds
*(
WORD_TYPE
));

74 
b
->
nbôs
 =Çbits;

77 i‡(
w‹ds
 > 
nbôs
 / 
BITS_PER_WORD
) {

78 
j
, 
ix
 = 
w‹ds
-1;

79 
ovîbôs
 = 
nbôs
 - 
ix
*
BITS_PER_WORD
;

81 
	`KASSERT
(
nbôs
 / 
BITS_PER_WORD
 =
w‹ds
-1);

82 
	`KASSERT
(
ovîbôs
 > 0 && ovîbô†< 
BITS_PER_WORD
);

84 
j
=
ovîbôs
; j<
BITS_PER_WORD
; j++) {

85 
b
->
v
[
ix
] |((
WORD_TYPE
)1 << 
j
);

89  
b
;

90 
	}
}

93 
	$bôm≠_gëd©a
(
bôm≠
 *
b
)

95  
b
->
v
;

96 
	}
}

99 
	$bôm≠_Æloc
(
bôm≠
 *
b
, *
ödex
)

101 
ix
;

102 
maxix
 = 
	`DIVROUNDUP
(
b
->
nbôs
, 
BITS_PER_WORD
);

103 
off£t
;

105 
ix
=0; ix<
maxix
; ix++) {

106 i‡(
b
->
v
[
ix
]!=
WORD_ALLBITS
) {

107 
off£t
 = 0; off£à< 
BITS_PER_WORD
; offset++) {

108 
WORD_TYPE
 
mask
 = ((WORD_TYPE)1Ë<< 
off£t
;

110 i‡((
b
->
v
[
ix
] & 
mask
)==0) {

111 
b
->
v
[
ix
] |
mask
;

112 *
ödex
 = (
ix
*
BITS_PER_WORD
)+
off£t
;

113 
	`KASSERT
(*
ödex
 < 
b
->
nbôs
);

117 
	`KASSERT
(0);

120  
ENOSPC
;

121 
	}
}

124 
ölöe


126 
	$bôm≠_å™¶©e
(
bôno
, *
ix
, 
WORD_TYPE
 *
mask
)

128 
off£t
;

129 *
ix
 = 
bôno
 / 
BITS_PER_WORD
;

130 
off£t
 = 
bôno
 % 
BITS_PER_WORD
;

131 *
mask
 = ((
WORD_TYPE
)1Ë<< 
off£t
;

132 
	}
}

135 
	$bôm≠_m¨k
(
bôm≠
 *
b
, 
ödex
)

137 
ix
;

138 
WORD_TYPE
 
mask
;

140 
	`KASSERT
(
ödex
 < 
b
->
nbôs
);

141 
	`bôm≠_å™¶©e
(
ödex
, &
ix
, &
mask
);

143 
	`KASSERT
((
b
->
v
[
ix
] & 
mask
)==0);

144 
b
->
v
[
ix
] |
mask
;

145 
	}
}

148 
	$bôm≠_unm¨k
(
bôm≠
 *
b
, 
ödex
)

150 
ix
;

151 
WORD_TYPE
 
mask
;

153 
	`KASSERT
(
ödex
 < 
b
->
nbôs
);

154 
	`bôm≠_å™¶©e
(
ödex
, &
ix
, &
mask
);

156 
	`KASSERT
((
b
->
v
[
ix
] & 
mask
)!=0);

157 
b
->
v
[
ix
] &~
mask
;

158 
	}
}

162 
	$bôm≠_is£t
(
bôm≠
 *
b
, 
ödex
)

164 
ix
;

165 
WORD_TYPE
 
mask
;

167 
	`bôm≠_å™¶©e
(
ödex
, &
ix
, &
mask
);

168  (
b
->
v
[
ix
] & 
mask
);

169 
	}
}

172 
	$bôm≠_de°roy
(
bôm≠
 *
b
)

174 
	`k‰ì
(
b
->
v
);

175 
	`k‰ì
(
b
);

176 
	}
}

	@lib/bswap.c

30 
	~<ty≥s.h
>

31 
	~<ídün.h
>

46 
uöt16_t


47 
	$bsw≠16
(
uöt16_t
 
vÆ
)

49  ((
vÆ
 & 0x00ff) << 8)

50 | ((
vÆ
 & 0xff00) >> 8);

51 
	}
}

53 
uöt32_t


54 
	$bsw≠32
(
uöt32_t
 
vÆ
)

56  ((
vÆ
 & 0x000000ff) << 24)

57 | ((
vÆ
 & 0x0000ff00) << 8)

58 | ((
vÆ
 & 0x00ff0000) >> 8)

59 | ((
vÆ
 & 0xff000000) >> 24);

60 
	}
}

62 
uöt64_t


63 
	$bsw≠64
(
uöt64_t
 
vÆ
)

65  ((
vÆ
 & 0x00000000000000ff) << 56)

66 | ((
vÆ
 & 0x000000000000ff00) << 40)

67 | ((
vÆ
 & 0x0000000000ff0000) << 24)

68 | ((
vÆ
 & 0x00000000ff000000) << 8)

69 | ((
vÆ
 & 0x000000ff00000000) << 8)

70 | ((
vÆ
 & 0x0000ff0000000000) << 24)

71 | ((
vÆ
 & 0x00ff000000000000) >> 40)

72 | ((
vÆ
 & 0xff00000000000000) >> 56);

73 
	}
}

94 #i‡
_BYTE_ORDER
 =
_LITTLE_ENDIAN


95 
	#TO
(
èg
, 
bôs
, 
ty≥
) \

96 
ty≥
 
¡oh
##
	`èg
—y≥ 
vÆ
Ë{  
bsw≠
##
	`bôs
(val); } \

97 
ty≥
 
ht⁄
##
	`èg
—y≥ 
vÆ
Ë{  
bsw≠
##
	`bôs
(vÆ); }

	)

105 #i‡
_BYTE_ORDER
 =
_BIG_ENDIAN


106 
	#TO
(
èg
, 
bôs
, 
ty≥
) \

107 
ty≥
 
¡oh
##
	`èg
—y≥ 
vÆ
) {  val; } \

108 
ty≥
 
ht⁄
##
	`èg
—y≥ 
vÆ
Ë{  vÆ; }

	)

111 #i‡
_BYTE_ORDER
 =
_PDP_ENDIAN


115 #i‚de‡
TO


119 
	$TO
(
s
, 16, 
uöt16_t
)

120 
	$TO
(
l
, 32, 
uöt32_t
)

121 
	$TO
(
Œ
, 64, 
uöt64_t
)

138 
	$joö32to64
(
uöt32_t
 
x1
, uöt32_à
x2
, 
uöt64_t
 *
y2
)

140 #i‡
_BYTE_ORDER
 =
_BIG_ENDIAN


141 *
y2
 = ((
uöt64_t
)
x1
 << 32Ë| (uöt64_t)
x2
;

142 #ñi‡
_BYTE_ORDER
 =
_LITTLE_ENDIAN


143 *
y2
 = (
uöt64_t
)
x1
 | ((uöt64_t)
x2
 << 32);

147 
	}
}

150 
	$•lô64to32
(
uöt64_t
 
x
, 
uöt32_t
 *
y1
, uöt32_à*
y2
)

152 #i‡
_BYTE_ORDER
 =
_BIG_ENDIAN


153 *
y1
 = 
x
 >> 32;

154 *
y2
 = 
x
 & 0xffffffff;

155 #ñi‡
_BYTE_ORDER
 =
_LITTLE_ENDIAN


156 *
y1
 = 
x
 & 0xffffffff;

157 *
y2
 = 
x
 >> 32;

161 
	}
}

	@lib/kgets.c

31 
	~<ty≥s.h
>

32 
	~<lib.h
>

41 
	$back•
()

43 
	`putch
('\b');

44 
	`putch
(' ');

45 
	`putch
('\b');

46 
	}
}

54 
	$kgës
(*
buf
, 
size_t
 
maxÀn
)

56 
size_t
 
pos
 = 0;

57 
ch
;

60 
ch
 = 
	`gëch
();

61 i‡(
ch
=='\n' || ch=='\r') {

62 
	`putch
('\n');

67 i‡(
ch
>=32 && ch<127 && 
pos
 < 
maxÀn
-1) {

68 
	`putch
(
ch
);

69 
buf
[
pos
++] = 
ch
;

71 i‡((
ch
=='\b' || ch==127Ë&& 
pos
>0) {

73 
	`back•
();

74 
pos
--;

76 i‡(
ch
==3) {

78 
	`putch
('^');

79 
	`putch
('C');

80 
	`putch
('\n');

81 
pos
 = 0;

84 i‡(
ch
==18) {

86 
buf
[
pos
] = 0;

87 
	`k¥ötf
("^R\n%s", 
buf
);

89 i‡(
ch
==21) {

91 
pos
 > 0) {

92 
	`back•
();

93 
pos
--;

96 i‡(
ch
==23) {

98 
pos
 > 0 && 
buf
[pos-1]==' ') {

99 
	`back•
();

100 
pos
--;

102 
pos
 > 0 && 
buf
[pos-1]!=' ') {

103 
	`back•
();

104 
pos
--;

108 
	`bìp
();

112 
buf
[
pos
] = 0;

113 
	}
}

	@lib/kprintf.c

30 
	~<ty≥s.h
>

31 
	~<kîn/uni°d.h
>

32 
	~<°d¨g.h
>

33 
	~<lib.h
>

34 
	~<•l.h
>

35 
	~<˝u.h
>

36 
	~<thªad.h
>

37 
	~<cuºít.h
>

38 
	~<synch.h
>

39 
	~<maöbus.h
>

40 
	~<vfs.h
>

44 
uöt32_t
 
	gdbÊags
 = 0;

47 
lock
 *
	gk¥ötf_lock
;

50 
•ölock
 
	gk¥ötf_•ölock
;

64 
	$k¥ötf_boŸ°øp
()

66 
	`KASSERT
(
k¥ötf_lock
 =
NULL
);

68 
k¥ötf_lock
 = 
	`lock_¸óã
("kprintf_lock");

69 i‡(
k¥ötf_lock
 =
NULL
) {

70 
	`∑nic
("CouldÇot create kprintf_lock\n");

72 
	`•ölock_öô
(&
k¥ötf_•ölock
);

73 
	}
}

80 
	$c⁄sﬁe_£nd
(*
junk
, c⁄° *
d©a
, 
size_t
 
Àn
)

82 
size_t
 
i
;

84 ()
junk
;

86 
i
=0; i<
Àn
; i++) {

87 
	`putch
(
d©a
[
i
]);

89 
	}
}

95 
	$k¥ötf
(c⁄° *
fmt
, ...)

97 
ch¨s
;

98 
va_li°
 
≠
;

99 
boﬁ
 
dﬁock
;

101 
dﬁock
 = 
k¥ötf_lock
 !
NULL


102 && 
cuπhªad
->
t_ö_öãºu±
 =
Ál£


103 && 
cuπhªad
->
t_cur•l
 == 0

104 && 
cur˝u
->
c_•ölocks
 == 0;

106 i‡(
dﬁock
) {

107 
	`lock_acquúe
(
k¥ötf_lock
);

110 
	`•ölock_acquúe
(&
k¥ötf_•ölock
);

113 
	`va_°¨t
(
≠
, 
fmt
);

114 
ch¨s
 = 
	`__v¥ötf
(
c⁄sﬁe_£nd
, 
NULL
, 
fmt
, 
≠
);

115 
	`va_íd
(
≠
);

117 i‡(
dﬁock
) {

118 
	`lock_ªÀa£
(
k¥ötf_lock
);

121 
	`•ölock_ªÀa£
(&
k¥ötf_•ölock
);

124  
ch¨s
;

125 
	}
}

133 
	$∑nic
(c⁄° *
fmt
, ...)

135 
va_li°
 
≠
;

148 vﬁ©ûê
evû
;

150 i‡(
evû
 == 0) {

151 
evû
 = 1;

159 
	`•lhigh
();

162 i‡(
evû
 == 1) {

163 
evû
 = 2;

166 
	`thªad_∑nic
();

169 i‡(
evû
 == 2) {

170 
evû
 = 3;

173 
	`k¥ötf
("panic: ");

174 
	`va_°¨t
(
≠
, 
fmt
);

175 
	`__v¥ötf
(
c⁄sﬁe_£nd
, 
NULL
, 
fmt
, 
≠
);

176 
	`va_íd
(
≠
);

179 i‡(
evû
 == 3) {

180 
evû
 = 4;

183 
	`vfs_sync
();

186 i‡(
evû
 == 4) {

187 
evû
 = 5;

190 
	`maöbus_∑nic
();

198 
	}
}

204 
	$badas£π
(c⁄° *
ex¥
, c⁄° *
fûe
, 
löe
, c⁄° *
func
)

206 
	`∑nic
("Assertion failed: %s,át %s:%d (%s)\n",

207 
ex¥
, 
fûe
, 
löe
, 
func
);

208 
	}
}

	@lib/misc.c

30 
	~<ty≥s.h
>

31 
	~<kîn/îrmsg.h
>

32 
	~<lib.h
>

38 
	$k°rdup
(c⁄° *
s
)

40 *
z
;

42 
z
 = 
	`kmÆloc
(
	`°æí
(
s
)+1);

43 i‡(
z
 =
NULL
) {

44  
NULL
;

46 
	`°r˝y
(
z
, 
s
);

47  
z
;

48 
	}
}

55 
	$°ªº‹
(
îrcode
)

57 i‡(
îrcode
>=0 &&Éºcodê< 
sys_√º
) {

58  
sys_îæi°
[
îrcode
];

60 
	`∑nic
("InvÆidÉº‹ codê%d\n", 
îrcode
);

61  
NULL
;

62 
	}
}

	@lib/time.c

30 
	~<ty≥s.h
>

31 
	~<˛ock.h
>

37 
	$time•ec_add
(c⁄° 
time•ec
 *
ts1
,

38 c⁄° 
time•ec
 *
ts2
,

39 
time•ec
 *
ªt
)

41 
ªt
->
tv_n£c
 = 
ts1
->tv_n£¯+ 
ts2
->tv_nsec;

42 
ªt
->
tv_£c
 = 
ts1
->tv_£¯+ 
ts2
->tv_sec;

43 i‡(
ªt
->
tv_n£c
 >= 1000000000) {

44 
ªt
->
tv_n£c
 -= 1000000000;

45 
ªt
->
tv_£c
 += 1;

47 
	}
}

53 
	$time•ec_sub
(c⁄° 
time•ec
 *
ts1
,

54 c⁄° 
time•ec
 *
ts2
,

55 
time•ec
 *
ªt
)

58 
time•ec
 
r
;

60 
r
 = *
ts1
;

61 i‡(
r
.
tv_n£c
 < 
ts2
->tv_nsec) {

62 
r
.
tv_n£c
 += 1000000000;

63 
r
.
tv_£c
--;

66 
r
.
tv_n£c
 -
ts2
->tv_nsec;

67 
r
.
tv_£c
 -
ts2
->tv_sec;

68 *
ªt
 = 
r
;

69 
	}
}

	@lib/uio.c

30 
	~<ty≥s.h
>

31 
	~<lib.h
>

32 
	~<uio.h
>

33 
	~<¥oc.h
>

34 
	~<cuºít.h
>

35 
	~<c›yöout.h
>

42 
	$uiomove
(*
±r
, 
size_t
 
n
, 
uio
 *uio)

44 
iovec
 *
iov
;

45 
size_t
 
size
;

46 
ªsu…
;

48 i‡(
uio
->
uio_rw
 !
UIO_READ
 && uio->uio_rw !
UIO_WRITE
) {

49 
	`∑nic
("uiomove: InvÆid uio_rw %d\n", (Ë
uio
->
uio_rw
);

51 i‡(
uio
->
uio_£gÊg
==
UIO_SYSSPACE
) {

52 
	`KASSERT
(
uio
->
uio_•a˚
 =
NULL
);

55 
	`KASSERT
(
uio
->
uio_•a˚
 =
	`¥oc_gëas
());

58 
n
 > 0 && 
uio
->
uio_ªsid
 > 0) {

60 
iov
 = 
uio
->
uio_iov
;

61 
size
 = 
iov
->
iov_Àn
;

63 i‡(
size
 > 
n
) {

64 
size
 = 
n
;

67 i‡(
size
 == 0) {

69 
uio
->
uio_iov
++;

70 
uio
->
uio_iov˙t
--;

71 i‡(
uio
->
uio_iov˙t
 == 0) {

78 
	`∑nic
("uiomove:Ñan out of buffers\n");

83 
uio
->
uio_£gÊg
) {

84 
UIO_SYSSPACE
:

85 
ªsu…
 = 0;

86 i‡(
uio
->
uio_rw
 =
UIO_READ
) {

87 
	`memmove
(
iov
->
iov_kba£
, 
±r
, 
size
);

90 
	`memmove
(
±r
, 
iov
->
iov_kba£
, 
size
);

92 
iov
->
iov_kba£
 = ((*)iov->iov_kba£+
size
);

94 
UIO_USERSPACE
:

95 
UIO_USERISPACE
:

96 i‡(
uio
->
uio_rw
 =
UIO_READ
) {

97 
ªsu…
 = 
	`c›yout
(
±r
, 
iov
->
iov_uba£
,
size
);

100 
ªsu…
 = 
	`c›yö
(
iov
->
iov_uba£
, 
±r
, 
size
);

102 i‡(
ªsu…
) {

103  
ªsu…
;

105 
iov
->
iov_uba£
 +
size
;

108 
	`∑nic
("uiomove: Invalid uio_segflg %d\n",

109 ()
uio
->
uio_£gÊg
);

112 
iov
->
iov_Àn
 -
size
;

113 
uio
->
uio_ªsid
 -
size
;

114 
uio
->
uio_off£t
 +
size
;

115 
±r
 = ((*Ìå + 
size
);

116 
n
 -
size
;

120 
	}
}

123 
	$uiomovezîos
(
size_t
 
n
, 
uio
 *uio)

126 
zîos
[16];

127 
size_t
 
amt
;

128 
ªsu…
;

131 
	`KASSERT
(
uio
->
uio_rw
 =
UIO_READ
);

133 
n
 > 0) {

134 
amt
 = (
zîos
);

135 i‡(
amt
 > 
n
) {

136 
amt
 = 
n
;

138 
ªsu…
 = 
	`uiomove
(
zîos
, 
amt
, 
uio
);

139 i‡(
ªsu…
) {

140  
ªsu…
;

142 
n
 -
amt
;

146 
	}
}

153 
	$uio_köô
(
iovec
 *
iov
, 
uio
 *
u
,

154 *
kbuf
, 
size_t
 
Àn
, 
off_t
 
pos
, 
uio_rw
 
rw
)

156 
iov
->
iov_kba£
 = 
kbuf
;

157 
iov
->
iov_Àn
 = 
Àn
;

158 
u
->
uio_iov
 = 
iov
;

159 
u
->
uio_iov˙t
 = 1;

160 
u
->
uio_off£t
 = 
pos
;

161 
u
->
uio_ªsid
 = 
Àn
;

162 
u
->
uio_£gÊg
 = 
UIO_SYSSPACE
;

163 
u
->
uio_rw
 = 
rw
;

164 
u
->
uio_•a˚
 = 
NULL
;

165 
	}
}

	@main/main.c

34 
	~<ty≥s.h
>

35 
	~<kîn/î∫o.h
>

36 
	~<kîn/ªboŸ.h
>

37 
	~<kîn/uni°d.h
>

38 
	~<lib.h
>

39 
	~<•l.h
>

40 
	~<˛ock.h
>

41 
	~<thªad.h
>

42 
	~<¥oc.h
>

43 
	~<cuºít.h
>

44 
	~<synch.h
>

45 
	~<vm.h
>

46 
	~<maöbus.h
>

47 
	~<vfs.h
>

48 
	~<devi˚.h
>

49 
	~<sysˇŒ.h
>

50 
	~<ã°.h
>

51 
	~<vîsi⁄.h
>

52 
	~"autoc⁄f.h
"

53 
	~<fûëabÀ.h
>

54 
	~<pid.h
>

55 
	~<limôs.h
>

65 c⁄° 
buûdvîsi⁄
;

66 c⁄° 
buûdc⁄fig
[];

67 
fûëabÀ
 
	gfûëabÀ
;

68 
pid_èbÀ
 
	gpidèbÀ
;

72 c⁄° 
	gh¨v¨d_c›yright
[] =

82 
	$boŸ
()

101 
	`k¥ötf
("\n");

102 
	`k¥ötf
("OS/161 ba£ sy°em vîsi⁄ %s\n", 
BASE_VERSION
);

103 
	`k¥ötf
("%s", 
h¨v¨d_c›yright
);

104 
	`k¥ötf
("\n");

106 
	`k¥ötf
("Put-your-group-name-here's system version %s (%s #%d)\n",

107 
GROUP_VERSION
, 
buûdc⁄fig
, 
buûdvîsi⁄
);

108 
	`k¥ötf
("\n");

111 
	`øm_boŸ°øp
();

112 
	`¥oc_boŸ°øp
();

113 
	`thªad_boŸ°øp
();

114 
	`h¨d˛ock_boŸ°øp
();

115 
	`vfs_boŸ°øp
();

116 
	`khóp_√xtgíî©i⁄
();

119 
	`k¥ötf
("DeviceÖrobe...\n");

120 
	`KASSERT
(
cuπhªad
->
t_cur•l
 > 0);

121 
	`maöbus_boŸ°øp
();

122 
	`KASSERT
(
cuπhªad
->
t_cur•l
 == 0);

124 
	`p£udoc⁄fig
();

125 
	`k¥ötf
("\n");

126 
	`khóp_√xtgíî©i⁄
();

129 
	`vm_boŸ°øp
();

130 
	`k¥ötf_boŸ°øp
();

131 
	`thªad_°¨t_˝us
();

134 
	`vfs_£tboŸfs
("emu0");

136 
	`khóp_√xtgíî©i⁄
();

141 
	`COMPILE_ASSERT
((
u£Ωå_t
) == (*));

142 
	`COMPILE_ASSERT
((*(
u£Ωå_t
)0) == ());

143 
	}
}

150 
	$shutdown
()

153 
	`k¥ötf
("Shutting down.\n");

155 
	`vfs_˛órboŸfs
();

156 
	`vfs_˛órcurdú
();

157 
	`vfs_unmou¡Æl
();

159 
	`thªad_shutdown
();

161 
	`•lhigh
();

162 
	}
}

174 
	$sys_ªboŸ
(
code
)

176 
code
) {

177 
RB_REBOOT
:

178 
RB_HALT
:

179 
RB_POWEROFF
:

182  
EINVAL
;

185 
	`shutdown
();

187 
code
) {

188 
RB_HALT
:

189 
	`k¥ötf
("The system is halted.\n");

190 
	`maöbus_hÆt
();

192 
RB_REBOOT
:

193 
	`k¥ötf
("Rebooting...\n");

194 
	`maöbus_ªboŸ
();

196 
RB_POWEROFF
:

197 
	`k¥ötf
("The system is halted.\n");

198 
	`maöbus_powîoff
();

202 
	`∑nic
("reboot operation failed\n");

204 
	}
}

211 
	$kmaö
(*
¨gumíts
)

213 
	`boŸ
();

214 
	`fûëabÀ_öô
(&
fûëabÀ
);

215 
	`pid_èbÀ_¸óã
(&
pidèbÀ
);

216 
	`¥oc_öô
(
k¥oc
);

218 
pid_öfo
* 
pi
=(pid_öfo*)
	`kmÆloc
((pid_info));

219 
pi
->
pid
=
PID_MIN
;

220 
	`bôm≠_m¨k
(
pidèbÀ
.
bôm≠
,
PID_MIN
);

221 
pi
->
∑ª¡_pid
=-1;

222 
pi
->
¥oc_exôed
=0;

223 
pi
->
waôed
=0;

224 
pi
->
pid_lock
=
	`lock_¸óã
("l");

225 
pi
->
pid_cv
=
	`cv_¸óã
("cv");

226 
pi
->
chûd_pid_öfo
=
	`¨øy_¸óã
();

227 
k¥oc
->
pi
=pi;

228 
	`add_pid
(&
pidèbÀ
,
pi
);

231 
	`míu
(
¨gumíts
);

234 
	}
}

	@main/menu.c

30 
	~<ty≥s.h
>

31 
	~<kîn/î∫o.h
>

32 
	~<kîn/ªboŸ.h
>

33 
	~<kîn/uni°d.h
>

34 
	~<limôs.h
>

35 
	~<lib.h
>

36 
	~<uio.h
>

37 
	~<˛ock.h
>

38 
	~<thªad.h
>

39 
	~<¥oc.h
>

40 
	~<vfs.h
>

41 
	~<sfs.h
>

42 
	~<sysˇŒ.h
>

43 
	~<ã°.h
>

45 
	~"›t-synch¥obs.h
"

47 
	~"›t-sfs.h
"

48 
	~"›t-√t.h
"

54 
	#_PATH_SHELL
 "/bö/sh"

	)

56 
	#MAXMENUARGS
 16

	)

75 
	$cmd_¥ogthªad
(*
±r
, 
«rgs
)

77 **
¨gs
 = 
±r
;

78 
¥og«me
[128];

79 
ªsu…
;

83 
	`KASSERT
(
«rgs
 >= 1);

84 i‡(
«rgs
 > 2) {

85 
	`k¥ötf
("Warning:árgumentÖassing from menuÇot supported\n");

89 
	`KASSERT
(
	`°æí
(
¨gs
[0]Ë< (
¥og«me
));

91 
	`°r˝y
(
¥og«me
, 
¨gs
[0]);

104 
ªsu…
 = 
	`ru≈rogøm
(
¥og«me
);

105 i‡(
ªsu…
) {

106 
	`k¥ötf
("Ru¬ögÖrogøm %†Áûed: %s\n", 
¨gs
[0],

107 
	`°ªº‹
(
ªsu…
));

113 
	}
}

129 
	$comm⁄_¥og
(
«rgs
, **
¨gs
)

131 
¥oc
 *proc;

132 
ªsu…
;

135 #i‡
OPT_SYNCHPROBS


136 
	`k¥ötf
("Warning:ÅhisÖrobably won't work withá "

141 
¥oc
 = 
	`¥oc_¸óã_ru≈rogøm
(
¨gs
[0] );

142 i‡(
¥oc
 =
NULL
) {

143  
ENOMEM
;

146 
ªsu…
 = 
	`thªad_f‹k
(
¨gs
[0] ,

147 
¥oc
 ,

148 
cmd_¥ogthªad
 ,

149 
¨gs
 , 
«rgs
 );

150 i‡(
ªsu…
) {

151 
	`k¥ötf
("thªad_f‹k faûed: %s\n", 
	`°ªº‹
(
ªsu…
));

152 
	`¥oc_de°roy
(
¥oc
);

153  
ªsu…
;

165 
	`kwaôpid
(
PID_MIN
+1);

167 
	}
}

174 
	$cmd_¥og
(
«rgs
, **
¨gs
)

176 i‡(
«rgs
 < 2) {

177 
	`k¥ötf
("Usage:ÖÖrogram [arguments]\n");

178  
EINVAL
;

182 
¨gs
++;

183 
«rgs
--;

185  
	`comm⁄_¥og
(
«rgs
, 
¨gs
);

186 
	}
}

193 
	$cmd_shñl
(
«rgs
, **
¨gs
)

195 ()
¨gs
;

196 i‡(
«rgs
 != 1) {

197 
	`k¥ötf
("Usage: s\n");

198  
EINVAL
;

201 
¨gs
[0] = (*)
_PATH_SHELL
;

203  
	`comm⁄_¥og
(
«rgs
, 
¨gs
);

204 
	}
}

211 
	$cmd_chdú
(
«rgs
, **
¨gs
)

213 i‡(
«rgs
 != 2) {

214 
	`k¥ötf
("Usage: cd directory\n");

215  
EINVAL
;

218  
	`vfs_chdú
(
¨gs
[1]);

219 
	}
}

226 
	$cmd_pwd
(
«rgs
, **
¨gs
)

228 
buf
[
PATH_MAX
+1];

229 
ªsu…
;

230 
iovec
 
iov
;

231 
uio
 
ku
;

233 ()
«rgs
;

234 ()
¨gs
;

236 
	`uio_köô
(&
iov
, &
ku
, 
buf
, (buf)-1, 0, 
UIO_READ
);

237 
ªsu…
 = 
	`vfs_gëcwd
(&
ku
);

238 i‡(
ªsu…
) {

239 
	`k¥ötf
("vfs_gëcwd faûed (%s)\n", 
	`°ªº‹
(
ªsu…
));

240  
ªsu…
;

244 
buf
[(buf)-1-
ku
.
uio_ªsid
] = 0;

247 
	`k¥ötf
("%s\n", 
buf
);

250 
	}
}

257 
	$cmd_sync
(
«rgs
, **
¨gs
)

259 ()
«rgs
;

260 ()
¨gs
;

262 
	`vfs_sync
();

265 
	}
}

272 
	$cmd_∑nic
(
«rgs
, **
¨gs
)

274 ()
«rgs
;

275 ()
¨gs
;

277 
	`∑nic
("UserÑequestedÖanic\n");

279 
	}
}

286 
	$cmd_quô
(
«rgs
, **
¨gs
)

288 ()
«rgs
;

289 ()
¨gs
;

291 
	`vfs_sync
();

292 
	`sys_ªboŸ
(
RB_POWEROFF
);

293 
	`thªad_exô
();

295 
	}
}

303 c⁄° *
	m«me
;

304 (*
	mfunc
)(c⁄° *
	mdevi˚
);

305 } 
	gmou¡èbÀ
[] = {

306 #i‡
OPT_SFS


307 { "sfs", 
sfs_mou¡
 },

313 
	$cmd_mou¡
(
«rgs
, **
¨gs
)

315 *
f°y≥
;

316 *
devi˚
;

317 
i
;

319 i‡(
«rgs
 != 3) {

320 
	`k¥ötf
("Usage: mount fstype device:\n");

321  
EINVAL
;

324 
f°y≥
 = 
¨gs
[1];

325 
devi˚
 = 
¨gs
[2];

328 i‡(
devi˚
[
	`°æí
(device)-1]==':') {

329 
devi˚
[
	`°æí
(device)-1] = 0;

332 
i
=0; i<
	`ARRAYCOUNT
(
mou¡èbÀ
); i++) {

333 i‡(!
	`°rcmp
(
mou¡èbÀ
[
i
].
«me
, 
f°y≥
)) {

334  
mou¡èbÀ
[
i
].
	`func
(
devi˚
);

337 
	`k¥ötf
("Unknow¿fûesy°emÅy≥ %s\n", 
f°y≥
);

338  
EINVAL
;

339 
	}
}

343 
	$cmd_unmou¡
(
«rgs
, **
¨gs
)

345 *
devi˚
;

347 i‡(
«rgs
 != 2) {

348 
	`k¥ötf
("Usage: unmount device:\n");

349  
EINVAL
;

352 
devi˚
 = 
¨gs
[1];

355 i‡(
devi˚
[
	`°æí
(device)-1]==':') {

356 
devi˚
[
	`°æí
(device)-1] = 0;

359  
	`vfs_unmou¡
(
devi˚
);

360 
	}
}

372 
	$cmd_boŸfs
(
«rgs
, **
¨gs
)

374 *
devi˚
;

376 i‡(
«rgs
 != 2) {

377 
	`k¥ötf
("Usage: bootfs device\n");

378  
EINVAL
;

381 
devi˚
 = 
¨gs
[1];

384 i‡(
devi˚
[
	`°æí
(device)-1]==':') {

385 
devi˚
[
	`°æí
(device)-1] = 0;

388  
	`vfs_£tboŸfs
(
devi˚
);

389 
	}
}

393 
	$cmd_khóp°©s
(
«rgs
, **
¨gs
)

395 ()
«rgs
;

396 ()
¨gs
;

398 
	`khóp_¥öt°©s
();

401 
	}
}

405 
	$cmd_khópgíî©i⁄
(
«rgs
, **
¨gs
)

407 ()
«rgs
;

408 ()
¨gs
;

410 
	`khóp_√xtgíî©i⁄
();

413 
	}
}

417 
	$cmd_khópdump
(
«rgs
, **
¨gs
)

419 i‡(
«rgs
 == 1) {

420 
	`khóp_dump
();

422 i‡(
«rgs
 =2 && !
	`°rcmp
(
¨gs
[1], "all")) {

423 
	`khóp_dum∑Œ
();

426 
	`k¥ötf
("Usage: khdump [all]\n");

430 
	}
}

438 
	$showmíu
(c⁄° *
«me
, c⁄° *
x
[])

440 
˘
, 
hÆf
, 
i
;

442 
	`k¥ötf
("\n");

443 
	`k¥ötf
("%s\n", 
«me
);

445 
i
=
˘
=0; 
x
[i]; i++) {

446 
˘
++;

448 
hÆf
 = (
˘
+1)/2;

450 
i
=0; i<
hÆf
; i++) {

451 
	`k¥ötf
(" %-36s", 
x
[
i
]);

452 i‡(
i
+
hÆf
 < 
˘
) {

453 
	`k¥ötf
("%s", 
x
[
i
+
hÆf
]);

455 
	`k¥ötf
("\n");

458 
	`k¥ötf
("\n");

459 
	}
}

461 c⁄° *
	g›smíu
[] = {

473 
NULL


478 
	$cmd_›smíu
(
n
, **
a
)

480 ()
n
;

481 ()
a
;

483 
	`showmíu
("OS/161 o≥øti⁄†míu", 
›smíu
);

485 
	}
}

487 c⁄° *
	gã°míu
[] = {

498 #i‡
OPT_NET


511 
NULL


516 
	$cmd_ã°míu
(
n
, **
a
)

518 ()
n
;

519 ()
a
;

521 
	`showmíu
("OS/161Åe°†míu", 
ã°míu
);

522 
	`k¥ötf
(" (1) TheseÅests will fail until you finishÅhe "

524 
	`k¥ötf
("\n");

527 
	}
}

529 c⁄° *
	gmaömíu
[] = {

533 #i‡
OPT_SYNCHPROBS


541 
NULL


546 
	$cmd_maömíu
(
n
, **
a
)

548 ()
n
;

549 ()
a
;

551 
	`showmíu
("OS/161 kî√»míu", 
maömíu
);

553 
	}
}

560 c⁄° *
	m«me
;

561 (*
	mfunc
)(
	m«rgs
, **
	m¨gs
);

562 } 
	gcmdèbÀ
[] = {

564 { "?", 
cmd_maömíu
 },

565 { "h", 
cmd_maömíu
 },

566 { "hñp", 
cmd_maömíu
 },

567 { "?o", 
cmd_›smíu
 },

568 { "?t", 
cmd_ã°míu
 },

571 { "s", 
cmd_shñl
 },

572 { "p", 
cmd_¥og
 },

573 { "mou¡", 
cmd_mou¡
 },

574 { "unmou¡", 
cmd_unmou¡
 },

575 { "boŸfs", 
cmd_boŸfs
 },

576 { "pf", 
¥ötfûe
 },

577 { "cd", 
cmd_chdú
 },

578 { "pwd", 
cmd_pwd
 },

579 { "sync", 
cmd_sync
 },

580 { "∑nic", 
cmd_∑nic
 },

581 { "q", 
cmd_quô
 },

582 { "exô", 
cmd_quô
 },

583 { "hÆt", 
cmd_quô
 },

586 #i‡
OPT_SYNCHPROBS


588 { "•1", 
aúbÆlo⁄
 },

592 { "kh", 
cmd_khóp°©s
 },

593 { "khgí", 
cmd_khópgíî©i⁄
 },

594 { "khdump", 
cmd_khópdump
 },

597 { "©", 
¨øyã°
 },

598 { "bt", 
bôm≠ã°
 },

599 { "ét", 
thªadli°ã°
 },

600 { "km1", 
mÆlo˘e°
 },

601 { "km2", 
mÆloc°ªss
 },

602 { "km3", 
mÆlo˘e°3
 },

603 { "km4", 
mÆlo˘e°4
 },

604 #i‡
OPT_NET


605 { "√t", 
√âe°
 },

607 { "â1", 
thªadã°
 },

608 { "â2", 
thªadã°2
 },

609 { "â3", 
thªadã°3
 },

610 { "sy1", 
£mã°
 },

613 { "sy2", 
lockã°
 },

614 { "sy3", 
cvã°
 },

615 { "sy4", 
cvã°2
 },

618 { "fs1", 
f°e°
 },

619 { "fs2", 
ªad°ªss
 },

620 { "fs3", 
wrôe°ªss
 },

621 { "fs4", 
wrôe°ªss2
 },

622 { "fs5", 
l⁄g°ªss
 },

623 { "fs6", 
¸óã°ªss
 },

625 { 
NULL
, NULL }

633 
	$cmd_di•©ch
(*
cmd
)

635 
time•ec
 
bef‹e
, 
a·î
, 
duøti⁄
;

636 *
¨gs
[
MAXMENUARGS
];

637 
«rgs
=0;

638 *
w‹d
;

639 *
c⁄ãxt
;

640 
i
, 
ªsu…
;

642 
w‹d
 = 
	`°πok_r
(
cmd
, " \t", &
c⁄ãxt
);

643 
w‹d
 !
NULL
;

644 
w‹d
 = 
	`°πok_r
(
NULL
, " \t", &
c⁄ãxt
)) {

645 i‡(
«rgs
 >
MAXMENUARGS
) {

646 
	`k¥ötf
("CommandÜine hasÅoo many words\n");

647  
E2BIG
;

649 
¨gs
[
«rgs
++] = 
w‹d
;

652 i‡(
«rgs
==0) {

656 
i
=0; 
cmdèbÀ
[i].
«me
; i++) {

657 i‡(*
cmdèbÀ
[
i
].
«me
 && !
	`°rcmp
(
¨gs
[0], cmdtable[i].name)) {

658 
	`KASSERT
(
cmdèbÀ
[
i
].
func
!=
NULL
);

660 
	`gëtime
(&
bef‹e
);

662 
ªsu…
 = 
cmdèbÀ
[
i
].
	`func
(
«rgs
, 
¨gs
);

664 
	`gëtime
(&
a·î
);

665 
	`time•ec_sub
(&
a·î
, &
bef‹e
, &
duøti⁄
);

667 
	`k¥ötf
("OperationÅook %llu.%09lu seconds\n",

668 (Ë
duøti⁄
.
tv_£c
,

669 (Ë
duøti⁄
.
tv_n£c
);

671  
ªsu…
;

675 
	`k¥ötf
("%s: Comm™dÇŸ found\n", 
¨gs
[0]);

676  
EINVAL
;

677 
	}
}

688 
	$míu_execuã
(*
löe
, 
ißrgs
)

690 *
comm™d
;

691 *
c⁄ãxt
;

692 
ªsu…
;

694 
comm™d
 = 
	`°πok_r
(
löe
, ";", &
c⁄ãxt
);

695 
comm™d
 !
NULL
;

696 
comm™d
 = 
	`°πok_r
(
NULL
, ";", &
c⁄ãxt
)) {

698 i‡(
ißrgs
) {

699 
	`k¥ötf
("OS/161 kî√l: %s\n", 
comm™d
);

701 
ªsu…
 = 
	`cmd_di•©ch
(
comm™d
);

702 i‡(
ªsu…
) {

703 
	`k¥ötf
("Míu comm™d faûed: %s\n", 
	`°ªº‹
(
ªsu…
));

704 i‡(
ißrgs
) {

705 
	`∑nic
("FailureÖrocessing kernelárguments\n");

709 
	}
}

729 
	$míu
(*
¨gs
)

731 
buf
[64];

734 
	`míu_execuã
(
¨gs
, 1);

737 
	`k¥ötf
("OS/161 kernel [? for menu]: ");

738 
	`kgës
(
buf
, (buf));

740 
	`míu_execuã
(
buf
, 0);

742 
	}
}

	@proc/proc.c

45 
	~<ty≥s.h
>

46 
	~<•l.h
>

47 
	~<¥oc.h
>

48 
	~<cuºít.h
>

49 
	~<addr•a˚.h
>

50 
	~<vnode.h
>

51 
	~<fûëabÀ.h
>

52 
	~<¨øy.h
>

53 
	~<limôs.h
>

54 
	~<kîn/f˙é.h
>

55 
	~<vfs.h
>

56 
	~<sysˇŒ.h
>

57 
	~<pid.h
>

61 
¥oc
 *
	gk¥oc
;

67 
¥oc
 *

68 
	$¥oc_¸óã
(c⁄° *
«me
)

70 
¥oc
 *proc;

72 
¥oc
 = 
	`kmÆloc
((*proc));

73 i‡(
¥oc
 =
NULL
) {

74  
NULL
;

76 
¥oc
->
p_«me
 = 
	`k°rdup
(
«me
);

77 i‡(
¥oc
->
p_«me
 =
NULL
) {

78 
	`k‰ì
(
¥oc
);

79  
NULL
;

82 
	`thªad¨øy_öô
(&
¥oc
->
p_thªads
);

83 
	`•ölock_öô
(&
¥oc
->
p_lock
);

86 
¥oc
->
p_addr•a˚
 = 
NULL
;

89 
¥oc
->
p_cwd
 = 
NULL
;

91 
¥oc
->
fd_¨øy
=
	`¨øy_¸óã
();

92 
¥oc
->
¨øy_lock
=
	`lock_¸óã
("l");

94  
¥oc
;

95 
	}
}

104 
	$¥oc_de°roy
(
¥oc
 *proc)

114 
	`KASSERT
(
¥oc
 !
NULL
);

115 
	`KASSERT
(
¥oc
 !
k¥oc
);

123 if(
¥oc
->
fd_¨øy
!=
NULL
){

125 
	`¨øy_num
(
¥oc
->
fd_¨øy
)>0){

126 
fd_íåy
* 
„
=(fd_íåy*)
	`¨øy_gë
(
¥oc
->
fd_¨øy
,0);

127 
	`KASSERT
(
„
!=
NULL
);

128 
	`sys_˛o£
(
„
->
fd
);

130 
	`KASSERT
(
	`¨øy_num
(
¥oc
->
fd_¨øy
)==0);

131 
	`¨øy_˛ónup
(
¥oc
->
fd_¨øy
);

133 
	`lock_de°roy
(
¥oc
->
¨øy_lock
);

137 i‡(
¥oc
->
p_cwd
) {

138 
	`VOP_DECREF
(
¥oc
->
p_cwd
);

139 
¥oc
->
p_cwd
 = 
NULL
;

143 i‡(
¥oc
->
p_addr•a˚
) {

177 
addr•a˚
 *
as
;

179 i‡(
¥oc
 =
cuΩroc
) {

180 
as
 = 
	`¥oc_£ès
(
NULL
);

181 
	`as_dó˘iv©e
();

184 
as
 = 
¥oc
->
p_addr•a˚
;

185 
¥oc
->
p_addr•a˚
 = 
NULL
;

187 
	`as_de°roy
(
as
);

191 
	`thªad¨øy_˛ónup
(&
¥oc
->
p_thªads
);

192 
	`•ölock_˛ónup
(&
¥oc
->
p_lock
);

219 
	`k‰ì
(
¥oc
->
p_«me
);

220 
	`k‰ì
(
¥oc
);

223 
	}
}

229 
	$¥oc_boŸ°øp
()

231 
k¥oc
 = 
	`¥oc_¸óã
("[kernel]");

232 i‡(
k¥oc
 =
NULL
) {

233 
	`∑nic
("proc_create for kproc failed\n");

235 
	}
}

243 
¥oc
 *

244 
	$¥oc_¸óã_ru≈rogøm
(c⁄° *
«me
)

246 
¥oc
 *
√w¥oc
;

248 
√w¥oc
 = 
	`¥oc_¸óã
(
«me
);

249 i‡(
√w¥oc
 =
NULL
) {

250  
NULL
;

255 
√w¥oc
->
p_addr•a˚
 = 
NULL
;

264 
	`•ölock_acquúe
(&
cuΩroc
->
p_lock
);

265 i‡(
cuΩroc
->
p_cwd
 !
NULL
) {

266 
	`VOP_INCREF
(
cuΩroc
->
p_cwd
);

267 
√w¥oc
->
p_cwd
 = 
cuΩroc
->p_cwd;

269 
	`•ölock_ªÀa£
(&
cuΩroc
->
p_lock
);

271 
	`¥oc_öô
(
√w¥oc
);

274 
pid_öfo
* 
pi
 =(pid_öfo*)
	`kmÆloc
((pid_info));

275 
pid_t
 
pid
=
PID_MIN
+1;;

277 
	`bôm≠_m¨k
(
pidèbÀ
.
bôm≠
,
PID_MIN
+1);

278 
pi
->
pid
=pid;

279 
pi
->
∑ª¡_pid
=
PID_MIN
;

280 
pi
->
¥oc_exôed
=0;

281 
pi
->
waôed
=0;

282 
pi
->
pid_lock
=
	`lock_¸óã
("l");

283 
pi
->
pid_cv
=
	`cv_¸óã
("cv");

284 
pi
->
chûd_pid_öfo
=
	`¨øy_¸óã
();

285 
√w¥oc
->
pi
=pi;

286 
	`add_pid
(&
pidèbÀ
,
pi
);

288 
	`lock_acquúe
(
k¥oc
->
pi
->
pid_lock
);

289 
	`¨øy_add
(
k¥oc
->
pi
->
chûd_pid_öfo
,pi,
NULL
);

290 
	`lock_ªÀa£
(
k¥oc
->
pi
->
pid_lock
);

291  
√w¥oc
;

292 
	}
}

304 
	$¥oc_addthªad
(
¥oc
 *¥oc, 
thªad
 *
t
)

306 
ªsu…
;

307 
•l
;

309 
	`KASSERT
(
t
->
t_¥oc
 =
NULL
);

311 
	`•ölock_acquúe
(&
¥oc
->
p_lock
);

312 
ªsu…
 = 
	`thªad¨øy_add
(&
¥oc
->
p_thªads
, 
t
, 
NULL
);

313 
	`•ölock_ªÀa£
(&
¥oc
->
p_lock
);

314 i‡(
ªsu…
) {

315  
ªsu…
;

317 
•l
 = 
	`•lhigh
();

318 
t
->
t_¥oc
 = 
¥oc
;

319 
	`•lx
(
•l
);

321 
	}
}

333 
	$¥oc_ªmthªad
(
thªad
 *
t
)

335 
¥oc
 *proc;

336 
i
, 
num
;

337 
•l
;

339 
¥oc
 = 
t
->
t_¥oc
;

340 
	`KASSERT
(
¥oc
 !
NULL
);

342 
	`•ölock_acquúe
(&
¥oc
->
p_lock
);

344 
num
 = 
	`thªad¨øy_num
(&
¥oc
->
p_thªads
);

345 
i
=0; i<
num
; i++) {

346 i‡(
	`thªad¨øy_gë
(&
¥oc
->
p_thªads
, 
i
Ë=
t
) {

347 
	`thªad¨øy_ªmove
(&
¥oc
->
p_thªads
, 
i
);

348 
	`•ölock_ªÀa£
(&
¥oc
->
p_lock
);

349 
•l
 = 
	`•lhigh
();

350 
t
->
t_¥oc
 = 
NULL
;

351 
	`•lx
(
•l
);

356 
	`•ölock_ªÀa£
(&
¥oc
->
p_lock
);

357 
	`∑nic
("Thªad (%pËha†esˇ≥d from it†¥o˚s†(%p)\n", 
t
, 
¥oc
);

358 
	}
}

368 
addr•a˚
 *

369 
	$¥oc_gëas
()

371 
addr•a˚
 *
as
;

372 
¥oc
 *¥o¯
cuΩroc
;

374 i‡(
¥oc
 =
NULL
) {

375  
NULL
;

378 
	`•ölock_acquúe
(&
¥oc
->
p_lock
);

379 
as
 = 
¥oc
->
p_addr•a˚
;

380 
	`•ölock_ªÀa£
(&
¥oc
->
p_lock
);

381  
as
;

382 
	}
}

388 
addr•a˚
 *

389 
	$¥oc_£ès
(
addr•a˚
 *
√was
)

391 
addr•a˚
 *
ﬁdas
;

392 
¥oc
 *¥o¯
cuΩroc
;

394 
	`KASSERT
(
¥oc
 !
NULL
);

396 
	`•ölock_acquúe
(&
¥oc
->
p_lock
);

397 
ﬁdas
 = 
¥oc
->
p_addr•a˚
;

398 
¥oc
->
p_addr•a˚
 = 
√was
;

399 
	`•ölock_ªÀa£
(&
¥oc
->
p_lock
);

400  
ﬁdas
;

401 
	}
}

403 
	$¥oc_öô
(
¥oc
*Öroc){

404 
fûe
* 
f
;

405 
fd_íåy
* 
„
;

406 * 
c⁄sﬁe
=
NULL
;

407 
c⁄sﬁe
=
	`k°rdup
("con:");

409 
vnode
* 
°döput
;

410 
îr
;

411 
îr
=
	`vfs_›í
(
c⁄sﬁe
,
O_RDONLY
,0664,&
°döput
);

412 
	`KASSERT
(
îr
==0);

413 
f
=
	`kmÆloc
((
fûe
));

414 
f
->
ªfcou¡
=1;

415 
f
->
°©us
=
O_RDONLY
;

416 
f
->
off£t
=0;

417 
f
->
vn
=
°döput
;

418 
f
->
l
=
	`lock_¸óã
("l");

419 
f
->
vÆid
=1;

420 
„
=
	`kmÆloc
((
fd_íåy
));

421 
„
->
fd
=0;

422 
„
->
f
=f;

423 
	`fûëabÀ_ö£π
(&
fûëabÀ
,
f
);

424 
	`¨øy_add
(
¥oc
->
fd_¨øy
,
„
,
NULL
);

426 
vnode
* 
°douçut
;

427 
c⁄sﬁe
=
	`k°rdup
("con:");

428 
îr
=
	`vfs_›í
(
c⁄sﬁe
,
O_WRONLY
,0664,&
°douçut
);

429 
	`KASSERT
(
îr
==0);

430 
f
=
	`kmÆloc
((
fûe
));

431 
f
->
ªfcou¡
=1;

432 
f
->
°©us
=
O_WRONLY
;

433 
f
->
off£t
=0;

434 
f
->
vn
=
°douçut
;

435 
f
->
l
=
	`lock_¸óã
("l");

436 
f
->
vÆid
=1;

437 
„
=
	`kmÆloc
((
fd_íåy
));

438 
„
->
fd
=1;

439 
„
->
f
=f;

440 
	`fûëabÀ_ö£π
(&
fûëabÀ
,
f
);

441 
	`¨øy_add
(
¥oc
->
fd_¨øy
,
„
,
NULL
);

443 
vnode
* 
°dîr
;

444 
c⁄sﬁe
=
	`k°rdup
("con:");

445 
îr
=
	`vfs_›í
(
c⁄sﬁe
,
O_WRONLY
,0664,&
°dîr
);

446 
	`KASSERT
(
îr
==0);

447 
f
=
	`kmÆloc
((
fûe
));

448 
f
->
ªfcou¡
=1;

449 
f
->
°©us
=
O_WRONLY
;

450 
f
->
off£t
=0;

451 
f
->
vn
=
°dîr
;

452 
f
->
l
=
	`lock_¸óã
("l");

453 
f
->
vÆid
=1;

454 
„
=
	`kmÆloc
((
fd_íåy
));

455 
„
->
fd
=2;

456 
„
->
f
=f;

457 
	`fûëabÀ_ö£π
(&
fûëabÀ
,
f
);

458 
	`¨øy_add
(
¥oc
->
fd_¨øy
,
„
,
NULL
);

462 
	}
}

464 
fd_íåy
* 
	$gë
(
¨øy
* 
¨r
, 
fd
,* 
i
){

465 if(
fd
<0Ë 
NULL
;

466 
fd_íåy
* 
ªt
=
NULL
;

467 
ödex
=0;ödex<
	`¨øy_num
(
¨r
);++index){

468 
ªt
=(
fd_íåy
*)
	`¨øy_gë
(
¨r
,
ödex
);

469 if(
ªt
->
fd
==()fd&&ªt->
f
->
vÆid
) {

470 if(
i
!=
NULL
)*i=
ödex
;

471  
ªt
;

474  
NULL
;

475 
	}
}

477 
	$fd_¨øy_c›y
(
¥oc
* 
§˝roc
, ¥oc* 
d°¥oc
){

480 
	`lock_acquúe
(
§˝roc
->
¨øy_lock
);

481 
	`lock_acquúe
(
d°¥oc
->
¨øy_lock
);

482 
ödex
=0;ödex<
	`¨øy_num
(
§˝roc
->
fd_¨øy
);++index){

483 
fd_íåy
* 
„1
=(fd_íåy*)
	`¨øy_gë
(
§˝roc
->
fd_¨øy
,
ödex
);

484 
fd_íåy
* 
„2
=(fd_íåy*)
	`kmÆloc
((fd_entry));

485 
	`KASSERT
(
„2
!=
NULL
);

486 
	`lock_acquúe
(
„1
->
f
->
l
);

487 
	`KASSERT
(
„1
->
f
->
ªfcou¡
>0&&„1->f->
vÆid
);

488 ++(
„1
->
f
->
ªfcou¡
);

489 
	`VOP_INCREF
(
„1
->
f
->
vn
);

490 
„2
->
fd
=
„1
->fd;

491 
„2
->
f
=
„1
->f;

492 
	`lock_ªÀa£
(
„1
->
f
->
l
);

493 
	`¨øy_add
(
d°¥oc
->
fd_¨øy
,
„2
,
NULL
);

495 
	`lock_ªÀa£
(
d°¥oc
->
¨øy_lock
);

496 
	`lock_ªÀa£
(
§˝roc
->
¨øy_lock
);

497 
	}
}

	@synchprobs/airballoon.c

4 
	~<ty≥s.h
>

5 
	~<lib.h
>

6 
	~<thªad.h
>

7 
	~<ã°.h
>

9 
	~<synch.h
>

11 
	#NROPES
 16

	)

12 
	gr›es_À·
 = 
NROPES
;

21 
	sr›e_m≠
{

24 vﬁ©ûê
boﬁ
 
	mrm≠_°©us
[
NROPES
];

31 vﬁ©ûê
	mrm≠_°ake_num
[
NROPES
];

33 } 
	tbÆlo⁄_r›e_m≠
;

36 
bÆlo⁄_r›e_m≠
 
	gm≠
;

42 
lock
* 
	gr›e_°©us_lock
[
NROPES
];

45 
lock
* 
	gr›e_num_lock
;

48 
lock
* 
	gbÆlo⁄_lock
;

50 
cv
* 
	gesˇ≥_cv
;

52 
cv
* 
	gmaö_¥ogøm_cv
;

145 
	$d™dñi⁄
(*
p
, 
¨g
)

147 ()
p
;

148 ()
¨g
;

150 
	`k¥ötf
("DandelionÅhread starting\n");

154 
r›es_À·
 != 0){

156 
ønd_r›e
 = 
	`øndom
(Ë% 
NROPES
;

159 
	`lock_acquúe
(
r›e_°©us_lock
[
ønd_r›e
]);

162 
m≠
.
rm≠_°©us
[
ønd_r›e
] == 0){

165 
	`lock_ªÀa£
(
r›e_°©us_lock
[
ønd_r›e
]);

166 
ønd_r›e
 = 
	`øndom
(Ë% 
NROPES
;

169 
	`lock_acquúe
(
r›e_°©us_lock
[
ønd_r›e
]);

172 if(
r›es_À·
 == 0){

173 
	`lock_ªÀa£
(
r›e_°©us_lock
[
ønd_r›e
]);

174 
d™dñi⁄_d⁄e
;

180 
m≠
.
rm≠_°©us
[
ønd_r›e
] = 0;

183 
	`lock_acquúe
(
r›e_num_lock
);

185 
r›es_À·
--;

188 
	`k¥ötf
("D™dñi⁄ sevîedÑ›ê%d\n", 
ønd_r›e
);

191 
	`lock_ªÀa£
(
r›e_num_lock
);

194 
	`lock_ªÀa£
(
r›e_°©us_lock
[
ønd_r›e
]);

197 
	`thªad_yõld
();

201 
d™dñi⁄_d⁄e
:

202 
	`k¥ötf
("DandelionÅhread done\n");

205 
	`cv_sig«l
(
esˇ≥_cv
, 
bÆlo⁄_lock
);

206 
	}
}

210 
	$m¨igﬁd
(*
p
, 
¨g
)

212 ()
p
;

213 ()
¨g
;

215 
	`k¥ötf
("MarigoldÅhread starting\n");

219 
r›es_À·
 != 0){

222 
ønd_°ake
 = 
	`øndom
(Ë% 
NROPES
;

225 
ödex
 = 0;

226 
ønd_r›e
 = 0;

229 if(
r›es_À·
 == 0){

230 
m¨igﬁd_d⁄e
;

233 
ödex
 = 0; index < 
NROPES
; index++){

235 
	`lock_acquúe
(
r›e_°©us_lock
[
ödex
]);

238 if(
m≠
.
rm≠_°ake_num
[
ödex
] =
ønd_°ake
 && m≠.
rm≠_°©us
[index] == 1){

240 
ønd_r›e
 = 
ödex
;

243 
m≠
.
rm≠_°©us
[
ønd_r›e
] = 0;

246 
	`lock_acquúe
(
r›e_num_lock
);

247 
r›es_À·
--;

249 
	`k¥ötf
("M¨igﬁd sevîedÑ›ê%d from sèkê%d\n", 
ønd_r›e
, 
ønd_°ake
);

250 
	`lock_ªÀa£
(
r›e_num_lock
);

252 
	`lock_ªÀa£
(
r›e_°©us_lock
[
ønd_r›e
]);

255 
	`thªad_yõld
();

261 
	`lock_ªÀa£
(
r›e_°©us_lock
[
ödex
]);

267 
ønd_°ake
 = 
	`øndom
(Ë% 
NROPES
;

272 
m¨igﬁd_d⁄e
:

273 
	`k¥ötf
("MarigoldÅhread done\n");

275 
	}
}

279 
	$ÊowîkûÀr
(*
p
, 
¨g
)

281 ()
p
;

282 ()
¨g
;

284 
	`k¥ötf
("Lord FlowerKillerÅhread starting\n");

289 
r›es_À·
 != 0){

292 
¥e£¡_°ake
 = 
	`øndom
(Ë% 
NROPES
;

295 
ønd_°ake
 = 
	`øndom
(Ë% 
NROPES
;

298 
ønd_°ake
 =
¥e£¡_°ake
){

299 
ønd_°ake
 = 
	`øndom
(Ë% 
NROPES
;

303 
ønd_r›e
 = 0;

304 
ödex
 = 0;

306 
ödex
 = 0; index < 
NROPES
; index++){

308 
	`lock_acquúe
(
r›e_°©us_lock
[
ödex
]);

311 if(
m≠
.
rm≠_°ake_num
[
ödex
] =
¥e£¡_°ake
 && m≠.
rm≠_°©us
[index] == 1){

314 
ønd_r›e
 = 
ödex
;

317 
m≠
.
rm≠_°ake_num
[
ønd_r›e
] = 
ønd_°ake
;

319 
	`k¥ötf
("L‹d FlowîKûÀ∏swôchedÑ›ê%d from sèkê%dÅÿ°akê%d\n", 
ønd_r›e
, 
¥e£¡_°ake
, 
ønd_°ake
);

321 
	`lock_ªÀa£
(
r›e_°©us_lock
[
ønd_r›e
]);

324 
	`thªad_yõld
();

329 
	`lock_ªÀa£
(
r›e_°©us_lock
[
ödex
]);

334 if(
r›es_À·
 == 0){

335 
ÊowîkûÀr_d⁄e
;

339 
ønd_°ake
 = 
	`øndom
(Ë% 
NROPES
;

344 
ÊowîkûÀr_d⁄e
:

345 
	`k¥ötf
("Lord FlowerKillerÅhread done\n");

346 
	}
}

350 
	$bÆlo⁄
(*
p
, 
¨g
)

352 ()
p
;

353 ()
¨g
;

355 
	`k¥ötf
("BalloonÅhread starting\n");

359 
	`lock_acquúe
(
bÆlo⁄_lock
);

360 
	`cv_waô
(
esˇ≥_cv
, 
bÆlo⁄_lock
);

361 
	`lock_ªÀa£
(
bÆlo⁄_lock
);

364 
	`k¥ötf
("Balloon freedánd Prince DandelionÉscapes!\n");

365 
	`k¥ötf
("BalloonÅhread done\n");

368 
	`cv_sig«l
(
maö_¥ogøm_cv
, 
bÆlo⁄_lock
);

369 
	}
}

374 
	$aúbÆlo⁄
(
«rgs
, **
¨gs
)

377 
îr
 = 0;

379 ()
«rgs
;

380 ()
¨gs
;

381 ()
r›es_À·
;

384 
r›es_À·
 = 
NROPES
;

387 
cou¡
 = 0;

391 
cou¡
 = 0; cou¡ < 
NROPES
; count++){

392 
r›e_°©us_lock
[
cou¡
] = 
	`lock_¸óã
("rmap_status_lock_" + count);

396 
r›e_num_lock
 = 
	`lock_¸óã
("rope_num_lock");

399 
esˇ≥_cv
 = 
	`cv_¸óã
("escape_cv");

401 
maö_¥ogøm_cv
 = 
	`cv_¸óã
("main_program_cv");

402 
bÆlo⁄_lock
 = 
	`lock_¸óã
("balloonÜock");

405 
cou¡
 = 0; cou¡ < 
NROPES
; count ++){

407 
m≠
.
rm≠_°©us
[
cou¡
] = 1;

409 
m≠
.
rm≠_°ake_num
[
cou¡
] = count;

413 
îr
 = 
	`thªad_f‹k
("Marigold Thread",

414 
NULL
, 
m¨igﬁd
, NULL, 0);

415 if(
îr
)

416 
∑nic
;

418 
îr
 = 
	`thªad_f‹k
("Dandelion Thread",

419 
NULL
, 
d™dñi⁄
, NULL, 0);

420 if(
îr
)

421 
∑nic
;

423 
îr
 = 
	`thªad_f‹k
("Lord FlowerKiller Thread",

424 
NULL
, 
ÊowîkûÀr
, NULL, 0);

425 if(
îr
)

426 
∑nic
;

428 
îr
 = 
	`thªad_f‹k
("Air Balloon",

429 
NULL
, 
bÆlo⁄
, NULL, 0);

430 if(
îr
)

431 
∑nic
;

433 
d⁄e
;

434 
∑nic
:

435 
	`∑nic
("airballoon:Åhread_fork failed: %s)\n",

436 
	`°ªº‹
(
îr
));

438 
d⁄e
:

440 
	`lock_acquúe
(
bÆlo⁄_lock
);

441 
	`cv_waô
(
maö_¥ogøm_cv
, 
bÆlo⁄_lock
);

442 
	`lock_ªÀa£
(
bÆlo⁄_lock
);

445 
cou¡
 = 0; cou¡ < 
NROPES
; count++){

446 
	`lock_de°roy
(
r›e_°©us_lock
[
cou¡
]);

449 
	`lock_de°roy
(
bÆlo⁄_lock
);

450 
	`cv_de°roy
(
esˇ≥_cv
);

451 
	`cv_de°roy
(
maö_¥ogøm_cv
);

454 
	`k¥ötf
("MainÅhread done\n");

457 
	}
}

	@syscall/loadelf.c

53 
	~<ty≥s.h
>

54 
	~<kîn/î∫o.h
>

55 
	~<lib.h
>

56 
	~<uio.h
>

57 
	~<¥oc.h
>

58 
	~<cuºít.h
>

59 
	~<addr•a˚.h
>

60 
	~<vnode.h
>

61 
	~<ñf.h
>

79 
	$lﬂd_£gmít
(
addr•a˚
 *
as
, 
vnode
 *
v
,

80 
off_t
 
off£t
, 
vaddr_t
 
vaddr
,

81 
size_t
 
memsize
, size_à
fûesize
,

82 
is_execuèbÀ
)

84 
iovec
 
iov
;

85 
uio
 
u
;

86 
ªsu…
;

88 i‡(
fûesize
 > 
memsize
) {

89 
	`k¥ötf
("ELF: warning: segment filesize > segment memsize\n");

90 
fûesize
 = 
memsize
;

93 
	`DEBUG
(
DB_EXEC
, "ELF: Loading %lu bytesÅo 0x%lx\n",

94 (Ë
fûesize
, (Ë
vaddr
);

96 
iov
.
iov_uba£
 = (
u£Ωå_t
)
vaddr
;

97 
iov
.
iov_Àn
 = 
memsize
;

98 
u
.
uio_iov
 = &
iov
;

99 
u
.
uio_iov˙t
 = 1;

100 
u
.
uio_ªsid
 = 
fûesize
;

101 
u
.
uio_off£t
 = 
off£t
;

102 
u
.
uio_£gÊg
 = 
is_execuèbÀ
 ? 
UIO_USERISPACE
 : 
UIO_USERSPACE
;

103 
u
.
uio_rw
 = 
UIO_READ
;

104 
u
.
uio_•a˚
 = 
as
;

106 
ªsu…
 = 
	`VOP_READ
(
v
, &
u
);

107 i‡(
ªsu…
) {

108  
ªsu…
;

111 i‡(
u
.
uio_ªsid
 != 0) {

113 
	`k¥ötf
("ELF: shortÑead on segment - fileÅruncated?\n");

114  
ENOEXEC
;

133 
size_t
 
fûœmt
;

135 
fûœmt
 = 
memsize
 - 
fûesize
;

136 i‡(
fûœmt
 > 0) {

137 
	`DEBUG
(
DB_EXEC
, "ELF: Zero-filling %lu more bytes\n",

138 (Ë
fûœmt
);

139 
u
.
uio_ªsid
 +
fûœmt
;

140 
ªsu…
 = 
	`uiomovezîos
(
fûœmt
, &
u
);

145  
ªsu…
;

146 
	}
}

154 
	$lﬂd_ñf
(
vnode
 *
v
, 
vaddr_t
 *
íåypoöt
)

156 
Elf_Ehdr
 
eh
;

157 
Elf_Phdr
 
ph
;

158 
ªsu…
, 
i
;

159 
iovec
 
iov
;

160 
uio
 
ku
;

161 
addr•a˚
 *
as
;

163 
as
 = 
	`¥oc_gëas
();

169 
	`uio_köô
(&
iov
, &
ku
, &
eh
, ”h), 0, 
UIO_READ
);

170 
ªsu…
 = 
	`VOP_READ
(
v
, &
ku
);

171 i‡(
ªsu…
) {

172  
ªsu…
;

175 i‡(
ku
.
uio_ªsid
 != 0) {

177 
	`k¥ötf
("ELF: shortÑead on header - fileÅruncated?\n");

178  
ENOEXEC
;

192 i‡(
eh
.
e_idít
[
EI_MAG0
] !
ELFMAG0
 ||

193 
eh
.
e_idít
[
EI_MAG1
] !
ELFMAG1
 ||

194 
eh
.
e_idít
[
EI_MAG2
] !
ELFMAG2
 ||

195 
eh
.
e_idít
[
EI_MAG3
] !
ELFMAG3
 ||

196 
eh
.
e_idít
[
EI_CLASS
] !
ELFCLASS32
 ||

197 
eh
.
e_idít
[
EI_DATA
] !
ELFDATA2MSB
 ||

198 
eh
.
e_idít
[
EI_VERSION
] !
EV_CURRENT
 ||

199 
eh
.
e_vîsi⁄
 !
EV_CURRENT
 ||

200 
eh
.
e_ty≥
!=
ET_EXEC
 ||

201 
eh
.
e_machöe
!=
EM_MACHINE
) {

202  
ENOEXEC
;

220 
i
=0; i<
eh
.
e_phnum
; i++) {

221 
off_t
 
off£t
 = 
eh
.
e_phoff
 + 
i
*eh.
e_phítsize
;

222 
	`uio_köô
(&
iov
, &
ku
, &
ph
, ’h), 
off£t
, 
UIO_READ
);

224 
ªsu…
 = 
	`VOP_READ
(
v
, &
ku
);

225 i‡(
ªsu…
) {

226  
ªsu…
;

229 i‡(
ku
.
uio_ªsid
 != 0) {

231 
	`k¥ötf
("ELF: shortÑead onÖhdr - fileÅruncated?\n");

232  
ENOEXEC
;

235 
ph
.
p_ty≥
) {

236 
PT_NULL
: ;

237 
PT_PHDR
: ;

238 
PT_MIPS_REGINFO
: ;

239 
PT_LOAD
: ;

241 
	`k¥ötf
("loadelf: unknown segmentÅype %d\n",

242 
ph
.
p_ty≥
);

243  
ENOEXEC
;

246 
ªsu…
 = 
	`as_deföe_ªgi⁄
(
as
,

247 
ph
.
p_vaddr
,Öh.
p_memsz
,

248 
ph
.
p_Êags
 & 
PF_R
,

249 
ph
.
p_Êags
 & 
PF_W
,

250 
ph
.
p_Êags
 & 
PF_X
);

251 i‡(
ªsu…
) {

252  
ªsu…
;

256 
ªsu…
 = 
	`as_¥ï¨e_lﬂd
(
as
);

257 i‡(
ªsu…
) {

258  
ªsu…
;

265 
i
=0; i<
eh
.
e_phnum
; i++) {

266 
off_t
 
off£t
 = 
eh
.
e_phoff
 + 
i
*eh.
e_phítsize
;

267 
	`uio_köô
(&
iov
, &
ku
, &
ph
, ’h), 
off£t
, 
UIO_READ
);

269 
ªsu…
 = 
	`VOP_READ
(
v
, &
ku
);

270 i‡(
ªsu…
) {

271  
ªsu…
;

274 i‡(
ku
.
uio_ªsid
 != 0) {

276 
	`k¥ötf
("ELF: shortÑead onÖhdr - fileÅruncated?\n");

277  
ENOEXEC
;

280 
ph
.
p_ty≥
) {

281 
PT_NULL
: ;

282 
PT_PHDR
: ;

283 
PT_MIPS_REGINFO
: ;

284 
PT_LOAD
: ;

286 
	`k¥ötf
("loadelf: unknown segmentÅype %d\n",

287 
ph
.
p_ty≥
);

288  
ENOEXEC
;

291 
ªsu…
 = 
	`lﬂd_£gmít
(
as
, 
v
, 
ph
.
p_off£t
,Öh.
p_vaddr
,

292 
ph
.
p_memsz
,Öh.
p_fûesz
,

293 
ph
.
p_Êags
 & 
PF_X
);

294 i‡(
ªsu…
) {

295  
ªsu…
;

299 
ªsu…
 = 
	`as_com∂ëe_lﬂd
(
as
);

300 i‡(
ªsu…
) {

301  
ªsu…
;

304 *
íåypoöt
 = 
eh
.
e_íåy
;

307 
	}
}

	@syscall/runprogram.c

36 
	~<ty≥s.h
>

37 
	~<kîn/î∫o.h
>

38 
	~<kîn/f˙é.h
>

39 
	~<lib.h
>

40 
	~<¥oc.h
>

41 
	~<cuºít.h
>

42 
	~<addr•a˚.h
>

43 
	~<vm.h
>

44 
	~<vfs.h
>

45 
	~<sysˇŒ.h
>

46 
	~<ã°.h
>

55 
	$ru≈rogøm
(*
¥og«me
)

57 
addr•a˚
 *
as
;

58 
vnode
 *
v
;

59 
vaddr_t
 
íåypoöt
, 
°ack±r
;

60 
ªsu…
;

63 
ªsu…
 = 
	`vfs_›í
(
¥og«me
, 
O_RDONLY
, 0, &
v
);

64 i‡(
ªsu…
) {

65  
ªsu…
;

69 
	`KASSERT
(
	`¥oc_gëas
(Ë=
NULL
);

72 
as
 = 
	`as_¸óã
();

73 i‡(
as
 =
NULL
) {

74 
	`vfs_˛o£
(
v
);

75  
ENOMEM
;

79 
	`¥oc_£ès
(
as
);

80 
	`as_a˘iv©e
();

83 
ªsu…
 = 
	`lﬂd_ñf
(
v
, &
íåypoöt
);

84 i‡(
ªsu…
) {

86 
	`vfs_˛o£
(
v
);

87  
ªsu…
;

91 
	`vfs_˛o£
(
v
);

94 
ªsu…
 = 
	`as_deföe_°ack
(
as
, &
°ack±r
);

95 i‡(
ªsu…
) {

97  
ªsu…
;

101 
	`íãr_√w_¥o˚ss
(0 , 
NULL
 ,

102 
NULL
 ,

103 
°ack±r
, 
íåypoöt
);

106 
	`∑nic
("enter_new_processÑeturned\n");

107  
EINVAL
;

108 
	}
}

	@syscall/sys___getcwd.c

1 
	~<ty≥s.h
>

2 
	~<sysˇŒ.h
>

3 
	~<uio.h
>

4 
	~<kîn/iovec.h
>

5 
	~<vfs.h
>

6 
	~<lib.h
>

7 
	~<kîn/î∫o.h
>

8 
	~<c›yöout.h
>

14 
	$sys___gëcwd
(*
buf
, 
size_t
 
buÊí
, 
öt32_t
* 
ªtvÆ
){

17 if(!
buf
){

18  
EFAULT
;

22 *
c›õd_buf
 = 
	`kmÆloc
((*));

23 
îr
;

25 
uio
 
cwd
;

26 
iovec
 
iov
;

29 
	`uio_köô
(&
iov
, &
cwd
, 
c›õd_buf
, 
buÊí
, 0, 
UIO_READ
);

32 
îr
 = 
	`vfs_gëcwd
(&
cwd
);

34 if(
îr
){

35 
	`∑nic
("sys___getcwdÉrror\n");

36  
îr
;

40 
îr
 = 
	`c›yout
((c⁄° *)
c›õd_buf
, (
u£Ωå_t
)
buf
, (
size_t
)((*)));

41 
	`k‰ì
(
c›õd_buf
);

43 if(
îr
){

44  
îr
;

48 *
ªtvÆ
 = 
cwd
.
uio_off£t
;

51 
	}
}

	@syscall/sys_chdir.c

1 
	~<ty≥s.h
>

2 
	~<sysˇŒ.h
>

3 
	~<vfs.h
>

4 
	~<kîn/î∫o.h
>

5 
	~<lib.h
>

6 
	~<c›yöout.h
>

11 
	$sys_chdú
(c⁄° *
∑th«me
, 
öt32_t
* 
ªtvÆ
){

14 if(!
∑th«me
){

15  
EFAULT
;

19 *
check±r
 = 
	`kmÆloc
((*));

20 
îr
 = 
	`c›yö
((
c⁄°_u£Ωå_t
)
∑th«me
, (*)
check±r
, (*));

21 
	`k‰ì
(
check±r
);

23 if(
îr
){

24  
îr
;

28 
Àn
 = 
	`°æí
(
∑th«me
);

30 if(
Àn
 == 0){

31  
EINVAL
;

35 *
∑th
 = 
	`kmÆloc
((*));

36 
size_t
 *
gŸ_Àn
 = 
	`kmÆloc
((size_t *));

37 
îr
 = 
	`c›yö°r
((
c⁄°_u£Ωå_t
)
∑th«me
, 
∑th
, (
size_t
)(
Àn
+1), 
gŸ_Àn
);

39 
	`k‰ì
(
gŸ_Àn
);

41 if(
îr
){

42 
	`k‰ì
(
∑th
);

43  
îr
;

47 
îr
 = 
	`vfs_chdú
(
∑th
);

50 if(
îr
){

51 *
ªtvÆ
 = (
öt32_t
)-1;

53 *
ªtvÆ
 = (
öt32_t
)0;

56  
îr
;

57 
	}
}

	@syscall/sys_close.c

1 
	~<ty≥s.h
>

2 
	~<sysˇŒ.h
>

3 
	~<cuºít.h
>

4 
	~<limôs.h
>

5 
	~<vnode.h
>

6 
	~<vfs.h
>

7 
	~<lib.h
>

8 
	~<fûëabÀ.h
>

9 
	~<¥oc.h
>

10 
	~<synch.h
>

11 
	~<kîn/î∫o.h
>

13 
	$sys_˛o£
 (
fd
){

15 
	`KASSERT
(
cuΩroc
!=
NULL
);

16 
	`lock_acquúe
(
cuΩroc
->
¨øy_lock
);

18 
ödex
=-1;

19 
fd_íåy
* 
„
=
	`gë
(
cuΩroc
->
fd_¨øy
,
fd
,&
ödex
);

20 if(
„
==
NULL
){

21 
	`lock_ªÀa£
(
cuΩroc
->
¨øy_lock
);

22  
EBADF
;

24 
	`KASSERT
(
ödex
!=-1);

25 
fûe
* fûe=
„
->
f
;

26 
vnode
* 
vn
=
fûe
->vn;

27 
lock
* 
l
=
fûe
->l;

29 
	`lock_acquúe
(
l
);

30 
	`KASSERT
(
fûe
->
ªfcou¡
>=1);

32 --(
fûe
->
ªfcou¡
);

34 if(
fûe
->
ªfcou¡
==0){

35 
	`VOP_DECREF
(
vn
);

36 
fûe
->
vÆid
=0;

37 
fûe
->
vn
=
NULL
;

38 
	`lock_ªÀa£
(
l
);

39 
	`lock_de°roy
(
l
);

40 
	`k‰ì
(
fûe
);

41 
„
->
f
=
NULL
;

42 
	`¨øy_ªmove
(
cuΩroc
->
fd_¨øy
,
ödex
);

43 
	`k‰ì
(
„
);

44 
	`lock_ªÀa£
(
cuΩroc
->
¨øy_lock
);

49 
„
->
f
=
NULL
;

50 
	`¨øy_ªmove
(
cuΩroc
->
fd_¨øy
,
ödex
);

51 
	`k‰ì
(
„
);

52 
	`lock_ªÀa£
(
l
);

53 
	`lock_ªÀa£
(
cuΩroc
->
¨øy_lock
);

59 
	}
}

	@syscall/sys_dup2.c

1 
	~<ty≥s.h
>

2 
	~<sysˇŒ.h
>

3 
	~<lib.h
>

4 
	~<fûëabÀ.h
>

5 
	~<cuºít.h
>

6 
	~<¥oc.h
>

7 
	~<kîn/î∫o.h
>

8 
	~<¨øy.h
>

9 
	~<limôs.h
>

10 
	$sys_dup2
(
ﬁdfd
, 
√wfd
,
öt32_t
* 
ªtvÆ
){

11 if(
√wfd
>=
OPEN_MAX
Ë 
EBADF
;

12 
	`lock_acquúe
(
cuΩroc
->
¨øy_lock
);

13 
fd_íåy
* 
„
=
	`gë
(
cuΩroc
->
fd_¨øy
,
ﬁdfd
,
NULL
);

14 if(
„
==
NULL
||
√wfd
<0){

15 
	`lock_ªÀa£
(
cuΩroc
->
¨øy_lock
);

16  
EBADF
;

19 if(
ﬁdfd
==
√wfd
){

20 *
ªtvÆ
=
√wfd
;

21 
	`lock_ªÀa£
(
cuΩroc
->
¨øy_lock
);

25 if(
	`gë
(
cuΩroc
->
fd_¨øy
,
√wfd
,
NULL
)!=NULL){

26 
	`lock_ªÀa£
(
cuΩroc
->
¨øy_lock
);

27 
	`sys_˛o£
(
√wfd
);

28 
	`lock_acquúe
(
cuΩroc
->
¨øy_lock
);

31 if(
	`¨øy_num
(
cuΩroc
->
fd_¨øy
)>=
OPEN_MAX
){

32 
	`lock_ªÀa£
(
cuΩroc
->
¨øy_lock
);

33  
EMFILE
;;

36 
fd_íåy
* 
√w_fdíåy
=
	`kmÆloc
((fd_entry));

37 if(
√w_fdíåy
==
NULL
Ë 
ENFILE
;

39 
√w_fdíåy
->
fd
=
√wfd
;

40 
√w_fdíåy
->
f
=
„
->f;

41 ++((
„
->
f
)->
ªfcou¡
);

42 
	`VOP_INCREF
(
„
->
f
->
vn
);

43 
	`¨øy_add
(
cuΩroc
->
fd_¨øy
,
√w_fdíåy
,
NULL
);

44 *
ªtvÆ
=
√wfd
;

45 
	`lock_ªÀa£
(
cuΩroc
->
¨øy_lock
);

48 
	}
}

	@syscall/sys_lseek.c

1 
	~<ty≥s.h
>

2 
	~<sysˇŒ.h
>

3 
	~<cuºít.h
>

4 
	~<fûëabÀ.h
>

5 
	~<¥oc.h
>

6 
	~<¨øy.h
>

7 
	~<kîn/£ek.h
>

8 
	~<kîn/°©.h
>

9 
	~<kîn/î∫o.h
>

10 
	~<kîn/°©ty≥s.h
>

12 
	$sys_l£ek
(
fd
, 
off_t
 
pos
, 
whí˚
,off_t* 
ªtvÆ
){

13 
fd_íåy
* 
„
=
	`gë
(
cuΩroc
->
fd_¨øy
,
fd
,
NULL
);

15 if(
„
==
NULL
Ë 
EBADF
;

17 
mode_t
 
ty≥
;

18 
fûe
* fûe=
„
->
f
;

19 
vnode
* 
vn
=
fûe
->vn;

20 
lock
* 
l
=
fûe
->l;

21 
off_t
 
√woff£t
;

23 
	`VOP_GETTYPE
(
vn
,&
ty≥
);

24 
ty≥
Òy≥&
_S_IFMT
;

25 if(
ty≥
==
_S_IFCHR
||ty≥==
_S_IFBLK
Ë 
ESPIPE
;

27 
	`lock_acquúe
(
l
);

29 if(
whí˚
==
SEEK_SET
){

30 
√woff£t
=
pos
;

32 if(
whí˚
==
SEEK_CUR
){

33 
√woff£t
=
fûe
->
off£t
+
pos
;

35 i‡(
whí˚
==
SEEK_END
){

36 
°©
* 
s
=
	`kmÆloc
((stat));

37 
	`KASSERT
(
s
!=
NULL
);

38 
	`VOP_STAT
(
vn
,
s
);

39 
√woff£t
=
s
->
°_size
+
pos
;

40 
	`k‰ì
(
s
);

43 
	`lock_ªÀa£
(
l
);

44  
EINVAL
;

47 if(
√woff£t
<0){

48 
	`lock_ªÀa£
(
l
);

49  
EINVAL
;

52 
fûe
->
off£t
=
√woff£t
;

53 *
ªtvÆ
=
√woff£t
;

54 
	`lock_ªÀa£
(
l
);

56 
	}
}

	@syscall/sys_open.c

1 
	~<ty≥s.h
>

2 
	~<sysˇŒ.h
>

3 
	~<cuºít.h
>

4 
	~<limôs.h
>

5 
	~<vnode.h
>

6 
	~<vfs.h
>

7 
	~<lib.h
>

8 
	~<fûëabÀ.h
>

9 
	~<¥oc.h
>

10 
	~<synch.h
>

11 
	~<kîn/î∫o.h
>

12 
	~<¨øy.h
>

13 
	~<vnode.h
>

14 
	~<kîn/°©.h
>

15 
	~<kîn/f˙é.h
>

16 
	~<c›yöout.h
>

18 
	$sys_›í
 (c⁄° *
fûíame
, 
Êags
, 
mode_t
 
mode
,
öt32_t
* 
ªtVÆ
){

22 if(!
fûíame
){

23  
EFAULT
;

27 * 
check_«me
=
	`kmÆloc
((*));

28 
±r_îr
 = 
	`c›yö
((
c⁄°_u£Ωå_t
)
fûíame
, (*)
check_«me
, (*));

29 
	`k‰ì
(
check_«me
);

30 if(
±r_îr
){

31  
±r_îr
;

39 
	`lock_acquúe
(
cuΩroc
->
¨øy_lock
);

40 if(
	`¨øy_num
(
cuΩroc
->
fd_¨øy
)>=
OPEN_MAX
){

41 
	`lock_ªÀa£
(
cuΩroc
->
¨øy_lock
);

42  
EMFILE
;

44 
fd
=0;

45 
	`gë
(
cuΩroc
->
fd_¨øy
,
fd
,
NULL
)!=NULL) ++fd;

47 
vnode
* 
vn
;

48 
fd_íåy
* 
„
;

49 
fûe
* file;

50 
îr
;

51 * 
«me
=
	`k°rdup
(
fûíame
);

52 
îr
=
	`vfs_›í
(
«me
,
Êags
,
mode
,&
vn
);

53 if(
îr
) {

54 
	`lock_ªÀa£
(
cuΩroc
->
¨øy_lock
);

55  
îr
;

58 
fûe
=
	`kmÆloc
((file));

59 if(
fûe
==
NULL
){

60 
	`lock_ªÀa£
(
cuΩroc
->
¨øy_lock
);

61  
ENFILE
;

65 
fûe
->
ªfcou¡
=1;

66 
fûe
->
°©us
=
Êags
;

67 
fûe
->
vn
=vn;

68 
fûe
->
l
=
	`lock_¸óã
("l");

69 
fûe
->
vÆid
=1;

70 if(
Êags
&
O_APPEND
){

71 
°©
* 
s
=
	`kmÆloc
((stat));

72 
	`KASSERT
(
s
!=
NULL
);

73 
	`VOP_STAT
(
vn
,
s
);

74 
fûe
->
off£t
=
s
->
°_size
;

77 
fûe
->
off£t
=0;

79 
„
=
	`kmÆloc
((
fd_íåy
));

80 if(
„
==
NULL
) {

81 
	`lock_ªÀa£
(
cuΩroc
->
¨øy_lock
);

82  
EMFILE
;

85 
„
->
fd
=fd;

86 
„
->
f
=
fûe
;

88 
	`fûëabÀ_ö£π
(&
fûëabÀ
,
fûe
);

89 
	`¨øy_add
(
cuΩroc
->
fd_¨øy
,
„
,
NULL
);

90 *
ªtVÆ
=
fd
;

91 
	`lock_ªÀa£
(
cuΩroc
->
¨øy_lock
);

93 
	}
}

	@syscall/sys_read.c

1 
	~<ty≥s.h
>

2 
	~<sysˇŒ.h
>

3 
	~<cuºít.h
>

4 
	~<limôs.h
>

5 
	~<vnode.h
>

6 
	~<vfs.h
>

7 
	~<lib.h
>

8 
	~<fûëabÀ.h
>

9 
	~<¥oc.h
>

10 
	~<synch.h
>

11 
	~<kîn/î∫o.h
>

12 
	~<uio.h
>

13 
	~<kîn/iovec.h
>

14 
	~<kîn/f˙é.h
>

15 
	~<c›yöout.h
>

17 
	$sys_ªad
 (
fd
, *
buf
, 
size_t
 
buÊí
,
öt32_t
* 
ªtVÆ
){

19 if(!
buf
){

20  
EFAULT
;

32 
fd_íåy
* 
„
=
	`gë
(
cuΩroc
->
fd_¨øy
,
fd
,
NULL
);

33 if(
„
==
NULL
Ë 
EBADF
;

35 
fûe
* fûe=
„
->
f
;

36 
vnode
* 
vn
=
fûe
->vn;

37 
Êags
=(
fûe
->
°©us
)&
O_ACCMODE
;

39 if(
Êags
&
O_WRONLY
Ë 
EBADF
;

41 
uio
 
ku
;

42 
iovec
 
iov
;

43 
îr
;

44 * 
kbuf
=
	`kmÆloc
(
buÊí
);

45 
	`uio_köô
(&
iov
,&
ku
,
kbuf
,
buÊí
,
fûe
->
off£t
,
UIO_READ
);

48 
îr
=
	`VOP_READ
(
vn
,&
ku
);

49 if(
îr
){

50 
	`∑nic
("sysÑeadÉrror\n");

51  
îr
;

54 
fûe
->
off£t
=
ku
.
uio_off£t
;

55 *
ªtVÆ
=
buÊí
-
ku
.
uio_ªsid
;

57 if(
buf
){

58 
îr
=
	`c›yout
(
kbuf
,(
u£Ωå_t
)
buf
,
buÊí
);

59 if(
îr
){

60 
	`k‰ì
(
kbuf
);

61  
îr
;

64 
	`k‰ì
(
kbuf
);

66 
	}
}

	@syscall/sys_write.c

1 
	~<ty≥s.h
>

2 
	~<sysˇŒ.h
>

3 
	~<lib.h
>

4 
	~<vnode.h
>

5 
	~<uio.h
>

6 
	~<kîn/iovec.h
>

7 
	~<¨øy.h
>

8 
	~<cuºít.h
>

9 
	~<fûëabÀ.h
>

10 
	~<¥oc.h
>

11 
	~<kîn/î∫o.h
>

12 
	~<kîn/f˙é.h
>

13 
	~<c›yöout.h
>

14 
	$sys_wrôe
 (
fd
, c⁄° *
buf
, 
size_t
 
nbyãs
,
öt32_t
* 
ªtVÆ
){

15 
fd_íåy
* 
„
=
	`gë
(
cuΩroc
->
fd_¨øy
,
fd
,
NULL
);

16 if(
„
==
NULL
Ë 
EBADF
;

20 if(!
buf
){

21  
EFAULT
;

25 * 
check_buf
 = 
	`kmÆloc
((*));

26 
±r_îr
 = 
	`c›yö
((
c⁄°_u£Ωå_t
)
buf
, (*)
check_buf
, (*));

27 
	`k‰ì
(
check_buf
);

28 if(
±r_îr
){

29  
±r_îr
;

34 
fûe
* fûe=
„
->
f
;

36 
Êags
=(
fûe
->
°©us
)&
O_ACCMODE
;

37 
vnode
* 
vn
=
fûe
->vn;

38 
lock
* 
l
=
fûe
->l;

40 if(
Êags
==
O_RDONLY
Ë 
EBADF
;

42 
	`lock_acquúe
(
l
);

44 
uio
 uio;

45 
iovec
 
iov
;

46 
îr
;

47 * 
c
 =
	`k°rdup
((c⁄° *)
buf
);

49 
	`uio_köô
(&
iov
,&
uio
,
c
,
nbyãs
,
fûe
->
off£t
,
UIO_WRITE
);

50 
îr
=
	`VOP_WRITE
(
vn
,&
uio
);

52 if(
îr
){

53 
	`∑nic
("sys_writeÉrror\n");

54  
îr
;

57 
fûe
->
off£t
=
uio
.
uio_off£t
;

58 *
ªtVÆ
=
nbyãs
-
uio
.
uio_ªsid
;

59 
	`k‰ì
(
c
);

60 
	`lock_ªÀa£
(
l
);

62 
	}
}

	@syscall/time_syscalls.c

30 
	~<ty≥s.h
>

31 
	~<˛ock.h
>

32 
	~<c›yöout.h
>

33 
	~<sysˇŒ.h
>

39 
	$sys___time
(
u£Ωå_t
 
u£r_£c⁄ds_±r
, u£Ωå_à
u£r_«no£c⁄ds_±r
)

41 
time•ec
 
ts
;

42 
ªsu…
;

44 
	`gëtime
(&
ts
);

46 
ªsu…
 = 
	`c›yout
(&
ts
.
tv_£c
, 
u£r_£c⁄ds_±r
, (ts.tv_sec));

47 i‡(
ªsu…
) {

48  
ªsu…
;

51 
ªsu…
 = 
	`c›yout
(&
ts
.
tv_n£c
, 
u£r_«no£c⁄ds_±r
,

52 (
ts
.
tv_n£c
));

53 i‡(
ªsu…
) {

54  
ªsu…
;

58 
	}
}

	@test/arraytest.c

30 
	~<ty≥s.h
>

31 
	~<lib.h
>

32 
	~<¨øy.h
>

33 
	~<ã°.h
>

35 
	#TESTSIZE
 73

	)

39 
	$ã°a
(
¨øy
 *
a
)

41 
ã°¨øy
[
TESTSIZE
];

42 
i
, 
j
, 
n
, 
r
, *
p
;

44 
i
=0; i<
TESTSIZE
; i++) {

45 
ã°¨øy
[
i
]=i;

48 
n
 = 
	`¨øy_num
(
a
);

49 
	`KASSERT
(
n
==0);

51 
i
=0; i<
TESTSIZE
; i++) {

52 
r
 = 
	`¨øy_add
(
a
, &
ã°¨øy
[
i
], 
NULL
);

53 
	`KASSERT
(
r
==0);

54 
n
 = 
	`¨øy_num
(
a
);

55 
	`KASSERT
(
n
==
i
+1);

57 
n
 = 
	`¨øy_num
(
a
);

58 
	`KASSERT
(
n
==
TESTSIZE
);

60 
i
=0; i<
TESTSIZE
; i++) {

61 
p
 = 
	`¨øy_gë
(
a
, 
i
);

62 
	`KASSERT
(*
p
 =
i
);

64 
n
 = 
	`¨øy_num
(
a
);

65 
	`KASSERT
(
n
==
TESTSIZE
);

67 
j
=0; j<
TESTSIZE
*4; j++) {

68 
i
 = 
	`øndom
()%
TESTSIZE
;

69 
p
 = 
	`¨øy_gë
(
a
, 
i
);

70 
	`KASSERT
(*
p
 =
i
);

72 
n
 = 
	`¨øy_num
(
a
);

73 
	`KASSERT
(
n
==
TESTSIZE
);

75 
i
=0; i<
TESTSIZE
; i++) {

76 
	`¨øy_£t
(
a
, 
i
, &
ã°¨øy
[
TESTSIZE
-i-1]);

79 
i
=0; i<
TESTSIZE
; i++) {

80 
p
 = 
	`¨øy_gë
(
a
, 
i
);

81 
	`KASSERT
(*
p
 =
TESTSIZE
-
i
-1);

84 
r
 = 
	`¨øy_£tsize
(
a
, 
TESTSIZE
/2);

85 
	`KASSERT
(
r
==0);

87 
i
=0; i<
TESTSIZE
/2; i++) {

88 
p
 = 
	`¨øy_gë
(
a
, 
i
);

89 
	`KASSERT
(*
p
 =
TESTSIZE
-
i
-1);

92 
	`¨øy_ªmove
(
a
, 1);

94 
i
=1; i<
TESTSIZE
/2 - 1; i++) {

95 
p
 = 
	`¨øy_gë
(
a
, 
i
);

96 
	`KASSERT
(*
p
 =
TESTSIZE
-
i
-2);

98 
p
 = 
	`¨øy_gë
(
a
, 0);

99 
	`KASSERT
(*
p
 =
TESTSIZE
-1);

101 
	`¨øy_£tsize
(
a
, 2);

102 
p
 = 
	`¨øy_gë
(
a
, 0);

103 
	`KASSERT
(*
p
 =
TESTSIZE
-1);

104 
p
 = 
	`¨øy_gë
(
a
, 1);

105 
	`KASSERT
(*
p
 =
TESTSIZE
-3);

107 
	`¨øy_£t
(
a
, 1, 
NULL
);

108 
	`¨øy_£tsize
(
a
, 2);

109 
p
 = 
	`¨øy_gë
(
a
, 0);

110 
	`KASSERT
(*
p
 =
TESTSIZE
-1);

111 
p
 = 
	`¨øy_gë
(
a
, 1);

112 
	`KASSERT
(
p
==
NULL
);

114 
	`¨øy_£tsize
(
a
, 
TESTSIZE
*10);

115 
p
 = 
	`¨øy_gë
(
a
, 0);

116 
	`KASSERT
(*
p
 =
TESTSIZE
-1);

117 
p
 = 
	`¨øy_gë
(
a
, 1);

118 
	`KASSERT
(
p
==
NULL
);

119 
	}
}

122 
	$¨øyã°
(
«rgs
, **
¨gs
)

124 
¨øy
 *
a
;

126 ()
«rgs
;

127 ()
¨gs
;

129 
	`k¥ötf
("BeginningárrayÅest...\n");

130 
a
 = 
	`¨øy_¸óã
();

131 
	`KASSERT
(
a
 !
NULL
);

133 
	`ã°a
(
a
);

135 
	`¨øy_£tsize
(
a
, 0);

137 
	`ã°a
(
a
);

139 
	`¨øy_£tsize
(
a
, 0);

140 
	`¨øy_de°roy
(
a
);

142 
	`k¥ötf
("ArrayÅest complete\n");

144 
	}
}

	@test/bitmaptest.c

30 
	~<ty≥s.h
>

31 
	~<lib.h
>

32 
	~<bôm≠.h
>

33 
	~<ã°.h
>

35 
	#TESTSIZE
 533

	)

38 
	$bôm≠ã°
(
«rgs
, **
¨gs
)

40 
bôm≠
 *
b
;

41 
d©a
[
TESTSIZE
];

42 
uöt32_t
 
x
;

43 
i
;

45 ()
«rgs
;

46 ()
¨gs
;

48 
	`k¥ötf
("Starting bitmapÅest...\n");

50 
i
=0; i<
TESTSIZE
; i++) {

51 
d©a
[
i
] = 
	`øndom
()%2;

54 
b
 = 
	`bôm≠_¸óã
(
TESTSIZE
);

55 
	`KASSERT
(
b
 !
NULL
);

57 
i
=0; i<
TESTSIZE
; i++) {

58 
	`KASSERT
(
	`bôm≠_is£t
(
b
, 
i
)==0);

61 
i
=0; i<
TESTSIZE
; i++) {

62 i‡(
d©a
[
i
]) {

63 
	`bôm≠_m¨k
(
b
, 
i
);

66 
i
=0; i<
TESTSIZE
; i++) {

67 i‡(
d©a
[
i
]) {

68 
	`KASSERT
(
	`bôm≠_is£t
(
b
, 
i
));

71 
	`KASSERT
(
	`bôm≠_is£t
(
b
, 
i
)==0);

75 
i
=0; i<
TESTSIZE
; i++) {

76 i‡(
d©a
[
i
]) {

77 
	`bôm≠_unm¨k
(
b
, 
i
);

80 
	`bôm≠_m¨k
(
b
, 
i
);

83 
i
=0; i<
TESTSIZE
; i++) {

84 i‡(
d©a
[
i
]) {

85 
	`KASSERT
(
	`bôm≠_is£t
(
b
, 
i
)==0);

88 
	`KASSERT
(
	`bôm≠_is£t
(
b
, 
i
));

92 
	`bôm≠_Æloc
(
b
, &
x
)==0) {

93 
	`KASSERT
(
x
 < 
TESTSIZE
);

94 
	`KASSERT
(
	`bôm≠_is£t
(
b
, 
x
));

95 
	`KASSERT
(
d©a
[
x
]==1);

96 
d©a
[
x
] = 0;

99 
i
=0; i<
TESTSIZE
; i++) {

100 
	`KASSERT
(
	`bôm≠_is£t
(
b
, 
i
));

101 
	`KASSERT
(
d©a
[
i
]==0);

104 
	`k¥ötf
("BitmapÅest complete\n");

106 
	}
}

	@test/fstest.c

41 
	~<ty≥s.h
>

42 
	~<kîn/î∫o.h
>

43 
	~<kîn/f˙é.h
>

44 
	~<lib.h
>

45 
	~<uio.h
>

46 
	~<thªad.h
>

47 
	~<synch.h
>

48 
	~<vfs.h
>

49 
	~<fs.h
>

50 
	~<vnode.h
>

51 
	~<ã°.h
>

53 
	#SLOGAN
 "HODIE MIHI - CRAS TIBI\n"

	)

54 
	#FILENAME
 "f°e°.tmp"

	)

55 
	#NCHUNKS
 720

	)

56 
	#NTHREADS
 12

	)

57 
	#NLONG
 32

	)

58 
	#NCREATE
 24

	)

60 
£m≠h‹e
 *
	gthªad£m
 = 
NULL
;

64 
	$öô_thªad£m
()

66 i‡(
thªad£m
==
NULL
) {

67 
thªad£m
 = 
	`£m_¸óã
("fstestsem", 0);

68 i‡(
thªad£m
 =
NULL
) {

69 
	`∑nic
("fstest: sem_create failed\n");

72 
	}
}

80 
	$rŸ©e
(*
°r
, 
amt
)

82 
i
, 
ch
;

84 
amt
 = (amt+2600)%26;

85 
	`KASSERT
(
amt
>=0);

87 
i
=0; 
°r
[i]; i++) {

88 
ch
 = 
°r
[
i
];

89 i‡(
ch
>='A' && ch<='Z') {

90 
ch
 = ch - 'A';

91 
ch
 +
amt
;

92 
ch
 %= 26;

93 
ch
 = ch + 'A';

94 
	`KASSERT
(
ch
>='A' && ch<='Z');

96 
°r
[
i
] = 
ch
;

98 
	}
}

104 
	$f°e°_makíame
(*
buf
, 
size_t
 
buÊí
,

105 c⁄° *
fs
, c⁄° *
«mesuffix
)

107 
	`¢¥ötf
(
buf
, 
buÊí
, "%s:%s%s", 
fs
, 
FILENAME
, 
«mesuffix
);

108 
	`KASSERT
(
	`°æí
(
buf
Ë< 
buÊí
);

109 
	}
}

111 
	#MAKENAME
(Ë
	`f°e°_makíame
(
«me
, “ame), 
fs
, 
«mesuffix
)

	)

115 
	$f°e°_ªmove
(c⁄° *
fs
, c⁄° *
«mesuffix
)

117 
«me
[32];

118 
buf
[32];

119 
îr
;

121 
	`MAKENAME
();

123 
	`°r˝y
(
buf
, 
«me
);

124 
îr
 = 
	`vfs_ªmove
(
buf
);

125 i‡(
îr
) {

126 
	`k¥ötf
("CouldÇŸÑemovê%s: %s\n", 
«me
, 
	`°ªº‹
(
îr
));

131 
	}
}

135 
	$f°e°_wrôe
(c⁄° *
fs
, c⁄° *
«mesuffix
,

136 
°ridesize
, 
°ridïos
)

138 
vnode
 *
vn
;

139 
îr
;

140 
i
;

141 
size_t
 
shouldbyãs
=0;

142 
size_t
 
byãs
=0;

143 
off_t
 
pos
=0;

144 
«me
[32];

145 
buf
[32];

146 
iovec
 
iov
;

147 
uio
 
ku
;

148 
Êags
;

150 
	`KASSERT
((
buf
Ë> 
	`°æí
(
SLOGAN
));

152 
	`MAKENAME
();

154 
Êags
 = 
O_WRONLY
|
O_CREAT
;

155 i‡(
°ridesize
 == 1) {

156 
Êags
 |
O_TRUNC
;

160 
	`°r˝y
(
buf
, 
«me
);

161 
îr
 = 
	`vfs_›í
(
buf
, 
Êags
, 0664, &
vn
);

162 i‡(
îr
) {

163 
	`k¥ötf
("CouldÇot open %s for write: %s\n",

164 
«me
, 
	`°ªº‹
(
îr
));

168 
i
=0; i<
NCHUNKS
; i++) {

169 i‡(
i
 % 
°ridesize
 !
°ridïos
) {

170 
pos
 +
	`°æí
(
SLOGAN
);

173 
	`°r˝y
(
buf
, 
SLOGAN
);

174 
	`rŸ©e
(
buf
, 
i
);

175 
	`uio_köô
(&
iov
, &
ku
, 
buf
, 
	`°æí
(
SLOGAN
), 
pos
, 
UIO_WRITE
);

176 
îr
 = 
	`VOP_WRITE
(
vn
, &
ku
);

177 i‡(
îr
) {

178 
	`k¥ötf
("%s: Wrôêîr‹: %s\n", 
«me
, 
	`°ªº‹
(
îr
));

179 
	`vfs_˛o£
(
vn
);

180 
	`vfs_ªmove
(
«me
);

184 i‡(
ku
.
uio_ªsid
 > 0) {

185 
	`k¥ötf
("%s: Short write: %lu bytesÜeft over\n",

186 
«me
, (Ë
ku
.
uio_ªsid
);

187 
	`vfs_˛o£
(
vn
);

188 
	`vfs_ªmove
(
«me
);

192 
byãs
 +(
ku
.
uio_off£t
 - 
pos
);

193 
shouldbyãs
 +
	`°æí
(
SLOGAN
);

194 
pos
 = 
ku
.
uio_off£t
;

197 
	`vfs_˛o£
(
vn
);

199 i‡(
byãs
 !
shouldbyãs
) {

200 
	`k¥ötf
("%s: %lu bytes written, should have been %lu!\n",

201 
«me
, (Ë
byãs
,

202 (Ë(
NCHUNKS
*
	`°æí
(
SLOGAN
)));

203 
	`vfs_ªmove
(
«me
);

206 
	`k¥ötf
("%s: %lu byã†wrôãn\n", 
«me
, (Ë
byãs
);

209 
	}
}

213 
	$f°e°_ªad
(c⁄° *
fs
, c⁄° *
«mesuffix
)

215 
vnode
 *
vn
;

216 
îr
;

217 
i
;

218 
size_t
 
byãs
=0;

219 
«me
[32];

220 
buf
[32];

221 
iovec
 
iov
;

222 
uio
 
ku
;

224 
	`MAKENAME
();

227 
	`°r˝y
(
buf
, 
«me
);

228 
îr
 = 
	`vfs_›í
(
buf
, 
O_RDONLY
, 0664, &
vn
);

229 i‡(
îr
) {

230 
	`k¥ötf
("CouldÇot openÅest file forÑead: %s\n",

231 
	`°ªº‹
(
îr
));

235 
i
=0; i<
NCHUNKS
; i++) {

236 
	`uio_köô
(&
iov
, &
ku
, 
buf
, 
	`°æí
(
SLOGAN
), 
byãs
, 
UIO_READ
);

237 
îr
 = 
	`VOP_READ
(
vn
, &
ku
);

238 i‡(
îr
) {

239 
	`k¥ötf
("%s: RódÉº‹: %s\n", 
«me
, 
	`°ªº‹
(
îr
));

240 
	`vfs_˛o£
(
vn
);

244 i‡(
ku
.
uio_ªsid
 > 0) {

245 
	`k¥ötf
("%s: Sh‹àªad: %lu byã†À· ovî\n", 
«me
,

246 (Ë
ku
.
uio_ªsid
);

247 
	`vfs_˛o£
(
vn
);

250 
buf
[
	`°æí
(
SLOGAN
)] = 0;

251 
	`rŸ©e
(
buf
, -
i
);

252 i‡(
	`°rcmp
(
buf
, 
SLOGAN
)) {

253 
	`k¥ötf
("%s: Test failed:Üine %d mismatched: %s\n",

254 
«me
, 
i
+1, 
buf
);

255 
	`vfs_˛o£
(
vn
);

259 
byãs
 = 
ku
.
uio_off£t
;

262 
	`vfs_˛o£
(
vn
);

264 i‡(
byãs
 !
NCHUNKS
*
	`°æí
(
SLOGAN
)) {

265 
	`k¥ötf
("%s: %lu bytesÑead, should have been %lu!\n",

266 
«me
, (Ë
byãs
,

267 (Ë(
NCHUNKS
*
	`°æí
(
SLOGAN
)));

270 
	`k¥ötf
("%s: %lu byã†ªad\n", 
«me
, (Ë
byãs
);

272 
	}
}

278 
	$dof°e°
(c⁄° *
fûesys
)

280 
	`k¥ötf
("*** Sèπög fûesy°emÅe° o¿%s:\n", 
fûesys
);

282 i‡(
	`f°e°_wrôe
(
fûesys
, "", 1, 0)) {

283 
	`k¥ötf
("*** Test failed\n");

287 i‡(
	`f°e°_ªad
(
fûesys
, "")) {

288 
	`k¥ötf
("*** Test failed\n");

292 i‡(
	`f°e°_ªmove
(
fûesys
, "")) {

293 
	`k¥ötf
("*** Test failed\n");

297 
	`k¥ötf
("*** FilesystemÅest done\n");

298 
	}
}

304 
	$ªad°ªss_thªad
(*
fs
, 
num
)

306 c⁄° *
fûesys
 = 
fs
;

307 i‡(
	`f°e°_ªad
(
fûesys
, "")) {

308 
	`k¥ötf
("*** Thªad %lu: faûed\n", 
num
);

310 
	`V
(
thªad£m
);

311 
	}
}

315 
	$d‹ód°ªss
(c⁄° *
fûesys
)

317 
i
, 
îr
;

319 
	`öô_thªad£m
();

321 
	`k¥ötf
("*** Sèπög f†ªad såes†ã° o¿%s:\n", 
fûesys
);

323 i‡(
	`f°e°_wrôe
(
fûesys
, "", 1, 0)) {

324 
	`k¥ötf
("*** Test failed\n");

328 
i
=0; i<
NTHREADS
; i++) {

329 
îr
 = 
	`thªad_f‹k
("ªad°ªss", 
NULL
,

330 
ªad°ªss_thªad
, (*)
fûesys
, 
i
);

331 i‡(
îr
) {

332 
	`∑nic
("readstress:Åhread_fork failed: %s\n",

333 
	`°ªº‹
(
îr
));

337 
i
=0; i<
NTHREADS
; i++) {

338 
	`P
(
thªad£m
);

341 i‡(
	`f°e°_ªmove
(
fûesys
, "")) {

342 
	`k¥ötf
("*** Test failed\n");

346 
	`k¥ötf
("*** fsÑead stressÅest done\n");

347 
	}
}

353 
	$wrôe°ªss_thªad
(*
fs
, 
num
)

355 c⁄° *
fûesys
 = 
fs
;

356 
num°r
[8];

357 
	`¢¥ötf
(
num°r
, “um°r), "%lu", 
num
);

359 i‡(
	`f°e°_wrôe
(
fûesys
, 
num°r
, 1, 0)) {

360 
	`k¥ötf
("*** Thªad %lu: faûed\n", 
num
);

361 
	`V
(
thªad£m
);

365 i‡(
	`f°e°_ªad
(
fûesys
, 
num°r
)) {

366 
	`k¥ötf
("*** Thªad %lu: faûed\n", 
num
);

367 
	`V
(
thªad£m
);

371 i‡(
	`f°e°_ªmove
(
fûesys
, 
num°r
)) {

372 
	`k¥ötf
("*** Thªad %lu: faûed\n", 
num
);

375 
	`k¥ötf
("*** Thªad %lu: d⁄e\n", 
num
);

377 
	`V
(
thªad£m
);

378 
	}
}

382 
	$dowrôe°ªss
(c⁄° *
fûesys
)

384 
i
, 
îr
;

386 
	`öô_thªad£m
();

388 
	`k¥ötf
("*** Sèπög f†wrôê°ªs†ã° o¿%s:\n", 
fûesys
);

390 
i
=0; i<
NTHREADS
; i++) {

391 
îr
 = 
	`thªad_f‹k
("wrôe°ªss", 
NULL
,

392 
wrôe°ªss_thªad
, (*)
fûesys
, 
i
);

393 i‡(
îr
) {

394 
	`∑nic
("thªad_f‹k faûed %s\n", 
	`°ªº‹
(
îr
));

398 
i
=0; i<
NTHREADS
; i++) {

399 
	`P
(
thªad£m
);

402 
	`k¥ötf
("*** fs write stressÅest done\n");

403 
	}
}

409 
	$wrôe°ªss2_thªad
(*
fs
, 
num
)

411 c⁄° *
fûesys
 = 
fs
;

413 i‡(
	`f°e°_wrôe
(
fûesys
, "", 
NTHREADS
, 
num
)) {

414 
	`k¥ötf
("*** Thªad %lu: faûed\n", 
num
);

415 
	`V
(
thªad£m
);

419 
	`V
(
thªad£m
);

420 
	}
}

424 
	$dowrôe°ªss2
(c⁄° *
fûesys
)

426 
i
, 
îr
;

427 
«me
[32];

428 
vnode
 *
vn
;

430 
	`öô_thªad£m
();

432 
	`k¥ötf
("*** Sèπög f†wrôê°ªs†ã° 2 o¿%s:\n", 
fûesys
);

435 
	`f°e°_makíame
(
«me
, “ame), 
fûesys
, "");

436 
îr
 = 
	`vfs_›í
(
«me
, 
O_WRONLY
|
O_CREAT
|
O_TRUNC
, 0664, &
vn
);

437 i‡(
îr
) {

438 
	`k¥ötf
("CouldÇŸ cª©êã° fûe: %s\n", 
	`°ªº‹
(
îr
));

439 
	`k¥ötf
("*** Test failed\n");

442 
	`vfs_˛o£
(
vn
);

444 
i
=0; i<
NTHREADS
; i++) {

445 
îr
 = 
	`thªad_f‹k
("wrôe°ªss2", 
NULL
,

446 
wrôe°ªss2_thªad
, (*)
fûesys
, 
i
);

447 i‡(
îr
) {

448 
	`∑nic
("writestress2:Åhread_fork failed: %s\n",

449 
	`°ªº‹
(
îr
));

453 
i
=0; i<
NTHREADS
; i++) {

454 
	`P
(
thªad£m
);

457 i‡(
	`f°e°_ªad
(
fûesys
, "")) {

458 
	`k¥ötf
("*** Test failed\n");

462 i‡(
	`f°e°_ªmove
(
fûesys
, "")) {

463 
	`k¥ötf
("*** Test failed\n");

467 
	`k¥ötf
("*** fs write stressÅest 2 done\n");

468 
	}
}

474 
	$l⁄g°ªss_thªad
(*
fs
, 
num
)

476 c⁄° *
fûesys
 = 
fs
;

477 
i
;

478 
num°r
[16];

480 
i
=0; i<
NLONG
; i++) {

482 
	`¢¥ötf
(
num°r
, “um°r), "%lu-%d", 
num
, 
i
);

484 i‡(
	`f°e°_wrôe
(
fûesys
, 
num°r
, 1, 0)) {

485 
	`k¥ötf
("*** Thªad %lu: fûê%d: faûed\n", 
num
, 
i
);

486 
	`V
(
thªad£m
);

490 i‡(
	`f°e°_ªad
(
fûesys
, 
num°r
)) {

491 
	`k¥ötf
("*** Thªad %lu: fûê%d: faûed\n", 
num
, 
i
);

492 
	`V
(
thªad£m
);

496 i‡(
	`f°e°_ªmove
(
fûesys
, 
num°r
)) {

497 
	`k¥ötf
("*** Thªad %lu: fûê%d: faûed\n", 
num
, 
i
);

498 
	`V
(
thªad£m
);

504 
	`V
(
thªad£m
);

505 
	}
}

509 
	$dﬁ⁄g°ªss
(c⁄° *
fûesys
)

511 
i
, 
îr
;

513 
	`öô_thªad£m
();

515 
	`k¥ötf
("*** Sèπög f†l⁄g såes†ã° o¿%s:\n", 
fûesys
);

517 
i
=0; i<
NTHREADS
; i++) {

518 
îr
 = 
	`thªad_f‹k
("l⁄g°ªss", 
NULL
,

519 
l⁄g°ªss_thªad
, (*)
fûesys
, 
i
);

520 i‡(
îr
) {

521 
	`∑nic
("longstress:Åhread_fork failed %s\n",

522 
	`°ªº‹
(
îr
));

526 
i
=0; i<
NTHREADS
; i++) {

527 
	`P
(
thªad£m
);

530 
	`k¥ötf
("*** fsÜong stressÅest done\n");

531 
	}
}

537 
	$¸óã°ªss_thªad
(*
fs
, 
num
)

539 c⁄° *
fûesys
 = 
fs
;

540 
i
, 
îr
;

541 
«mesuffix
[16];

542 
«me
[32];

543 
buf
[32];

544 
vnode
 *
vn
;

545 
iovec
 
iov
;

546 
uio
 
ku
;

547 
size_t
 
byãs
;

548 
numwrôãn
 = 0, 
numªad
 = 0, 
numªmoved
 = 0;

550 
i
=0; i<
NCREATE
; i++) {

551 
	`¢¥ötf
(
«mesuffix
, “amesuffix), "%lu-%d", 
num
, 
i
);

552 
	`MAKENAME
();

555 
	`°r˝y
(
buf
, 
«me
);

556 
îr
 = 
	`vfs_›í
(
buf
, 
O_WRONLY
|
O_CREAT
|
O_TRUNC
, 0664, &
vn
);

557 i‡(
îr
) {

558 
	`k¥ötf
("CouldÇot open %s for write: %s\n",

559 
«me
, 
	`°ªº‹
(
îr
));

563 
	`°r˝y
(
buf
, 
SLOGAN
);

564 
	`rŸ©e
(
buf
, 
i
);

566 
	`uio_köô
(&
iov
, &
ku
, 
buf
, 
	`°æí
(
SLOGAN
), 0, 
UIO_WRITE
);

567 
îr
 = 
	`VOP_WRITE
(
vn
, &
ku
);

568 
	`vfs_˛o£
(
vn
);

569 i‡(
îr
) {

570 
	`k¥ötf
("%s: Wrôêîr‹: %s\n", 
«me
, 
	`°ªº‹
(
îr
));

573 i‡(
ku
.
uio_ªsid
 > 0) {

574 
	`k¥ötf
("%s: Short write: %lu bytesÜeft over\n",

575 
«me
, (Ë
ku
.
uio_ªsid
);

579 
byãs
 = 
ku
.
uio_off£t
;

580 i‡(
byãs
 !
	`°æí
(
SLOGAN
)) {

581 
	`k¥ötf
("%s: %lu bytes written,Éxpected %lu!\n",

582 
«me
, (Ë
byãs
,

583 (Ë
	`°æí
(
SLOGAN
));

586 
numwrôãn
++;

588 
	`k¥ötf
("Thªad %lu: %u fûe†wrôãn\n", 
num
, 
numwrôãn
);

590 
i
=0; i<
NCREATE
; i++) {

591 
	`¢¥ötf
(
«mesuffix
, “amesuffix), "%lu-%d", 
num
, 
i
);

592 
	`MAKENAME
();

595 
	`°r˝y
(
buf
, 
«me
);

596 
îr
 = 
	`vfs_›í
(
buf
, 
O_RDONLY
, 0664, &
vn
);

597 i‡(
îr
) {

598 
	`k¥ötf
("CouldÇot open %s forÑead: %s\n",

599 
«me
, 
	`°ªº‹
(
îr
));

603 
	`uio_köô
(&
iov
, &
ku
, 
buf
, 
	`°æí
(
SLOGAN
), 0, 
UIO_READ
);

604 
îr
 = 
	`VOP_READ
(
vn
, &
ku
);

605 
	`vfs_˛o£
(
vn
);

606 i‡(
îr
) {

607 
	`k¥ötf
("%s: RódÉº‹: %s\n", 
«me
, 
	`°ªº‹
(
îr
));

610 i‡(
ku
.
uio_ªsid
 > 0) {

611 
	`k¥ötf
("%s: ShortÑead: %lu bytesÜeft over\n",

612 
«me
, (Ë
ku
.
uio_ªsid
);

616 
buf
[
	`°æí
(
SLOGAN
)] = 0;

617 
	`rŸ©e
(
buf
, -
i
);

619 i‡(
	`°rcmp
(
buf
, 
SLOGAN
)) {

620 
	`k¥ötf
("%s: Test failed: file mismatched: %s\n",

621 
«me
, 
buf
);

625 
byãs
 = 
ku
.
uio_off£t
;

626 i‡(
byãs
 !
	`°æí
(
SLOGAN
)) {

627 
	`k¥ötf
("%s: %lu bytesÑead,Éxpected %lu!\n",

628 
«me
, (Ë
byãs
,

629 (Ë
	`°æí
(
SLOGAN
));

633 
numªad
++;

635 
	`k¥ötf
("Thªad %lu: %u fûe†ªad\n", 
num
, 
numªad
);

637 
i
=0; i<
NCREATE
; i++) {

638 
	`¢¥ötf
(
«mesuffix
, “amesuffix), "%lu-%d", 
num
, 
i
);

639 i‡(
	`f°e°_ªmove
(
fûesys
, 
«mesuffix
)) {

642 
numªmoved
++;

644 
	`k¥ötf
("Thªad %lu: %u fûe†ªmoved\n", 
num
, 
numªmoved
);

646 
	`V
(
thªad£m
);

647 
	}
}

651 
	$do¸óã°ªss
(c⁄° *
fûesys
)

653 
i
, 
îr
;

655 
	`öô_thªad£m
();

657 
	`k¥ötf
("*** Sèπög f†¸óã såes†ã° o¿%s:\n", 
fûesys
);

659 
i
=0; i<
NTHREADS
; i++) {

660 
îr
 = 
	`thªad_f‹k
("¸óã°ªss", 
NULL
,

661 
¸óã°ªss_thªad
, (*)
fûesys
, 
i
);

662 i‡(
îr
) {

663 
	`∑nic
("createstress:Åhread_fork failed %s\n",

664 
	`°ªº‹
(
îr
));

668 
i
=0; i<
NTHREADS
; i++) {

669 
	`P
(
thªad£m
);

672 
	`k¥ötf
("*** fs create stressÅest done\n");

673 
	}
}

679 
	$checkfûesy°em
(
«rgs
, **
¨gs
)

681 *
devi˚
;

683 i‡(
«rgs
 != 2) {

684 
	`k¥ötf
("Usage: fs[12345] filesystem:\n");

685  
EINVAL
;

688 
devi˚
 = 
¨gs
[1];

691 i‡(
devi˚
[
	`°æí
(device)-1]==':') {

692 
devi˚
[
	`°æí
(device)-1] = 0;

696 
	}
}

698 
	#DEFTEST
(
ã°«me
) \

700 
	`ã°«me
(
«rgs
, **
¨gs
) \

702 
ªsu…
; \

703 
ªsu…
 = 
	`checkfûesy°em
(
«rgs
, 
¨gs
); \

704 i‡(
ªsu…
) { \

705  
ªsu…
; \

707 do##
	`ã°«me
(
¨gs
[1]); \

709 }

	)

711 
DEFTEST
(
f°e°
);

712 
DEFTEST
(
ªad°ªss
);

713 
DEFTEST
(
wrôe°ªss
);

714 
DEFTEST
(
wrôe°ªss2
);

715 
DEFTEST
(
l⁄g°ªss
);

716 
DEFTEST
(
¸óã°ªss
);

721 
	$¥ötfûe
(
«rgs
, **
¨gs
)

723 
vnode
 *
rv
, *
wv
;

724 
iovec
 
iov
;

725 
uio
 
ku
;

726 
off_t
 
Ωos
=0, 
wpos
=0;

727 
buf
[128];

728 
outfûe
[16];

729 
ªsu…
;

730 
d⁄e
=0;

732 i‡(
«rgs
 != 2) {

733 
	`k¥ötf
("Usage:Öf filename\n");

734  
EINVAL
;

738 
	`°r˝y
(
outfûe
, "con:");

740 
ªsu…
 = 
	`vfs_›í
(
¨gs
[1], 
O_RDONLY
, 0664, &
rv
);

741 i‡(
ªsu…
) {

742 
	`k¥ötf
("¥ötfûe: %s\n", 
	`°ªº‹
(
ªsu…
));

743  
ªsu…
;

746 
ªsu…
 = 
	`vfs_›í
(
outfûe
, 
O_WRONLY
, 0664, &
wv
);

747 i‡(
ªsu…
) {

748 
	`k¥ötf
("¥ötfûe: ouçut: %s\n", 
	`°ªº‹
(
ªsu…
));

749 
	`vfs_˛o£
(
rv
);

750  
ªsu…
;

753 !
d⁄e
) {

754 
	`uio_köô
(&
iov
, &
ku
, 
buf
, (buf), 
Ωos
, 
UIO_READ
);

755 
ªsu…
 = 
	`VOP_READ
(
rv
, &
ku
);

756 i‡(
ªsu…
) {

757 
	`k¥ötf
("RódÉº‹: %s\n", 
	`°ªº‹
(
ªsu…
));

760 
Ωos
 = 
ku
.
uio_off£t
;

762 i‡(
ku
.
uio_ªsid
 > 0) {

763 
d⁄e
 = 1;

766 
	`uio_köô
(&
iov
, &
ku
, 
buf
, (buf)-ku.
uio_ªsid
, 
wpos
,

767 
UIO_WRITE
);

768 
ªsu…
 = 
	`VOP_WRITE
(
wv
, &
ku
);

769 i‡(
ªsu…
) {

770 
	`k¥ötf
("Wrôêîr‹: %s\n", 
	`°ªº‹
(
ªsu…
));

773 
wpos
 = 
ku
.
uio_off£t
;

775 i‡(
ku
.
uio_ªsid
 > 0) {

776 
	`k¥ötf
("Warning: short write\n");

780 
	`vfs_˛o£
(
wv
);

781 
	`vfs_˛o£
(
rv
);

784 
	}
}

	@test/kmalloctest.c

33 
	~<ty≥s.h
>

34 
	~<kîn/î∫o.h
>

35 
	~<lib.h
>

36 
	~<thªad.h
>

37 
	~<synch.h
>

38 
	~<vm.h
>

39 
	~<ã°.h
>

41 
	~"›t-dumbvm.h
"

57 
	#NTRIES
 1200

	)

58 
	#ITEMSIZE
 997

	)

59 
	#NTHREADS
 8

	)

63 
	$kmÆlo˘hªad
(*
sm
, 
num
)

65 
£m≠h‹e
 *
£m
 = 
sm
;

66 *
±r
;

67 *
ﬁd±r
=
NULL
;

68 *
ﬁd±r2
=
NULL
;

69 
i
;

71 
i
=0; i<
NTRIES
; i++) {

72 
±r
 = 
	`kmÆloc
(
ITEMSIZE
);

73 i‡(
±r
==
NULL
) {

74 i‡(
£m
) {

75 
	`k¥ötf
("thread %lu: kmallocÑeturned NULL\n",

76 
num
);

77 
	`V
(
£m
);

80 
	`k¥ötf
("kmallocÑeturnedÇull;Åest failed.\n");

83 i‡(
ﬁd±r2
) {

84 
	`k‰ì
(
ﬁd±r2
);

86 
ﬁd±r2
 = 
ﬁd±r
;

87 
ﬁd±r
 = 
±r
;

89 i‡(
ﬁd±r2
) {

90 
	`k‰ì
(
ﬁd±r2
);

92 i‡(
ﬁd±r
) {

93 
	`k‰ì
(
ﬁd±r
);

95 i‡(
£m
) {

96 
	`V
(
£m
);

98 
	}
}

101 
	$kmÆlo˘e°
(
«rgs
, **
¨gs
)

103 ()
«rgs
;

104 ()
¨gs
;

106 
	`k¥ötf
("Starting kmallocÅest...\n");

107 
	`kmÆlo˘hªad
(
NULL
, 0);

108 
	`k¥ötf
("kmallocÅest done\n");

111 
	}
}

114 
	$kmÆloc°ªss
(
«rgs
, **
¨gs
)

116 
£m≠h‹e
 *
£m
;

117 
i
, 
ªsu…
;

119 ()
«rgs
;

120 ()
¨gs
;

122 
£m
 = 
	`£m_¸óã
("kmallocstress", 0);

123 i‡(
£m
 =
NULL
) {

124 
	`∑nic
("kmallocstress: sem_create failed\n");

127 
	`k¥ötf
("Starting kmalloc stressÅest...\n");

129 
i
=0; i<
NTHREADS
; i++) {

130 
ªsu…
 = 
	`thªad_f‹k
("kmÆloc°ªss", 
NULL
,

131 
kmÆlo˘hªad
, 
£m
, 
i
);

132 i‡(
ªsu…
) {

133 
	`∑nic
("kmallocstress:Åhread_fork failed: %s\n",

134 
	`°ªº‹
(
ªsu…
));

138 
i
=0; i<
NTHREADS
; i++) {

139 
	`P
(
£m
);

142 
	`£m_de°roy
(
£m
);

143 
	`k¥ötf
("kmalloc stressÅest done\n");

146 
	}
}

173 
	$kmÆlo˘e°3
(
«rgs
, **
¨gs
)

175 
	#NUM_KM3_SIZES
 5

	)

176 c⁄° 
sizes
[
NUM_KM3_SIZES
] = { 32, 41, 109, 86, 9 };

177 
num±rs
;

178 
size_t
 
±r•a˚
;

179 
size_t
 
blocksize
;

180 
num±rblocks
;

181 ***
±rblocks
;

182 
curblock
, 
cuΩos
, 
cursizeödex
, 
cursize
;

183 
size_t
 
tŸÆsize
;

184 
i
, 
j
;

185 *
±r
;

187 i‡(
«rgs
 != 2) {

188 
	`k¥ötf
("kmalloctest3: usage: km3Çumobjects\n");

189  
EINVAL
;

193 
num±rs
 = 
	`©oi
(
¨gs
[1]);

194 
±r•a˚
 = 
num±rs
 * (*);

197 
blocksize
 = 
PAGE_SIZE
 / 4;

198 
num±rblocks
 = 
	`DIVROUNDUP
(
±r•a˚
, 
blocksize
);

200 
	`k¥ötf
("kmalloctest3: %u objects, %uÖointer blocks\n",

201 
num±rs
, 
num±rblocks
);

204 
±rblocks
 = 
	`kmÆloc
(
num±rblocks
 * (ptrblocks[0]));

205 i‡(
±rblocks
 =
NULL
) {

206 
	`∑nic
("kmalloctest3: failed onÖointer blockárray\n");

209 
i
=0; i<
num±rblocks
; i++) {

210 
±rblocks
[
i
] = 
	`kmÆloc
(
blocksize
);

211 i‡(
±rblocks
[
i
] =
NULL
) {

212 
	`∑nic
("kmÆlo˘e°3: faûed o¿poöã∏block %u\n", 
i
);

217 
curblock
 = 0;

218 
cuΩos
 = 0;

219 
cursizeödex
 = 0;

220 
tŸÆsize
 = 0;

221 
i
=0; i<
num±rs
; i++) {

222 
cursize
 = 
sizes
[
cursizeödex
];

223 
±r
 = 
	`kmÆloc
(
cursize
);

224 i‡(
±r
 =
NULL
) {

225 
	`k¥ötf
("kmalloctest3: failed on object %u size %u\n",

226 
i
, 
cursize
);

227 
	`k¥ötf
("kmalloctest3:Öos %u inÖointer block %u\n",

228 
cuΩos
, 
curblock
);

229 
	`k¥ötf
("kmÆlo˘e°3:ÅŸÆ sÿÁ∏%zu\n", 
tŸÆsize
);

230 
	`∑nic
("kmalloctest3: failed.\n");

233 
j
=0; j<
cursize
; j++) {

234 
±r
[
j
] = (Ë
i
;

237 
±rblocks
[
curblock
][
cuΩos
] = 
±r
;

238 
cuΩos
++;

239 i‡(
cuΩos
 >
blocksize
 / (*)) {

240 
curblock
++;

241 
cuΩos
 = 0;

244 
tŸÆsize
 +
cursize
;

245 
cursizeödex
 = (cursizeödex + 1Ë% 
NUM_KM3_SIZES
;

248 
	`k¥ötf
("kmÆlo˘e°3: %zu byã†Æloˇãd\n", 
tŸÆsize
);

251 
curblock
 = 0;

252 
cuΩos
 = 0;

253 
cursizeödex
 = 0;

254 
i
=0; i<
num±rs
; i++) {

255 
cursize
 = 
sizes
[
cursizeödex
];

256 
±r
 = 
±rblocks
[
curblock
][
cuΩos
];

257 
	`KASSERT
(
±r
 !
NULL
);

258 
j
=0; j<
cursize
; j++) {

259 i‡(
±r
[
j
] =(Ë
i
) {

262 
	`k¥ötf
("kmalloctest3: failed on object %u size %u\n",

263 
i
, 
cursize
);

264 
	`k¥ötf
("kmalloctest3:Öos %u inÖointer block %u\n",

265 
cuΩos
, 
curblock
);

266 
	`k¥ötf
("kmÆlo˘e°3:áàobje˘ off£à%u\n", 
j
);

267 
	`k¥ötf
("kmalloctest3:Éxpected 0x%x, found 0x%x\n",

268 
±r
[
j
], (Ë
i
);

269 
	`∑nic
("kmalloctest3: failed.\n");

271 
	`k‰ì
(
±r
);

272 
cuΩos
++;

273 i‡(
cuΩos
 >
blocksize
 / (*)) {

274 
curblock
++;

275 
cuΩos
 = 0;

277 
	`KASSERT
(
tŸÆsize
 > 0);

278 
tŸÆsize
 -
cursize
;

279 
cursizeödex
 = (cursizeödex + 1Ë% 
NUM_KM3_SIZES
;

281 
	`KASSERT
(
tŸÆsize
 == 0);

284 
i
=0; i<
num±rblocks
; i++) {

285 
	`KASSERT
(
±rblocks
[
i
] !
NULL
);

286 
	`k‰ì
(
±rblocks
[
i
]);

289 
	`k‰ì
(
±rblocks
);

291 
	`k¥ötf
("kmalloctest3:Öassed\n");

293 
	}
}

300 
	$kmÆlo˘e°4thªad
(*
sm
, 
num
)

302 
	#NUM_KM4_SIZES
 5

	)

303 c⁄° 
sizes
[
NUM_KM4_SIZES
] = { 1, 3, 5, 2, 4 };

305 
£m≠h‹e
 *
£m
 = 
sm
;

306 *
±rs
[
NUM_KM4_SIZES
];

307 
p
, 
q
;

308 
i
;

310 
i
=0; i<
NUM_KM4_SIZES
; i++) {

311 
±rs
[
i
] = 
NULL
;

313 
p
 = 0;

314 
q
 = 
NUM_KM4_SIZES
 / 2;

316 
i
=0; i<
NTRIES
; i++) {

317 i‡(
±rs
[
q
] !
NULL
) {

318 
	`k‰ì
(
±rs
[
q
]);

319 
±rs
[
q
] = 
NULL
;

321 
±rs
[
p
] = 
	`kmÆloc
(
sizes
[p] * 
PAGE_SIZE
);

322 i‡(
±rs
[
p
] =
NULL
) {

323 
	`∑nic
("kmalloctest4:Åhread %lu: "

325 
num
, 
sizes
[
p
]);

327 
p
 = (∞+ 1Ë% 
NUM_KM4_SIZES
;

328 
q
 = (q + 1Ë% 
NUM_KM4_SIZES
;

331 
i
=0; i<
NUM_KM4_SIZES
; i++) {

332 i‡(
±rs
[
i
] !
NULL
) {

333 
	`k‰ì
(
±rs
[
i
]);

337 
	`V
(
£m
);

338 
	}
}

341 
	$kmÆlo˘e°4
(
«rgs
, **
¨gs
)

343 
£m≠h‹e
 *
£m
;

344 
¡hªads
;

345 
i
;

346 
ªsu…
;

348 ()
«rgs
;

349 ()
¨gs
;

351 
	`k¥ötf
("Starting multipage kmallocÅest...\n");

352 #i‡
OPT_DUMBVM


353 
	`k¥ötf
("(ThisÅest willÇot work with dumbvm)\n");

356 
£m
 = 
	`£m_¸óã
("kmalloctest4", 0);

357 i‡(
£m
 =
NULL
) {

358 
	`∑nic
("kmalloctest4: sem_create failed\n");

362 
¡hªads
 = (3*
NTHREADS
)/4;

364 
i
=0; i<
¡hªads
; i++) {

365 
ªsu…
 = 
	`thªad_f‹k
("kmÆlo˘e°4", 
NULL
,

366 
kmÆlo˘e°4thªad
, 
£m
, 
i
);

367 i‡(
ªsu…
) {

368 
	`∑nic
("kmallocstress:Åhread_fork failed: %s\n",

369 
	`°ªº‹
(
ªsu…
));

373 
i
=0; i<
¡hªads
; i++) {

374 
	`P
(
£m
);

377 
	`£m_de°roy
(
£m
);

378 
	`k¥ötf
("Multipage kmallocÅest done\n");

380 
	}
}

	@test/malloctest.c

33 
	~<ty≥s.h
>

34 
	~<kîn/î∫o.h
>

35 
	~<lib.h
>

36 
	~<thªad.h
>

37 
	~<synch.h
>

38 
	~<vm.h
>

39 
	~<ã°.h
>

41 
	~"›t-dumbvm.h
"

57 
	#NTRIES
 1200

	)

58 
	#ITEMSIZE
 997

	)

59 
	#NTHREADS
 8

	)

63 
	$mÆlo˘hªad
(*
sm
, 
num
)

65 
£m≠h‹e
 *
£m
 = 
sm
;

66 *
±r
;

67 *
ﬁd±r
=
NULL
;

68 *
ﬁd±r2
=
NULL
;

69 
i
;

71 
i
=0; i<
NTRIES
; i++) {

72 
±r
 = 
	`kmÆloc
(
ITEMSIZE
);

73 i‡(
±r
==
NULL
) {

74 i‡(
£m
) {

75 
	`k¥ötf
("thread %lu: kmallocÑeturned NULL\n",

76 
num
);

77 
	`V
(
£m
);

80 
	`k¥ötf
("kmallocÑeturnedÇull;Åest failed.\n");

83 i‡(
ﬁd±r2
) {

84 
	`k‰ì
(
ﬁd±r2
);

86 
ﬁd±r2
 = 
ﬁd±r
;

87 
ﬁd±r
 = 
±r
;

89 i‡(
ﬁd±r2
) {

90 
	`k‰ì
(
ﬁd±r2
);

92 i‡(
ﬁd±r
) {

93 
	`k‰ì
(
ﬁd±r
);

95 i‡(
£m
) {

96 
	`V
(
£m
);

98 
	}
}

101 
	$mÆlo˘e°
(
«rgs
, **
¨gs
)

103 ()
«rgs
;

104 ()
¨gs
;

106 
	`k¥ötf
("Starting kmallocÅest...\n");

107 
	`mÆlo˘hªad
(
NULL
, 0);

108 
	`k¥ötf
("kmallocÅest done\n");

111 
	}
}

114 
	$mÆloc°ªss
(
«rgs
, **
¨gs
)

116 
£m≠h‹e
 *
£m
;

117 
i
, 
ªsu…
;

119 ()
«rgs
;

120 ()
¨gs
;

122 
£m
 = 
	`£m_¸óã
("mallocstress", 0);

123 i‡(
£m
 =
NULL
) {

124 
	`∑nic
("mallocstress: sem_create failed\n");

127 
	`k¥ötf
("Starting kmalloc stressÅest...\n");

129 
i
=0; i<
NTHREADS
; i++) {

130 
ªsu…
 = 
	`thªad_f‹k
("mÆloc°ªss", 
NULL
,

131 
mÆlo˘hªad
, 
£m
, 
i
);

132 i‡(
ªsu…
) {

133 
	`∑nic
("mallocstress:Åhread_fork failed: %s\n",

134 
	`°ªº‹
(
ªsu…
));

138 
i
=0; i<
NTHREADS
; i++) {

139 
	`P
(
£m
);

142 
	`£m_de°roy
(
£m
);

143 
	`k¥ötf
("kmalloc stressÅest done\n");

146 
	}
}

173 
	$mÆlo˘e°3
(
«rgs
, **
¨gs
)

175 
	#NUM_KM3_SIZES
 5

	)

176 c⁄° 
sizes
[
NUM_KM3_SIZES
] = { 32, 41, 109, 86, 9 };

177 
num±rs
;

178 
size_t
 
±r•a˚
;

179 
size_t
 
blocksize
;

180 
num±rblocks
;

181 ***
±rblocks
;

182 
curblock
, 
cuΩos
, 
cursizeödex
, 
cursize
;

183 
size_t
 
tŸÆsize
;

184 
i
, 
j
;

185 *
±r
;

187 i‡(
«rgs
 != 2) {

188 
	`k¥ötf
("malloctest3: usage: malloctest3Çumobjects\n");

189  
EINVAL
;

193 
num±rs
 = 
	`©oi
(
¨gs
[1]);

194 
±r•a˚
 = 
num±rs
 * (*);

197 
blocksize
 = 
PAGE_SIZE
 / 4;

198 
num±rblocks
 = 
	`DIVROUNDUP
(
±r•a˚
, 
blocksize
);

200 
	`k¥ötf
("malloctest3: %u objects, %uÖointer blocks\n",

201 
num±rs
, 
num±rblocks
);

204 
±rblocks
 = 
	`kmÆloc
(
num±rblocks
 * (ptrblocks[0]));

205 i‡(
±rblocks
 =
NULL
) {

206 
	`∑nic
("malloctest3: failed onÖointer blockárray\n");

209 
i
=0; i<
num±rblocks
; i++) {

210 
±rblocks
[
i
] = 
	`kmÆloc
(
blocksize
);

211 i‡(
±rblocks
[
i
] =
NULL
) {

212 
	`∑nic
("mÆlo˘e°3: faûed o¿poöã∏block %u\n", 
i
);

217 
curblock
 = 0;

218 
cuΩos
 = 0;

219 
cursizeödex
 = 0;

220 
tŸÆsize
 = 0;

221 
i
=0; i<
num±rs
; i++) {

222 
cursize
 = 
sizes
[
cursizeödex
];

223 
±r
 = 
	`kmÆloc
(
cursize
);

224 i‡(
±r
 =
NULL
) {

225 
	`k¥ötf
("malloctest3: failed on object %u size %u\n",

226 
i
, 
cursize
);

227 
	`k¥ötf
("malloctest3:Öos %u inÖointer block %u\n",

228 
cuΩos
, 
curblock
);

229 
	`k¥ötf
("mÆlo˘e°3:ÅŸÆ sÿÁ∏%zu\n", 
tŸÆsize
);

230 
	`∑nic
("malloctest3: failed.\n");

233 
j
=0; j<
cursize
; j++) {

234 
±r
[
j
] = (Ë
i
;

237 
±rblocks
[
curblock
][
cuΩos
] = 
±r
;

238 
cuΩos
++;

239 i‡(
cuΩos
 >
blocksize
 / (*)) {

240 
curblock
++;

241 
cuΩos
 = 0;

244 
tŸÆsize
 +
cursize
;

245 
cursizeödex
 = (cursizeödex + 1Ë% 
NUM_KM3_SIZES
;

248 
	`k¥ötf
("mÆlo˘e°3: %zu byã†Æloˇãd\n", 
tŸÆsize
);

251 
curblock
 = 0;

252 
cuΩos
 = 0;

253 
cursizeödex
 = 0;

254 
i
=0; i<
num±rs
; i++) {

255 
cursize
 = 
sizes
[
cursizeödex
];

256 
±r
 = 
±rblocks
[
curblock
][
cuΩos
];

257 
	`KASSERT
(
±r
 !
NULL
);

258 
j
=0; j<
cursize
; j++) {

259 i‡(
±r
[
j
] =(Ë
i
) {

262 
	`k¥ötf
("malloctest3: failed on object %u size %u\n",

263 
i
, 
cursize
);

264 
	`k¥ötf
("malloctest3:Öos %u inÖointer block %u\n",

265 
cuΩos
, 
curblock
);

266 
	`k¥ötf
("mÆlo˘e°3:áàobje˘ off£à%u\n", 
j
);

267 
	`k¥ötf
("malloctest3:Éxpected 0x%x, found 0x%x\n",

268 
±r
[
j
], (Ë
i
);

269 
	`∑nic
("malloctest3: failed.\n");

271 
	`k‰ì
(
±r
);

272 
cuΩos
++;

273 i‡(
cuΩos
 >
blocksize
 / (*)) {

274 
curblock
++;

275 
cuΩos
 = 0;

277 
	`KASSERT
(
tŸÆsize
 > 0);

278 
tŸÆsize
 -
cursize
;

279 
cursizeödex
 = (cursizeödex + 1Ë% 
NUM_KM3_SIZES
;

281 
	`KASSERT
(
tŸÆsize
 == 0);

284 
i
=0; i<
num±rblocks
; i++) {

285 
	`KASSERT
(
±rblocks
[
i
] !
NULL
);

286 
	`k‰ì
(
±rblocks
[
i
]);

289 
	`k‰ì
(
±rblocks
);

291 
	`k¥ötf
("malloctest3:Öassed\n");

293 
	}
}

300 
	$mÆlo˘e°4thªad
(*
sm
, 
num
)

302 
	#NUM_KM4_SIZES
 5

	)

303 c⁄° 
sizes
[
NUM_KM4_SIZES
] = { 1, 3, 5, 2, 4 };

305 
£m≠h‹e
 *
£m
 = 
sm
;

306 *
±rs
[
NUM_KM4_SIZES
];

307 
p
, 
q
;

308 
i
;

310 
i
=0; i<
NUM_KM4_SIZES
; i++) {

311 
±rs
[
i
] = 
NULL
;

313 
p
 = 0;

314 
q
 = 
NUM_KM4_SIZES
 / 2;

316 
i
=0; i<
NTRIES
; i++) {

317 i‡(
±rs
[
q
] !
NULL
) {

318 
	`k‰ì
(
±rs
[
q
]);

319 
±rs
[
q
] = 
NULL
;

321 
±rs
[
p
] = 
	`kmÆloc
(
sizes
[p] * 
PAGE_SIZE
);

322 i‡(
±rs
[
p
] =
NULL
) {

323 
	`∑nic
("malloctest4:Åhread %lu: "

325 
num
, 
sizes
[
p
]);

327 
p
 = (∞+ 1Ë% 
NUM_KM4_SIZES
;

328 
q
 = (q + 1Ë% 
NUM_KM4_SIZES
;

331 
i
=0; i<
NUM_KM4_SIZES
; i++) {

332 i‡(
±rs
[
i
] !
NULL
) {

333 
	`k‰ì
(
±rs
[
i
]);

337 
	`V
(
£m
);

338 
	}
}

341 
	$mÆlo˘e°4
(
«rgs
, **
¨gs
)

343 
£m≠h‹e
 *
£m
;

344 
¡hªads
;

345 
i
;

346 
ªsu…
;

348 ()
«rgs
;

349 ()
¨gs
;

351 
	`k¥ötf
("Starting multipage kmallocÅest...\n");

352 #i‡
OPT_DUMBVM


353 
	`k¥ötf
("(ThisÅest willÇot work with dumbvm)\n");

356 
£m
 = 
	`£m_¸óã
("malloctest4", 0);

357 i‡(
£m
 =
NULL
) {

358 
	`∑nic
("malloctest4: sem_create failed\n");

362 
¡hªads
 = (3*
NTHREADS
)/4;

364 
i
=0; i<
¡hªads
; i++) {

365 
ªsu…
 = 
	`thªad_f‹k
("mÆlo˘e°4", 
NULL
,

366 
mÆlo˘e°4thªad
, 
£m
, 
i
);

367 i‡(
ªsu…
) {

368 
	`∑nic
("mallocstress:Åhread_fork failed: %s\n",

369 
	`°ªº‹
(
ªsu…
));

373 
i
=0; i<
¡hªads
; i++) {

374 
	`P
(
£m
);

377 
	`£m_de°roy
(
£m
);

378 
	`k¥ötf
("Multipage kmallocÅest done\n");

380 
	}
}

	@test/nettest.c

33 
	~<ty≥s.h
>

34 
	~<lib.h
>

35 
	~<ã°.h
>

38 
	$√âe°
(
«rgs
, **
¨gs
)

40 ()
«rgs
;

41 ()
¨gs
;

42 
	`k¥ötf
("NoÇetwork supportávailable\n");

44 
	}
}

	@test/synchtest.c

34 
	~<ty≥s.h
>

35 
	~<lib.h
>

36 
	~<˛ock.h
>

37 
	~<thªad.h
>

38 
	~<synch.h
>

39 
	~<ã°.h
>

41 
	#NSEMLOOPS
 63

	)

42 
	#NLOCKLOOPS
 120

	)

43 
	#NCVLOOPS
 5

	)

44 
	#NTHREADS
 32

	)

46 vﬁ©ûê
	gã°vÆ1
;

47 vﬁ©ûê
	gã°vÆ2
;

48 vﬁ©ûê
	gã°vÆ3
;

49 
£m≠h‹e
 *
	gã°£m
;

50 
lock
 *
	gã°lock
;

51 
cv
 *
	gã°cv
;

52 
£m≠h‹e
 *
	gd⁄e£m
;

56 
	$öôôems
()

58 i‡(
ã°£m
==
NULL
) {

59 
ã°£m
 = 
	`£m_¸óã
("testsem", 2);

60 i‡(
ã°£m
 =
NULL
) {

61 
	`∑nic
("synchtest: sem_create failed\n");

64 i‡(
ã°lock
==
NULL
) {

65 
ã°lock
 = 
	`lock_¸óã
("testlock");

66 i‡(
ã°lock
 =
NULL
) {

67 
	`∑nic
("synchtest:Üock_create failed\n");

70 i‡(
ã°cv
==
NULL
) {

71 
ã°cv
 = 
	`cv_¸óã
("testlock");

72 i‡(
ã°cv
 =
NULL
) {

73 
	`∑nic
("synchtest: cv_create failed\n");

76 i‡(
d⁄e£m
==
NULL
) {

77 
d⁄e£m
 = 
	`£m_¸óã
("donesem", 0);

78 i‡(
d⁄e£m
 =
NULL
) {

79 
	`∑nic
("synchtest: sem_create failed\n");

82 
	}
}

86 
	$£mã°thªad
(*
junk
, 
num
)

88 
i
;

89 ()
junk
;

94 
	`P
(
ã°£m
);

95 
	`k¥ötf
("Thªad %2lu: ", 
num
);

96 
i
=0; i<
NSEMLOOPS
; i++) {

97 
	`k¥ötf
("%c", ()
num
+64);

99 
	`k¥ötf
("\n");

100 
	`V
(
d⁄e£m
);

101 
	}
}

104 
	$£mã°
(
«rgs
, **
¨gs
)

106 
i
, 
ªsu…
;

108 ()
«rgs
;

109 ()
¨gs
;

111 
	`öôôems
();

112 
	`k¥ötf
("Starting semaphoreÅest...\n");

113 
	`k¥ötf
("IfÅhis hangs, it's broken: ");

114 
	`P
(
ã°£m
);

115 
	`P
(
ã°£m
);

116 
	`k¥ötf
("ok\n");

118 
i
=0; i<
NTHREADS
; i++) {

119 
ªsu…
 = 
	`thªad_f‹k
("£mã°", 
NULL
, 
£mã°thªad
, NULL, 
i
);

120 i‡(
ªsu…
) {

121 
	`∑nic
("semtest:Åhread_fork failed: %s\n",

122 
	`°ªº‹
(
ªsu…
));

126 
i
=0; i<
NTHREADS
; i++) {

127 
	`V
(
ã°£m
);

128 
	`P
(
d⁄e£m
);

132 
	`V
(
ã°£m
);

133 
	`V
(
ã°£m
);

135 
	`k¥ötf
("SemaphoreÅest done.\n");

137 
	}
}

141 
	$Áû
(
num
, c⁄° *
msg
)

143 
	`k¥ötf
("thªad %lu: Mism©ch o¿%s\n", 
num
, 
msg
);

144 
	`k¥ötf
("Test failed\n");

146 
	`lock_ªÀa£
(
ã°lock
);

148 
	`V
(
d⁄e£m
);

149 
	`thªad_exô
();

150 
	}
}

154 
	$lockã°thªad
(*
junk
, 
num
)

156 
i
;

157 ()
junk
;

159 
i
=0; i<
NLOCKLOOPS
; i++) {

160 
	`lock_acquúe
(
ã°lock
);

161 
ã°vÆ1
 = 
num
;

162 
ã°vÆ2
 = 
num
*num;

163 
ã°vÆ3
 = 
num
%3;

165 i‡(
ã°vÆ2
 !
ã°vÆ1
*testval1) {

166 
	`Áû
(
num
, "testval2/testval1");

169 i‡(
ã°vÆ2
%3 !(
ã°vÆ3
*testval3)%3) {

170 
	`Áû
(
num
, "testval2/testval3");

173 i‡(
ã°vÆ3
 !
ã°vÆ1
%3) {

174 
	`Áû
(
num
, "testval3/testval1");

177 i‡(
ã°vÆ1
 !
num
) {

178 
	`Áû
(
num
, "testval1/num");

181 i‡(
ã°vÆ2
 !
num
*num) {

182 
	`Áû
(
num
, "testval2/num");

185 i‡(
ã°vÆ3
 !
num
%3) {

186 
	`Áû
(
num
, "testval3/num");

189 
	`lock_ªÀa£
(
ã°lock
);

191 
	`V
(
d⁄e£m
);

192 
	}
}

196 
	$lockã°
(
«rgs
, **
¨gs
)

198 
i
, 
ªsu…
;

200 ()
«rgs
;

201 ()
¨gs
;

203 
	`öôôems
();

204 
	`k¥ötf
("StartingÜockÅest...\n");

206 
i
=0; i<
NTHREADS
; i++) {

207 
ªsu…
 = 
	`thªad_f‹k
("synchã°", 
NULL
, 
lockã°thªad
,

208 
NULL
, 
i
);

209 i‡(
ªsu…
) {

210 
	`∑nic
("locktest:Åhread_fork failed: %s\n",

211 
	`°ªº‹
(
ªsu…
));

214 
i
=0; i<
NTHREADS
; i++) {

215 
	`P
(
d⁄e£m
);

218 
	`k¥ötf
("LockÅest done.\n");

221 
	}
}

225 
	$cvã°thªad
(*
junk
, 
num
)

227 
i
;

228 vﬁ©ûê
j
;

229 
time•ec
 
ts1
, 
ts2
;

231 ()
junk
;

233 
i
=0; i<
NCVLOOPS
; i++) {

234 
	`lock_acquúe
(
ã°lock
);

235 
ã°vÆ1
 !
num
) {

236 
	`gëtime
(&
ts1
);

237 
	`cv_waô
(
ã°cv
, 
ã°lock
);

238 
	`gëtime
(&
ts2
);

241 
	`time•ec_sub
(&
ts2
, &
ts1
, &ts2);

244 i‡(
ts2
.
tv_£c
 =0 &&Ås2.
tv_n£c
 < 40*2000) {

245 
	`k¥ötf
("cv_waitÅook only %uÇs\n",

246 
ts2
.
tv_n£c
);

247 
	`k¥ötf
("That'sÅoo fast... you must be "

249 
	`V
(
d⁄e£m
);

250 
	`thªad_exô
();

254 
	`k¥ötf
("Thªad %lu\n", 
num
);

255 
ã°vÆ1
 = (ã°vÆ1 + 
NTHREADS
 - 1)%NTHREADS;

261 
j
=0; j<3000; j++);

263 
	`cv_brﬂdˇ°
(
ã°cv
, 
ã°lock
);

264 
	`lock_ªÀa£
(
ã°lock
);

266 
	`V
(
d⁄e£m
);

267 
	}
}

270 
	$cvã°
(
«rgs
, **
¨gs
)

273 
i
, 
ªsu…
;

275 ()
«rgs
;

276 ()
¨gs
;

278 
	`öôôems
();

279 
	`k¥ötf
("Starting CVÅest...\n");

280 
	`k¥ötf
("Threads shouldÖrint out inÑeverse order.\n");

282 
ã°vÆ1
 = 
NTHREADS
-1;

284 
i
=0; i<
NTHREADS
; i++) {

285 
ªsu…
 = 
	`thªad_f‹k
("synchã°", 
NULL
, 
cvã°thªad
, NULL, 
i
);

286 i‡(
ªsu…
) {

287 
	`∑nic
("cvtest:Åhread_fork failed: %s\n",

288 
	`°ªº‹
(
ªsu…
));

291 
i
=0; i<
NTHREADS
; i++) {

292 
	`P
(
d⁄e£m
);

295 
	`k¥ötf
("CVÅest done\n");

298 
	}
}

310 
	#NCVS
 250

	)

311 
	#NLOOPS
 40

	)

312 
cv
 *
	gã°cvs
[
NCVS
];

313 
lock
 *
	gã°locks
[
NCVS
];

314 
£m≠h‹e
 *
	gg©e£m
;

315 
£m≠h‹e
 *
	gexô£m
;

319 
	$¶ì±hªad
(*
junk1
, 
junk2
)

321 
i
, 
j
;

323 ()
junk1
;

324 ()
junk2
;

326 
j
=0; j<
NLOOPS
; j++) {

327 
i
=0; i<
NCVS
; i++) {

328 
	`lock_acquúe
(
ã°locks
[
i
]);

329 
	`V
(
g©e£m
);

330 
	`cv_waô
(
ã°cvs
[
i
], 
ã°locks
[i]);

331 
	`lock_ªÀa£
(
ã°locks
[
i
]);

333 
	`k¥ötf
("¶ì±hªad: %u\n", 
j
);

335 
	`V
(
exô£m
);

336 
	}
}

340 
	$wakëhªad
(*
junk1
, 
junk2
)

342 
i
, 
j
;

344 ()
junk1
;

345 ()
junk2
;

347 
j
=0; j<
NLOOPS
; j++) {

348 
i
=0; i<
NCVS
; i++) {

349 
	`P
(
g©e£m
);

350 
	`lock_acquúe
(
ã°locks
[
i
]);

351 
	`cv_sig«l
(
ã°cvs
[
i
], 
ã°locks
[i]);

352 
	`lock_ªÀa£
(
ã°locks
[
i
]);

354 
	`k¥ötf
("wakëhªad: %u\n", 
j
);

356 
	`V
(
exô£m
);

357 
	}
}

360 
	$cvã°2
(
«rgs
, **
¨gs
)

362 
i
;

363 
ªsu…
;

365 ()
«rgs
;

366 ()
¨gs
;

368 
i
=0; i<
NCVS
; i++) {

369 
ã°locks
[
i
] = 
	`lock_¸óã
("cvtest2Üock");

370 
ã°cvs
[
i
] = 
	`cv_¸óã
("cvtest2 cv");

372 
g©e£m
 = 
	`£m_¸óã
("gatesem", 0);

373 
exô£m
 = 
	`£m_¸óã
("exitsem", 0);

375 
	`k¥ötf
("cvtest2...\n");

377 
ªsu…
 = 
	`thªad_f‹k
("cvã°2", 
NULL
, 
¶ì±hªad
, NULL, 0);

378 i‡(
ªsu…
) {

379 
	`∑nic
("cvtest2:Åhread_fork failed\n");

381 
ªsu…
 = 
	`thªad_f‹k
("cvã°2", 
NULL
, 
wakëhªad
, NULL, 0);

382 i‡(
ªsu…
) {

383 
	`∑nic
("cvtest2:Åhread_fork failed\n");

386 
	`P
(
exô£m
);

387 
	`P
(
exô£m
);

389 
	`£m_de°roy
(
exô£m
);

390 
	`£m_de°roy
(
g©e£m
);

391 
exô£m
 = 
g©e£m
 = 
NULL
;

392 
i
=0; i<
NCVS
; i++) {

393 
	`lock_de°roy
(
ã°locks
[
i
]);

394 
	`cv_de°roy
(
ã°cvs
[
i
]);

395 
ã°locks
[
i
] = 
NULL
;

396 
ã°cvs
[
i
] = 
NULL
;

399 
	`k¥ötf
("cvtest2 done\n");

401 
	}
}

	@test/threadlisttest.c

30 
	~<ty≥s.h
>

31 
	~<lib.h
>

32 
	~<thªad.h
>

33 
	~<thªadli°.h
>

34 
	~<ã°.h
>

36 
	#NUMNAMES
 7

	)

37 c⁄° *c⁄° 
	g«mes
[
NUMNAMES
] = {

47 
thªad
 *
	gÁkëhªads
[
NUMNAMES
];

52 
	#FAKE_MAGIC
 ((*)0xbØbØ)

	)

58 
thªad
 *

59 
	$Ákëhªad_¸óã
(c⁄° *
«me
)

61 
thªad
 *
t
;

63 
t
 = 
	`kmÆloc
((*t));

64 i‡(
t
 =
NULL
) {

65 
	`∑nic
("threadlisttest: Out of memory\n");

68 
	`bzîo
(
t
, (*t));

69 
t
->
t_«me
 = 
	`k°rdup
(
«me
);

70 i‡(
t
->
t_«me
 =
NULL
) {

71 
	`∑nic
("threadlisttest: Out of memory\n");

73 
t
->
t_°ack
 = 
FAKE_MAGIC
;

74 
	`thªadli°node_öô
(&
t
->
t_li°node
,Å);

75  
t
;

76 
	}
}

83 
	$Ákëhªad_de°roy
(
thªad
 *
t
)

85 
	`KASSERT
(
t
->
t_°ack
 =
FAKE_MAGIC
);

86 
	`thªadli°node_˛ónup
(&
t
->
t_li°node
);

87 
	`k‰ì
(
t
->
t_«me
);

88 
	`k‰ì
(
t
);

89 
	}
}

96 
	$check_‹dî
(
thªadli°
 *
é
, 
boﬁ
 
ªv
)

98 c⁄° 
°rög0
[] = "...";

99 c⁄° 
°rögN
[] = "~~~";

101 
thªad
 *
t
;

102 c⁄° *
fú°
 = 
ªv
 ? 
°rögN
 : 
°rög0
;

103 c⁄° *
œ°
 = 
ªv
 ? 
°rög0
 : 
°rögN
;

104 c⁄° *
¥ev
;

105 
cmp
;

107 
¥ev
 = 
fú°
;

108 
	`THREADLIST_FORALL
(
t
, *
é
) {

109 
cmp
 = 
	`°rcmp
(
¥ev
, 
t
->
t_«me
);

110 
	`KASSERT
(
ªv
 ? (
cmp
 > 0) : (cmp < 0));

111 
¥ev
 = 
t
->
t_«me
;

113 
cmp
 = 
	`°rcmp
(
¥ev
, 
œ°
);

114 
	`KASSERT
(
ªv
 ? (
cmp
 > 0) : (cmp < 0));

115 
	}
}

122 
	$thªadli°ã°_a
()

124 
thªadli°
 
é
;

126 
	`thªadli°_öô
(&
é
);

127 
	`KASSERT
(
	`thªadli°_i£m±y
(&
é
));

128 
	`thªadli°_˛ónup
(&
é
);

129 
	}
}

133 
	$thªadli°ã°_b
()

135 
thªadli°
 
é
;

136 
thªad
 *
t
;

138 
	`thªadli°_öô
(&
é
);

140 
	`thªadli°_addhód
(&
é
, 
Ákëhªads
[0]);

141 
	`check_‹dî
(&
é
, 
Ál£
);

142 
	`check_‹dî
(&
é
, 
åue
);

143 
	`KASSERT
(
é
.
é_cou¡
 == 1);

144 
t
 = 
	`thªadli°_ªmhód
(&
é
);

145 
	`KASSERT
(
é
.
é_cou¡
 == 0);

146 
	`KASSERT
(
t
 =
Ákëhªads
[0]);

148 
	`thªadli°_addèû
(&
é
, 
Ákëhªads
[0]);

149 
	`check_‹dî
(&
é
, 
Ál£
);

150 
	`check_‹dî
(&
é
, 
åue
);

151 
	`KASSERT
(
é
.
é_cou¡
 == 1);

152 
t
 = 
	`thªadli°_ªmèû
(&
é
);

153 
	`KASSERT
(
é
.
é_cou¡
 == 0);

154 
	`KASSERT
(
t
 =
Ákëhªads
[0]);

156 
	`thªadli°_˛ónup
(&
é
);

157 
	}
}

161 
	$thªadli°ã°_c
()

163 
thªadli°
 
é
;

164 
thªad
 *
t
;

166 
	`thªadli°_öô
(&
é
);

168 
	`thªadli°_addhód
(&
é
, 
Ákëhªads
[0]);

169 
	`thªadli°_addhód
(&
é
, 
Ákëhªads
[1]);

170 
	`KASSERT
(
é
.
é_cou¡
 == 2);

172 
	`check_‹dî
(&
é
, 
åue
);

174 
t
 = 
	`thªadli°_ªmhód
(&
é
);

175 
	`KASSERT
(
t
 =
Ákëhªads
[1]);

176 
t
 = 
	`thªadli°_ªmhód
(&
é
);

177 
	`KASSERT
(
t
 =
Ákëhªads
[0]);

178 
	`KASSERT
(
é
.
é_cou¡
 == 0);

180 
	`thªadli°_addèû
(&
é
, 
Ákëhªads
[0]);

181 
	`thªadli°_addèû
(&
é
, 
Ákëhªads
[1]);

182 
	`KASSERT
(
é
.
é_cou¡
 == 2);

184 
	`check_‹dî
(&
é
, 
Ál£
);

186 
t
 = 
	`thªadli°_ªmèû
(&
é
);

187 
	`KASSERT
(
t
 =
Ákëhªads
[1]);

188 
t
 = 
	`thªadli°_ªmèû
(&
é
);

189 
	`KASSERT
(
t
 =
Ákëhªads
[0]);

190 
	`KASSERT
(
é
.
é_cou¡
 == 0);

192 
	`thªadli°_˛ónup
(&
é
);

193 
	}
}

197 
	$thªadli°ã°_d
()

199 
thªadli°
 
é
;

200 
thªad
 *
t
;

202 
	`thªadli°_öô
(&
é
);

204 
	`thªadli°_addhód
(&
é
, 
Ákëhªads
[0]);

205 
	`thªadli°_addèû
(&
é
, 
Ákëhªads
[1]);

206 
	`KASSERT
(
é
.
é_cou¡
 == 2);

208 
	`check_‹dî
(&
é
, 
Ál£
);

210 
t
 = 
	`thªadli°_ªmhód
(&
é
);

211 
	`KASSERT
(
t
 =
Ákëhªads
[0]);

212 
t
 = 
	`thªadli°_ªmèû
(&
é
);

213 
	`KASSERT
(
t
 =
Ákëhªads
[1]);

214 
	`KASSERT
(
é
.
é_cou¡
 == 0);

216 
	`thªadli°_addhód
(&
é
, 
Ákëhªads
[0]);

217 
	`thªadli°_addèû
(&
é
, 
Ákëhªads
[1]);

218 
	`KASSERT
(
é
.
é_cou¡
 == 2);

220 
	`check_‹dî
(&
é
, 
Ál£
);

222 
t
 = 
	`thªadli°_ªmèû
(&
é
);

223 
	`KASSERT
(
t
 =
Ákëhªads
[1]);

224 
t
 = 
	`thªadli°_ªmèû
(&
é
);

225 
	`KASSERT
(
t
 =
Ákëhªads
[0]);

226 
	`KASSERT
(
é
.
é_cou¡
 == 0);

228 
	`thªadli°_˛ónup
(&
é
);

229 
	}
}

233 
	$thªadli°ã°_e
()

235 
thªadli°
 
é
;

236 
thªad
 *
t
;

237 
i
;

239 
	`thªadli°_öô
(&
é
);

241 
	`thªadli°_addhód
(&
é
, 
Ákëhªads
[1]);

242 
	`thªadli°_addèû
(&
é
, 
Ákëhªads
[3]);

243 
	`KASSERT
(
é
.
é_cou¡
 == 2);

244 
	`check_‹dî
(&
é
, 
Ál£
);

246 
	`thªadli°_ö£πa·î
(&
é
, 
Ákëhªads
[3], fakethreads[4]);

247 
	`KASSERT
(
é
.
é_cou¡
 == 3);

248 
	`check_‹dî
(&
é
, 
Ál£
);

250 
	`thªadli°_ö£πbef‹e
(&
é
, 
Ákëhªads
[0], fakethreads[1]);

251 
	`KASSERT
(
é
.
é_cou¡
 == 4);

252 
	`check_‹dî
(&
é
, 
Ál£
);

254 
	`thªadli°_ö£πa·î
(&
é
, 
Ákëhªads
[1], fakethreads[2]);

255 
	`KASSERT
(
é
.
é_cou¡
 == 5);

256 
	`check_‹dî
(&
é
, 
Ál£
);

258 
	`KASSERT
(
Ákëhªads
[4]->
t_li°node
.
én_¥ev
->
én_£lf
 ==

259 
Ákëhªads
[3]);

260 
	`KASSERT
(
Ákëhªads
[3]->
t_li°node
.
én_¥ev
->
én_£lf
 ==

261 
Ákëhªads
[2]);

262 
	`KASSERT
(
Ákëhªads
[2]->
t_li°node
.
én_¥ev
->
én_£lf
 ==

263 
Ákëhªads
[1]);

264 
	`KASSERT
(
Ákëhªads
[1]->
t_li°node
.
én_¥ev
->
én_£lf
 ==

265 
Ákëhªads
[0]);

267 
i
=0; i<5; i++) {

268 
t
 = 
	`thªadli°_ªmhód
(&
é
);

269 
	`KASSERT
(
t
 =
Ákëhªads
[
i
]);

271 
	`KASSERT
(
é
.
é_cou¡
 == 0);

273 
	`thªadli°_˛ónup
(&
é
);

274 
	}
}

278 
	$thªadli°ã°_f
()

280 
thªadli°
 
é
;

281 
thªad
 *
t
;

282 
i
;

284 
	`thªadli°_öô
(&
é
);

286 
i
=0; i<
NUMNAMES
; i++) {

287 
	`thªadli°_addèû
(&
é
, 
Ákëhªads
[
i
]);

289 
	`KASSERT
(
é
.
é_cou¡
 =
NUMNAMES
);

291 
i
=0;

292 
	`THREADLIST_FORALL
(
t
, 
é
) {

293 
	`KASSERT
(
t
 =
Ákëhªads
[
i
]);

294 
i
++;

296 
	`KASSERT
(
i
 =
NUMNAMES
);

298 
i
=0;

299 
	`THREADLIST_FORALL_REV
(
t
, 
é
) {

300 
	`KASSERT
(
t
 =
Ákëhªads
[
NUMNAMES
 - 
i
 - 1]);

301 
i
++;

303 
	`KASSERT
(
i
 =
NUMNAMES
);

305 
i
=0; i<
NUMNAMES
; i++) {

306 
t
 = 
	`thªadli°_ªmhód
(&
é
);

307 
	`KASSERT
(
t
 =
Ákëhªads
[
i
]);

309 
	`KASSERT
(
é
.
é_cou¡
 == 0);

310 
	}
}

316 
	$thªadli°ã°
(
«rgs
, **
¨gs
)

318 
i
;

320 ()
«rgs
;

321 ()
¨gs
;

323 
	`k¥ötf
("TestingÅhreadlists...\n");

325 
i
=0; i<
NUMNAMES
; i++) {

326 
Ákëhªads
[
i
] = 
	`Ákëhªad_¸óã
(
«mes
[i]);

329 
	`thªadli°ã°_a
();

330 
	`thªadli°ã°_b
();

331 
	`thªadli°ã°_c
();

332 
	`thªadli°ã°_d
();

333 
	`thªadli°ã°_e
();

334 
	`thªadli°ã°_f
();

336 
i
=0; i<
NUMNAMES
; i++) {

337 
	`Ákëhªad_de°roy
(
Ákëhªads
[
i
]);

338 
Ákëhªads
[
i
] = 
NULL
;

341 
	`k¥ötf
("Done.\n");

343 
	}
}

	@test/threadtest.c

33 
	~<ty≥s.h
>

34 
	~<lib.h
>

35 
	~<thªad.h
>

36 
	~<synch.h
>

37 
	~<ã°.h
>

39 
	#NTHREADS
 8

	)

41 
£m≠h‹e
 *
	gt£m
 = 
NULL
;

45 
	$öô_£m
()

47 i‡(
t£m
==
NULL
) {

48 
t£m
 = 
	`£m_¸óã
("tsem", 0);

49 i‡(
t£m
 =
NULL
) {

50 
	`∑nic
("threadtest: sem_create failed\n");

53 
	}
}

57 
	$loudthªad
(*
junk
, 
num
)

59 
ch
 = '0' + 
num
;

60 
i
;

62 ()
junk
;

64 
i
=0; i<120; i++) {

65 
	`putch
(
ch
);

67 
	`V
(
t£m
);

68 
	}
}

82 
	$quõâhªad
(*
junk
, 
num
)

84 
ch
 = '0' + 
num
;

85 vﬁ©ûê
i
;

87 ()
junk
;

89 
	`putch
(
ch
);

90 
i
=0; i<200000; i++);

91 
	`putch
(
ch
);

93 
	`V
(
t£m
);

94 
	}
}

98 
	$ru¡hªads
(
dﬁoud
)

100 
«me
[16];

101 
i
, 
ªsu…
;

103 
i
=0; i<
NTHREADS
; i++) {

104 
	`¢¥ötf
(
«me
, “ame), "thªadã°%d", 
i
);

105 
ªsu…
 = 
	`thªad_f‹k
(
«me
, 
NULL
,

106 
dﬁoud
 ? 
loudthªad
 : 
quõâhªad
,

107 
NULL
, 
i
);

108 i‡(
ªsu…
) {

109 
	`∑nic
("threadtest:Åhread_fork failed %s)\n",

110 
	`°ªº‹
(
ªsu…
));

114 
i
=0; i<
NTHREADS
; i++) {

115 
	`P
(
t£m
);

117 
	}
}

121 
	$thªadã°
(
«rgs
, **
¨gs
)

123 ()
«rgs
;

124 ()
¨gs
;

126 
	`öô_£m
();

127 
	`k¥ötf
("StartingÅhreadÅest...\n");

128 
	`ru¡hªads
(1);

129 
	`k¥ötf
("\nThreadÅest done.\n");

132 
	}
}

135 
	$thªadã°2
(
«rgs
, **
¨gs
)

137 ()
«rgs
;

138 ()
¨gs
;

140 
	`öô_£m
();

141 
	`k¥ötf
("StartingÅhreadÅest 2...\n");

142 
	`ru¡hªads
(0);

143 
	`k¥ötf
("\nThreadÅest 2 done.\n");

146 
	}
}

	@test/tt3.c

33 
	~<ty≥s.h
>

34 
	~<lib.h
>

35 
	~<wch™.h
>

36 
	~<thªad.h
>

37 
	~<synch.h
>

38 
	~<ã°.h
>

41 
	~"›t-synch¥obs.h
"

45 #i‡
OPT_SYNCHPROBS


46 
	#DIM
 10

	)

48 
	#DIM
 70

	)

53 
	#SLEEPALOT_PRINTS
 20

	)

54 
	#SLEEPALOT_ITERS
 4

	)

56 
	#WAKER_WAKES
 100

	)

58 
	#COMPUTE_ITERS
 10

	)

61 
	#NWAITCHANS
 12

	)

62 
•ölock
 
	g•ölocks
[
NWAITCHANS
];

63 
wch™
 *
	gwaôch™s
[
NWAITCHANS
];

65 vﬁ©ûê
	gwakîd⁄e
;

66 
£m≠h‹e
 *
	gwakî£m
;

67 
£m≠h‹e
 *
	gd⁄e£m
;

71 
	$£tup
()

73 
tmp
[16];

74 
i
;

76 i‡(
wakî£m
 =
NULL
) {

77 
wakî£m
 = 
	`£m_¸óã
("wakersem", 1);

78 
d⁄e£m
 = 
	`£m_¸óã
("donesem", 0);

79 
i
=0; i<
NWAITCHANS
; i++) {

80 
	`•ölock_öô
(&
•ölocks
[
i
]);

81 
	`¢¥ötf
(
tmp
, —mp), "wc%d", 
i
);

82 
waôch™s
[
i
] = 
	`wch™_¸óã
(
	`k°rdup
(
tmp
));

85 
wakîd⁄e
 = 0;

86 
	}
}

90 
	$¶ì∑lŸ_thªad
(*
junk
, 
num
)

92 
i
, 
j
;

94 ()
junk
;

96 
i
=0; i<
SLEEPALOT_PRINTS
; i++) {

97 
j
=0; j<
SLEEPALOT_ITERS
; j++) {

98 
n
;

99 
•ölock
 *
lk
;

100 
wch™
 *
wc
;

102 
n
 = 
	`øndom
(Ë% 
NWAITCHANS
;

103 
lk
 = &
•ölocks
[
n
];

104 
wc
 = 
waôch™s
[
n
];

105 
	`•ölock_acquúe
(
lk
);

106 
	`wch™_¶ìp
(
wc
, 
lk
);

107 
	`•ölock_ªÀa£
(
lk
);

109 
	`k¥ötf
("[%lu]", 
num
);

111 
	`V
(
d⁄e£m
);

112 
	}
}

116 
	$wakî_thªad
(*
junk1
, 
junk2
)

118 
i
, 
d⁄e
;

120 ()
junk1
;

121 ()
junk2
;

124 
	`P
(
wakî£m
);

125 
d⁄e
 = 
wakîd⁄e
;

126 
	`V
(
wakî£m
);

127 i‡(
d⁄e
) {

131 
i
=0; i<
WAKER_WAKES
; i++) {

132 
n
;

133 
•ölock
 *
lk
;

134 
wch™
 *
wc
;

136 
n
 = 
	`øndom
(Ë% 
NWAITCHANS
;

137 
lk
 = &
•ölocks
[
n
];

138 
wc
 = 
waôch™s
[
n
];

139 
	`•ölock_acquúe
(
lk
);

140 
	`wch™_wakóŒ
(
wc
, 
lk
);

141 
	`•ölock_ªÀa£
(
lk
);

143 
	`thªad_yõld
();

146 
	`V
(
d⁄e£m
);

147 
	}
}

151 
	$make_¶ì∑lŸs
(
howm™y
)

153 
«me
[16];

154 
i
, 
ªsu…
;

156 
i
=0; i<
howm™y
; i++) {

157 
	`¢¥ötf
(
«me
, “ame), "¶ì∑lŸ%d", 
i
);

158 
ªsu…
 = 
	`thªad_f‹k
(
«me
, 
NULL
, 
¶ì∑lŸ_thªad
, NULL, 
i
);

159 i‡(
ªsu…
) {

160 
	`∑nic
("thªad_f‹k faûed: %s\n", 
	`°ªº‹
(
ªsu…
));

163 
ªsu…
 = 
	`thªad_f‹k
("wakî", 
NULL
, 
wakî_thªad
, NULL, 0);

164 i‡(
ªsu…
) {

165 
	`∑nic
("thªad_f‹k faûed: %s\n", 
	`°ªº‹
(
ªsu…
));

167 
	}
}

171 
	$compuã_thªad
(*
junk1
, 
num
)

173 
	sm©rix
 {

174 
m
[
DIM
][DIM];

176 
m©rix
 *
m1
, *
m2
, *
m3
;

177 
tŸ
;

178 
i
, 
j
, 
k
, 
m
;

179 
uöt32_t
 
ønd
;

181 ()
junk1
;

183 
m1
 = 
	`kmÆloc
((
m©rix
));

184 
	`KASSERT
(
m1
 !
NULL
);

185 
m2
 = 
	`kmÆloc
((
m©rix
));

186 
	`KASSERT
(
m2
 !
NULL
);

187 
m3
 = 
	`kmÆloc
((
m©rix
));

188 
	`KASSERT
(
m3
 !
NULL
);

190 
m
=0; m<
COMPUTE_ITERS
; m++) {

192 
i
=0; i<
DIM
; i++) {

193 
j
=0; j<
DIM
; j++) {

194 
ønd
 = 
	`øndom
();

195 
m1
->
m
[
i
][
j
] = 
ønd
 >> 16;

196 
m2
->
m
[
i
][
j
] = 
ønd
 & 0xffff;

200 
i
=0; i<
DIM
; i++) {

201 
j
=0; j<
DIM
; j++) {

202 
tŸ
 = 0;

203 
k
=0; k<
DIM
; k++) {

204 
tŸ
 +
m1
->
m
[
i
][
k
] * 
m2
->m[k][
j
];

206 
m3
->
m
[
i
][
j
] = 
tŸ
;

210 
tŸ
 = 0;

211 
i
=0; i<
DIM
; i++) {

212 
tŸ
 +
m3
->
m
[
i
][i];

215 
	`k¥ötf
("{%lu: %u}", 
num
, (Ë
tŸ
);

216 
	`thªad_yõld
();

219 
	`k‰ì
(
m1
);

220 
	`k‰ì
(
m2
);

221 
	`k‰ì
(
m3
);

223 
	`V
(
d⁄e£m
);

224 
	}
}

228 
	$make_compuãs
(
howm™y
)

230 
«me
[16];

231 
i
, 
ªsu…
;

233 
i
=0; i<
howm™y
; i++) {

234 
	`¢¥ötf
(
«me
, “ame), "compuã%d", 
i
);

235 
ªsu…
 = 
	`thªad_f‹k
(
«me
, 
NULL
, 
compuã_thªad
, NULL, 
i
);

236 i‡(
ªsu…
) {

237 
	`∑nic
("thªad_f‹k faûed: %s\n", 
	`°ªº‹
(
ªsu…
));

240 
	}
}

244 
	$föish
(
howm™ytŸÆ
)

246 
i
;

247 
i
=0; i<
howm™ytŸÆ
; i++) {

248 
	`P
(
d⁄e£m
);

250 
	`P
(
wakî£m
);

251 
wakîd⁄e
 = 1;

252 
	`V
(
wakî£m
);

253 
	`P
(
d⁄e£m
);

254 
	}
}

258 
	$ru¡e°3
(
n¶ìps
, 
ncompuãs
)

260 
	`£tup
();

261 
	`k¥ötf
("StartingÅhreadÅest 3 (%d [sleepalots], %d {computes}, "

263 
n¶ìps
, 
ncompuãs
);

264 
	`make_¶ì∑lŸs
(
n¶ìps
);

265 
	`make_compuãs
(
ncompuãs
);

266 
	`föish
(
n¶ìps
+
ncompuãs
);

267 
	`k¥ötf
("\nThreadÅest 3 done\n");

268 
	}
}

271 
	$thªadã°3
(
«rgs
, **
¨gs
)

273 i‡(
«rgs
==1) {

274 
	`ru¡e°3
(5, 2);

276 i‡(
«rgs
==3) {

277 
	`ru¡e°3
(
	`©oi
(
¨gs
[1]),átoi(args[2]));

280 
	`k¥ötf
("Usage:Åt3 [sleepthreads computethreads]\n");

284 
	}
}

	@thread/clock.c

30 
	~<ty≥s.h
>

31 
	~<lib.h
>

32 
	~<˝u.h
>

33 
	~<wch™.h
>

34 
	~<˛ock.h
>

35 
	~<thªad.h
>

36 
	~<cuºít.h
>

53 
	#SCHEDULE_HARDCLOCKS
 4

	)

54 
	#MIGRATE_HARDCLOCKS
 16

	)

59 
wch™
 *
	glbﬁt
;

60 
•ölock
 
	glbﬁt_lock
;

66 
	$h¨d˛ock_boŸ°øp
()

68 
	`•ölock_öô
(&
lbﬁt_lock
);

69 
lbﬁt
 = 
	`wch™_¸óã
("lbolt");

70 i‡(
lbﬁt
 =
NULL
) {

71 
	`∑nic
("Couldn't createÜbolt\n");

73 
	}
}

80 
	$timî˛ock
()

83 
	`•ölock_acquúe
(&
lbﬁt_lock
);

84 
	`wch™_wakóŒ
(
lbﬁt
, &
lbﬁt_lock
);

85 
	`•ölock_ªÀa£
(&
lbﬁt_lock
);

86 
	}
}

93 
	$h¨d˛ock
()

99 
cur˝u
->
c_h¨d˛ocks
++;

100 i‡((
cur˝u
->
c_h¨d˛ocks
 % 
MIGRATE_HARDCLOCKS
) == 0) {

101 
	`thªad_c⁄sidî_migøti⁄
();

103 i‡((
cur˝u
->
c_h¨d˛ocks
 % 
SCHEDULE_HARDCLOCKS
) == 0) {

104 
	`scheduÀ
();

106 
	`thªad_yõld
();

107 
	}
}

113 
	$˛ock¶ìp
(
num_£cs
)

115 
	`•ölock_acquúe
(&
lbﬁt_lock
);

116 
num_£cs
 > 0) {

117 
	`wch™_¶ìp
(
lbﬁt
, &
lbﬁt_lock
);

118 
num_£cs
--;

120 
	`•ölock_ªÀa£
(&
lbﬁt_lock
);

121 
	}
}

	@thread/spinlock.c

31 
	#SPINLOCK_INLINE


	)

32 
	#MEMBAR_INLINE


	)

34 
	~<ty≥s.h
>

35 
	~<lib.h
>

36 
	~<˝u.h
>

37 
	~<•l.h
>

38 
	~<•ölock.h
>

39 
	~<memb¨.h
>

40 
	~<cuºít.h
>

51 
	$•ölock_öô
(
•ölock
 *
•lk
)

53 
	`•ölock_d©a_£t
(&
•lk
->
•lk_lock
, 0);

54 
•lk
->
•lk_hﬁdî
 = 
NULL
;

55 
	}
}

61 
	$•ölock_˛ónup
(
•ölock
 *
•lk
)

63 
	`KASSERT
(
•lk
->
•lk_hﬁdî
 =
NULL
);

64 
	`KASSERT
(
	`•ölock_d©a_gë
(&
•lk
->
•lk_lock
) == 0);

65 
	}
}

75 
	$•ölock_acquúe
(
•ölock
 *
•lk
)

77 
˝u
 *
my˝u
;

79 
	`•Ãai£
(
IPL_NONE
, 
IPL_HIGH
);

82 i‡(
	`CURCPU_EXISTS
()) {

83 
my˝u
 = 
cur˝u
->
c_£lf
;

84 i‡(
•lk
->
•lk_hﬁdî
 =
my˝u
) {

85 
	`∑nic
("Dódlock o¿•ölock %p\n", 
•lk
);

87 
my˝u
->
c_•ölocks
++;

90 
my˝u
 = 
NULL
;

104 i‡(
	`•ölock_d©a_gë
(&
•lk
->
•lk_lock
) != 0) {

107 i‡(
	`•ölock_d©a_ã°™d£t
(&
•lk
->
•lk_lock
) != 0) {

113 
	`memb¨_°‹e_™y
();

114 
•lk
->
•lk_hﬁdî
 = 
my˝u
;

115 
	}
}

121 
	$•ölock_ªÀa£
(
•ölock
 *
•lk
)

124 i‡(
	`CURCPU_EXISTS
()) {

125 
	`KASSERT
(
•lk
->
•lk_hﬁdî
 =
cur˝u
->
c_£lf
);

126 
	`KASSERT
(
cur˝u
->
c_•ölocks
 > 0);

127 
cur˝u
->
c_•ölocks
--;

130 
•lk
->
•lk_hﬁdî
 = 
NULL
;

131 
	`memb¨_™y_°‹e
();

132 
	`•ölock_d©a_£t
(&
•lk
->
•lk_lock
, 0);

133 
	`•Œowî
(
IPL_HIGH
, 
IPL_NONE
);

134 
	}
}

139 
boﬁ


140 
	$•ölock_do_i_hﬁd
(
•ölock
 *
•lk
)

142 i‡(!
	`CURCPU_EXISTS
()) {

143  
åue
;

147  (
•lk
->
•lk_hﬁdî
 =
cur˝u
->
c_£lf
);

148 
	}
}

	@thread/spl.c

31 
	#SPL_INLINE


	)

33 
	~<ty≥s.h
>

34 
	~<lib.h
>

35 
	~<˝u.h
>

36 
	~<•l.h
>

37 
	~<thªad.h
>

38 
	~<cuºít.h
>

87 
	$•Ãai£
(
ﬁd•l
, 
√w•l
)

89 
thªad
 *
cur
 = 
cuπhªad
;

92 
	`KASSERT
(
ﬁd•l
 =
IPL_NONE
);

93 
	`KASSERT
(
√w•l
 =
IPL_HIGH
);

95 i‡(!
	`CURCPU_EXISTS
()) {

100 i‡(
cur
->
t_ùlhigh_cou¡
 == 0) {

101 
	`˝u_úqoff
();

103 
cur
->
t_ùlhigh_cou¡
++;

104 
	}
}

107 
	$•Œowî
(
ﬁd•l
, 
√w•l
)

109 
thªad
 *
cur
 = 
cuπhªad
;

112 
	`KASSERT
(
ﬁd•l
 =
IPL_HIGH
);

113 
	`KASSERT
(
√w•l
 =
IPL_NONE
);

115 i‡(!
	`CURCPU_EXISTS
()) {

120 
cur
->
t_ùlhigh_cou¡
--;

121 i‡(
cur
->
t_ùlhigh_cou¡
 == 0) {

122 
	`˝u_úq⁄
();

124 
	}
}

132 
	$•lx
(
•l
)

134 
thªad
 *
cur
 = 
cuπhªad
;

135 
ªt
;

137 i‡(!
	`CURCPU_EXISTS
()) {

139  
•l
;

142 i‡(
cur
->
t_cur•l
 < 
•l
) {

144 
	`•Ãai£
(
cur
->
t_cur•l
, 
•l
);

145 
ªt
 = 
cur
->
t_cur•l
;

146 
cur
->
t_cur•l
 = 
•l
;

148 i‡(
cur
->
t_cur•l
 > 
•l
) {

150 
ªt
 = 
cur
->
t_cur•l
;

151 
cur
->
t_cur•l
 = 
•l
;

152 
	`•Œowî
(
ªt
, 
•l
);

156 
ªt
 = 
•l
;

159  
ªt
;

160 
	}
}

	@thread/synch.c

35 
	~<ty≥s.h
>

36 
	~<lib.h
>

37 
	~<•ölock.h
>

38 
	~<wch™.h
>

39 
	~<thªad.h
>

40 
	~<cuºít.h
>

41 
	~<synch.h
>

47 
£m≠h‹e
 *

48 
	$£m_¸óã
(c⁄° *
«me
, 
öôül_cou¡
)

50 
£m≠h‹e
 *
£m
;

52 
£m
 = 
	`kmÆloc
((
£m≠h‹e
));

53 i‡(
£m
 =
NULL
) {

54  
NULL
;

57 
£m
->
£m_«me
 = 
	`k°rdup
(
«me
);

58 i‡(
£m
->
£m_«me
 =
NULL
) {

59 
	`k‰ì
(
£m
);

60  
NULL
;

63 
£m
->
£m_wch™
 = 
	`wch™_¸óã
(£m->
£m_«me
);

64 i‡(
£m
->
£m_wch™
 =
NULL
) {

65 
	`k‰ì
(
£m
->
£m_«me
);

66 
	`k‰ì
(
£m
);

67  
NULL
;

70 
	`•ölock_öô
(&
£m
->
£m_lock
);

71 
£m
->
£m_cou¡
 = 
öôül_cou¡
;

73  
£m
;

74 
	}
}

77 
	$£m_de°roy
(
£m≠h‹e
 *
£m
)

79 
	`KASSERT
(
£m
 !
NULL
);

82 
	`•ölock_˛ónup
(&
£m
->
£m_lock
);

83 
	`wch™_de°roy
(
£m
->
£m_wch™
);

84 
	`k‰ì
(
£m
->
£m_«me
);

85 
	`k‰ì
(
£m
);

86 
	}
}

89 
	$P
(
£m≠h‹e
 *
£m
)

91 
	`KASSERT
(
£m
 !
NULL
);

99 
	`KASSERT
(
cuπhªad
->
t_ö_öãºu±
 =
Ál£
);

102 
	`•ölock_acquúe
(&
£m
->
£m_lock
);

103 
£m
->
£m_cou¡
 == 0) {

116 
	`wch™_¶ìp
(
£m
->
£m_wch™
, &£m->
£m_lock
);

118 
	`KASSERT
(
£m
->
£m_cou¡
 > 0);

119 
£m
->
£m_cou¡
--;

120 
	`•ölock_ªÀa£
(&
£m
->
£m_lock
);

121 
	}
}

124 
	$V
(
£m≠h‹e
 *
£m
)

126 
	`KASSERT
(
£m
 !
NULL
);

128 
	`•ölock_acquúe
(&
£m
->
£m_lock
);

130 
£m
->
£m_cou¡
++;

131 
	`KASSERT
(
£m
->
£m_cou¡
 > 0);

132 
	`wch™_wake⁄e
(
£m
->
£m_wch™
, &£m->
£m_lock
);

134 
	`•ölock_ªÀa£
(&
£m
->
£m_lock
);

135 
	}
}

141 
lock
 *

142 
	$lock_¸óã
(c⁄° *
«me
)

144 
lock
 *lock;

146 
lock
 = 
	`kmÆloc
((lock));

147 i‡(
lock
 =
NULL
) {

148  
NULL
;

151 
lock
->
lk_«me
 = 
	`k°rdup
(
«me
);

152 i‡(
lock
->
lk_«me
 =
NULL
) {

153 
	`k‰ì
(
lock
);

154  
NULL
;

161 
lock
->
lk_wch™
 = 
	`wch™_¸óã
÷ock->
lk_«me
);

163 if(
lock
->
lk_wch™
 =
NULL
){

164 
	`k‰ì
(
lock
->
lk_«me
);

165 
	`k‰ì
(
lock
);

166  
NULL
;

170 
	`•ölock_öô
(&
lock
->
lk_¶ock
);

174 
lock
->
lk_hﬁdî
 = 
NULL
;

176  
lock
;

177 
	}
}

180 
	$lock_de°roy
(
lock
 *lock)

182 
	`KASSERT
(
lock
 !
NULL
);

187 
	`•ölock_˛ónup
(&
lock
->
lk_¶ock
);

190 
	`wch™_de°roy
(
lock
->
lk_wch™
);

193 
	`k‰ì
(
lock
->
lk_«me
);

194 
	`k‰ì
(
lock
->
lk_hﬁdî
);

196 
	`k‰ì
(
lock
);

197 
	}
}

200 
	$lock_acquúe
(
lock
 *lock)

204 ()
lock
;

207 
	`KASSERT
(
lock
 !
NULL
);

210 
	`KASSERT
(
cuπhªad
->
t_ö_öãºu±
 =
Ál£
);

213 
	`•ölock_acquúe
(&
lock
->
lk_¶ock
);

216 if(
lock
->
lk_hﬁdî
 =
cuπhªad
->
t_«me
){

217 
	`∑nic
("Dódlock o¿lock %p\n", 
lock
);

222 
lock
->
lk_hﬁdî
 !
NULL
){

223 
	`wch™_¶ìp
(
lock
->
lk_wch™
, &lock->
lk_¶ock
);

228 
	`KASSERT
(
lock
->
lk_hﬁdî
 =
NULL
);

231 
lock
->
lk_hﬁdî
 = 
cuπhªad
->
t_«me
;

234 
	`•ölock_ªÀa£
(&
lock
->
lk_¶ock
);

237 
	}
}

240 
	$lock_ªÀa£
(
lock
 *lock)

244 ()
lock
;

247 
	`KASSERT
(
lock
 !
NULL
);

250 
	`KASSERT
(
	`lock_do_i_hﬁd
(
lock
));

253 
	`•ölock_acquúe
(&
lock
->
lk_¶ock
);

256 
lock
->
lk_hﬁdî
 = 
NULL
;

259 
	`KASSERT
(
lock
->
lk_hﬁdî
 =
NULL
);

262 
	`wch™_wake⁄e
(
lock
->
lk_wch™
, &lock->
lk_¶ock
);

265 
	`•ölock_ªÀa£
(&
lock
->
lk_¶ock
);

267 
	}
}

269 
boﬁ


270 
	$lock_do_i_hﬁd
(
lock
 *lock)

274 ()
lock
;

279 if(!
	`CURCPU_EXISTS
()){

280  
åue
;

285 
	`•ölock_acquúe
(&
lock
->
lk_¶ock
);

286 
boﬁ
 
i_hﬁd
 = (
lock
->
lk_hﬁdî
 =
cuπhªad
->
t_«me
);

287 
	`•ölock_ªÀa£
(&
lock
->
lk_¶ock
);

289  
i_hﬁd
;

291 
	}
}

298 
cv
 *

299 
	$cv_¸óã
(c⁄° *
«me
)

301 
cv
 *cv;

303 
cv
 = 
	`kmÆloc
((cv));

304 i‡(
cv
 =
NULL
) {

305  
NULL
;

308 
cv
->
cv_«me
 = 
	`k°rdup
(
«me
);

309 i‡(
cv
->
cv_«me
==
NULL
) {

310 
	`k‰ì
(
cv
);

311  
NULL
;

317 
cv
->
cv_wch™
 = 
	`wch™_¸óã
(cv->
cv_«me
);

319 if(
cv
->
cv_wch™
 =
NULL
){

320 
	`k‰ì
(
cv
->
cv_«me
);

321 
	`k‰ì
(
cv
);

322  
NULL
;

326 
	`•ölock_öô
(&
cv
->
cv_¶ock
);

328  
cv
;

329 
	}
}

332 
	$cv_de°roy
(
cv
 *cv)

334 
	`KASSERT
(
cv
 !
NULL
);

339 
	`•ölock_˛ónup
(&
cv
->
cv_¶ock
);

342 
	`wch™_de°roy
(
cv
->
cv_wch™
);

344 
	`k‰ì
(
cv
->
cv_«me
);

345 
	`k‰ì
(
cv
);

346 
	}
}

349 
	$cv_waô
(
cv
 *cv, 
lock
 *lock)

352 ()
cv
;

353 ()
lock
;

356 
	`KASSERT
(
cv
 !
NULL
);

357 
	`KASSERT
(
lock
 !
NULL
);

359 
	`KASSERT
(
	`lock_do_i_hﬁd
(
lock
));

362 
	`•ölock_acquúe
(&
cv
->
cv_¶ock
);

363 
	`lock_ªÀa£
(
lock
);

364 
	`wch™_¶ìp
(
cv
->
cv_wch™
, &cv->
cv_¶ock
);

368 
	`•ölock_ªÀa£
(&
cv
->
cv_¶ock
);

371 
	`lock_acquúe
(
lock
);

373 
	`KASSERT
(
	`lock_do_i_hﬁd
(
lock
));

375 
	}
}

378 
	$cv_sig«l
(
cv
 *cv, 
lock
 *lock)

381 ()
cv
;

382 ()
lock
;

385 
	`KASSERT
(
lock
 !
NULL
);

386 
	`KASSERT
(
cv
 !
NULL
);

390 
	`•ölock_acquúe
(&
cv
->
cv_¶ock
);

391 
	`wch™_wake⁄e
(
cv
->
cv_wch™
, &cv->
cv_¶ock
);

392 
	`•ölock_ªÀa£
(&
cv
->
cv_¶ock
);

393 
	}
}

396 
	$cv_brﬂdˇ°
(
cv
 *cv, 
lock
 *lock)

399 ()
cv
;

400 ()
lock
;

403 
	`KASSERT
(
lock
 !
NULL
);

404 
	`KASSERT
(
cv
 !
NULL
);

408 
	`•ölock_acquúe
(&
cv
->
cv_¶ock
);

409 
	`wch™_wakóŒ
(
cv
->
cv_wch™
, &cv->
cv_¶ock
);

410 
	`•ölock_ªÀa£
(&
cv
->
cv_¶ock
);

412 
	}
}

	@thread/thread.c

34 
	#THREADINLINE


	)

36 
	~<ty≥s.h
>

37 
	~<kîn/î∫o.h
>

38 
	~<lib.h
>

39 
	~<¨øy.h
>

40 
	~<˝u.h
>

41 
	~<•l.h
>

42 
	~<•ölock.h
>

43 
	~<wch™.h
>

44 
	~<thªad.h
>

45 
	~<thªadli°.h
>

46 
	~<thªad¥iv©e.h
>

47 
	~<¥oc.h
>

48 
	~<cuºít.h
>

49 
	~<synch.h
>

50 
	~<addr•a˚.h
>

51 
	~<maöbus.h
>

52 
	~<vnode.h
>

55 
	~"›t-synch¥obs.h
"

60 
	#THREAD_STACK_MAGIC
 0xbØdf00d

	)

63 
	swch™
 {

64 c⁄° *
	mwc_«me
;

65 
thªadli°
 
	mwc_thªads
;

66 
	mwc_ödex
;

70 
DECLARRAY
(
˝u
, 
__UNUSED
 
ölöe
);

71 
DEFARRAY
(
˝u
, 
__UNUSED
 
ölöe
);

72 
˝u¨øy
 
	gÆl˝us
;

75 
DECLARRAY
(
wch™
, 
__UNUSED
 
ölöe
);

76 
DEFARRAY
(
wch™
, 
__UNUSED
 
ölöe
);

77 
•ölock
 
	gÆlwch™s_lock
;

78 
wch™¨øy
 
	gÆlwch™s
;

81 
£m≠h‹e
 *
	g˝u_°¨tup_£m
;

92 
	$thªad_check°ack_öô
(
thªad
 *thread)

94 ((
uöt32_t
 *)
thªad
->
t_°ack
)[0] = 
THREAD_STACK_MAGIC
;

95 ((
uöt32_t
 *)
thªad
->
t_°ack
)[1] = 
THREAD_STACK_MAGIC
;

96 ((
uöt32_t
 *)
thªad
->
t_°ack
)[2] = 
THREAD_STACK_MAGIC
;

97 ((
uöt32_t
 *)
thªad
->
t_°ack
)[3] = 
THREAD_STACK_MAGIC
;

98 
	}
}

112 
	$thªad_check°ack
(
thªad
 *thread)

114 i‡(
thªad
->
t_°ack
 !
NULL
) {

115 
	`KASSERT
(((
uöt32_t
*)
thªad
->
t_°ack
)[0] =
THREAD_STACK_MAGIC
);

116 
	`KASSERT
(((
uöt32_t
*)
thªad
->
t_°ack
)[1] =
THREAD_STACK_MAGIC
);

117 
	`KASSERT
(((
uöt32_t
*)
thªad
->
t_°ack
)[2] =
THREAD_STACK_MAGIC
);

118 
	`KASSERT
(((
uöt32_t
*)
thªad
->
t_°ack
)[3] =
THREAD_STACK_MAGIC
);

120 
	}
}

127 
thªad
 *

128 
	$thªad_¸óã
(c⁄° *
«me
)

130 
thªad
 *thread;

132 
	`DEBUGASSERT
(
«me
 !
NULL
);

134 
thªad
 = 
	`kmÆloc
((*thread));

135 i‡(
thªad
 =
NULL
) {

136  
NULL
;

139 
thªad
->
t_«me
 = 
	`k°rdup
(
«me
);

140 i‡(
thªad
->
t_«me
 =
NULL
) {

141 
	`k‰ì
(
thªad
);

142  
NULL
;

144 
thªad
->
t_wch™_«me
 = "NEW";

145 
thªad
->
t_°©e
 = 
S_READY
;

148 
	`thªad_machdï_öô
(&
thªad
->
t_machdï
);

149 
	`thªadli°node_öô
(&
thªad
->
t_li°node
,Åhread);

150 
thªad
->
t_°ack
 = 
NULL
;

151 
thªad
->
t_c⁄ãxt
 = 
NULL
;

152 
thªad
->
t_˝u
 = 
NULL
;

153 
thªad
->
t_¥oc
 = 
NULL
;

156 
thªad
->
t_ö_öãºu±
 = 
Ál£
;

157 
thªad
->
t_cur•l
 = 
IPL_HIGH
;

158 
thªad
->
t_ùlhigh_cou¡
 = 1;

162  
thªad
;

163 
	}
}

173 
˝u
 *

174 
	$˝u_¸óã
(
h¨dw¨e_numbî
)

176 
˝u
 *
c
;

177 
ªsu…
;

178 
«mebuf
[16];

180 
c
 = 
	`kmÆloc
((*c));

181 i‡(
c
 =
NULL
) {

182 
	`∑nic
("cpu_create: Out of memory\n");

185 
c
->
c_£lf
 = c;

186 
c
->
c_h¨dw¨e_numbî
 = 
h¨dw¨e_numbî
;

188 
c
->
c_cuπhªad
 = 
NULL
;

189 
	`thªadli°_öô
(&
c
->
c_zombõs
);

190 
c
->
c_h¨d˛ocks
 = 0;

191 
c
->
c_•ölocks
 = 0;

193 
c
->
c_isidÀ
 = 
Ál£
;

194 
	`thªadli°_öô
(&
c
->
c_runqueue
);

195 
	`•ölock_öô
(&
c
->
c_runqueue_lock
);

197 
c
->
c_ùi_≥ndög
 = 0;

198 
c
->
c_numshoŸdown
 = 0;

199 
	`•ölock_öô
(&
c
->
c_ùi_lock
);

201 
ªsu…
 = 
	`˝u¨øy_add
(&
Æl˝us
, 
c
, &c->
c_numbî
);

202 i‡(
ªsu…
 != 0) {

203 
	`∑nic
("˝u_¸óã:áºay_add: %s\n", 
	`°ªº‹
(
ªsu…
));

206 
	`¢¥ötf
(
«mebuf
, “amebuf), "<boŸ #%d>", 
c
->
c_numbî
);

207 
c
->
c_cuπhªad
 = 
	`thªad_¸óã
(
«mebuf
);

208 i‡(
c
->
c_cuπhªad
 =
NULL
) {

209 
	`∑nic
("cpu_create:Åhread_create failed\n");

211 
ªsu…
 = 
	`¥oc_addthªad
(
k¥oc
, 
c
->
c_cuπhªad
);

212 i‡(
ªsu…
) {

213 
	`∑nic
("˝u_¸óã:Öroc_addthªad:: %s\n", 
	`°ªº‹
(
ªsu…
));

216 i‡(
c
->
c_numbî
 == 0) {

226 
c
->
c_cuπhªad
->
t_°ack
 = 
	`kmÆloc
(
STACK_SIZE
);

227 i‡(
c
->
c_cuπhªad
->
t_°ack
 =
NULL
) {

228 
	`∑nic
("cpu_create: couldn'tállocate stack");

230 
	`thªad_check°ack_öô
(
c
->
c_cuπhªad
);

232 
c
->
c_cuπhªad
->
t_˝u
 = c;

234 
	`˝u_machdï_öô
(
c
);

236  
c
;

237 
	}
}

249 
	$thªad_de°roy
(
thªad
 *thread)

251 
	`KASSERT
(
thªad
 !
cuπhªad
);

252 
	`KASSERT
(
thªad
->
t_°©e
 !
S_RUN
);

260 
	`KASSERT
(
thªad
->
t_¥oc
 =
NULL
);

261 i‡(
thªad
->
t_°ack
 !
NULL
) {

262 
	`k‰ì
(
thªad
->
t_°ack
);

264 
	`thªadli°node_˛ónup
(&
thªad
->
t_li°node
);

265 
	`thªad_machdï_˛ónup
(&
thªad
->
t_machdï
);

268 
thªad
->
t_wch™_«me
 = "DESTROYED";

270 
	`k‰ì
(
thªad
->
t_«me
);

271 
	`k‰ì
(
thªad
);

272 
	}
}

282 
	$ex‹ci£
()

284 
thªad
 *
z
;

286 (
z
 = 
	`thªadli°_ªmhód
(&
cur˝u
->
c_zombõs
)Ë!
NULL
) {

287 
	`KASSERT
(
z
 !
cuπhªad
);

288 
	`KASSERT
(
z
->
t_°©e
 =
S_ZOMBIE
);

289 
	`thªad_de°roy
(
z
);

291 
	}
}

299 
	$thªad_∑nic
()

306 
	`ùi_brﬂdˇ°
(
IPI_PANIC
);

315 
cur˝u
->
c_runqueue
.
é_cou¡
 = 0;

316 
cur˝u
->
c_runqueue
.
é_hód
.
én_√xt
 = &cur˝u->c_runqueue.
é_èû
;

317 
cur˝u
->
c_runqueue
.
é_èû
.
én_¥ev
 = &cur˝u->c_runqueue.
é_hód
;

335 
	}
}

341 
	$thªad_shutdown
()

349 
	`ùi_brﬂdˇ°
(
IPI_OFFLINE
);

350 
	}
}

356 
	$thªad_boŸ°øp
()

358 
˝u
 *
boŸ˝u
;

359 
thªad
 *
boŸthªad
;

361 
	`˝u¨øy_öô
(&
Æl˝us
);

371 
boŸ˝u
 = 
	`˝u_¸óã
(0);

372 
boŸthªad
 = 
boŸ˝u
->
c_cuπhªad
;

379 
	`INIT_CURCPU
(
boŸ˝u
, 
boŸthªad
);

386 
cuπhªad
->
t_˝u
 = 
cur˝u
;

387 
cur˝u
->
c_cuπhªad
 = 
cuπhªad
;

390 
	`KASSERT
(
cuπhªad
->
t_¥oc
 !
NULL
);

393 
	`•ölock_öô
(&
Ælwch™s_lock
);

394 
	`wch™¨øy_öô
(&
Ælwch™s
);

397 
	}
}

408 
	$˝u_h©ch
(
so·w¨e_numbî
)

410 
buf
[64];

412 
	`KASSERT
(
cur˝u
 !
NULL
);

413 
	`KASSERT
(
cuπhªad
 !
NULL
);

414 
	`KASSERT
(
cur˝u
->
c_numbî
 =
so·w¨e_numbî
);

416 
	`•l0
();

417 
	`˝u_idítify
(
buf
, (buf));

419 
	`k¥ötf
("˝u%u: %s\n", 
so·w¨e_numbî
, 
buf
);

421 
	`V
(
˝u_°¨tup_£m
);

422 
	`thªad_exô
();

423 
	}
}

429 
	$thªad_°¨t_˝us
()

431 
buf
[64];

432 
i
;

434 
	`˝u_idítify
(
buf
, (buf));

435 
	`k¥ötf
("˝u0: %s\n", 
buf
);

437 
˝u_°¨tup_£m
 = 
	`£m_¸óã
("cpu_hatch", 0);

438 
	`maöbus_°¨t_˝us
();

440 
i
=0; i<
	`˝u¨øy_num
(&
Æl˝us
) - 1; i++) {

441 
	`P
(
˝u_°¨tup_£m
);

443 
	`£m_de°roy
(
˝u_°¨tup_£m
);

444 
˝u_°¨tup_£m
 = 
NULL
;

445 
	}
}

454 
	$thªad_make_ru¬abÀ
(
thªad
 *
èrgë
, 
boﬁ
 
Æªady_have_lock
)

456 
˝u
 *
èrgë˝u
;

459 
èrgë˝u
 = 
èrgë
->
t_˝u
;

461 i‡(
Æªady_have_lock
) {

463 
	`KASSERT
(
	`•ölock_do_i_hﬁd
(&
èrgë˝u
->
c_runqueue_lock
));

466 
	`•ölock_acquúe
(&
èrgë˝u
->
c_runqueue_lock
);

470 
èrgë
->
t_°©e
 = 
S_READY
;

471 
	`thªadli°_addèû
(&
èrgë˝u
->
c_runqueue
, 
èrgë
);

473 i‡(
èrgë˝u
->
c_isidÀ
) {

478 
	`ùi_£nd
(
èrgë˝u
, 
IPI_UNIDLE
);

481 i‡(!
Æªady_have_lock
) {

482 
	`•ölock_ªÀa£
(&
èrgë˝u
->
c_runqueue_lock
);

484 
	}
}

497 
thªad_f‹k
(c⁄° *
«me
,

498 
¥oc
 *proc,

499 (*
íåypoöt
)(*
d©a1
, 
d©a2
),

500 *
d©a1
, 
d©a2
)

502 
thªad
 *
√wthªad
;

503 
ªsu…
;

505 
√wthªad
 = 
	`thªad_¸óã
(
«me
);

506 i‡(
√wthªad
 =
NULL
) {

507  
ENOMEM
;

511 
√wthªad
->
t_°ack
 = 
	`kmÆloc
(
STACK_SIZE
);

512 i‡(
√wthªad
->
t_°ack
 =
NULL
) {

513 
	`thªad_de°roy
(
√wthªad
);

514  
ENOMEM
;

516 
	`thªad_check°ack_öô
(
√wthªad
);

523 
√wthªad
->
t_˝u
 = 
cuπhªad
->t_cpu;

526 i‡(
¥oc
 =
NULL
) {

527 
¥oc
 = 
cuπhªad
->
t_¥oc
;

529 
ªsu…
 = 
	`¥oc_addthªad
(
¥oc
, 
√wthªad
);

530 i‡(
ªsu…
) {

532 
	`thªad_de°roy
(
√wthªad
);

533  
ªsu…
;

541 
√wthªad
->
t_ùlhigh_cou¡
++;

544 
	`swôch‰ame_öô
(
√wthªad
, 
íåypoöt
, 
d©a1
, 
d©a2
);

547 
	`thªad_make_ru¬abÀ
(
√wthªad
, 
Ál£
);

550 
	}
}

564 
	$thªad_swôch
(
thªad°©e_t
 
√w°©e
, 
wch™
 *
wc
, 
•ölock
 *
lk
)

566 
thªad
 *
cur
, *
√xt
;

567 
•l
;

569 
	`DEBUGASSERT
(
cur˝u
->
c_cuπhªad
 =
cuπhªad
);

570 
	`DEBUGASSERT
(
cuπhªad
->
t_˝u
 =
cur˝u
->
c_£lf
);

573 
•l
 = 
	`•lhigh
();

575 
cur
 = 
cuπhªad
;

581 i‡(
cur˝u
->
c_isidÀ
) {

582 
	`•lx
(
•l
);

587 
	`thªad_check°ack
(
cur
);

590 
	`•ölock_acquúe
(&
cur˝u
->
c_runqueue_lock
);

593 i‡(
√w°©e
 =
S_READY
 && 
	`thªadli°_i£m±y
(&
cur˝u
->
c_runqueue
)) {

594 
	`•ölock_ªÀa£
(&
cur˝u
->
c_runqueue_lock
);

595 
	`•lx
(
•l
);

600 
√w°©e
) {

601 
S_RUN
:

602 
	`∑nic
("Illegal S_RUN inÅhread_switch\n");

603 
S_READY
:

604 
	`thªad_make_ru¬abÀ
(
cur
, 
åue
 );

606 
S_SLEEP
:

607 
cur
->
t_wch™_«me
 = 
wc
->
wc_«me
;

616 
	`thªadli°_addèû
(&
wc
->
wc_thªads
, 
cur
);

617 
	`•ölock_ªÀa£
(
lk
);

619 
S_ZOMBIE
:

620 
cur
->
t_wch™_«me
 = "ZOMBIE";

621 
	`thªadli°_addèû
(&
cur˝u
->
c_zombõs
, 
cur
);

624 
cur
->
t_°©e
 = 
√w°©e
;

644 
cur˝u
->
c_isidÀ
 = 
åue
;

646 
√xt
 = 
	`thªadli°_ªmhód
(&
cur˝u
->
c_runqueue
);

647 i‡(
√xt
 =
NULL
) {

648 
	`•ölock_ªÀa£
(&
cur˝u
->
c_runqueue_lock
);

649 
	`˝u_idÀ
();

650 
	`•ölock_acquúe
(&
cur˝u
->
c_runqueue_lock
);

652 } 
√xt
 =
NULL
);

653 
cur˝u
->
c_isidÀ
 = 
Ál£
;

662 
cur˝u
->
c_cuπhªad
 = 
√xt
;

663 
cuπhªad
 = 
√xt
;

666 
	`swôch‰ame_swôch
(&
cur
->
t_c⁄ãxt
, &
√xt
->t_context);

716 
cur
->
t_wch™_«me
 = 
NULL
;

717 
cur
->
t_°©e
 = 
S_RUN
;

720 
	`•ölock_ªÀa£
(&
cur˝u
->
c_runqueue_lock
);

723 
	`as_a˘iv©e
();

726 
	`ex‹ci£
();

729 
	`•lx
(
•l
);

730 
	}
}

741 
thªad_°¨tup
((*
íåypoöt
)(*
d©a1
, 
d©a2
),

742 *
d©a1
, 
d©a2
)

744 
thªad
 *
cur
;

746 
cur
 = 
cuπhªad
;

749 
cur
->
t_wch™_«me
 = 
NULL
;

750 
cur
->
t_°©e
 = 
S_RUN
;

753 
	`•ölock_ªÀa£
(&
cur˝u
->
c_runqueue_lock
);

756 
	`as_a˘iv©e
();

759 
	`ex‹ci£
();

762 
	`•l0
();

764 #i‡
OPT_SYNCHPROBS


767 
i
, 
n
;

768 
n
 = 
	`øndom
()%161 +Ñandom()%161;

769 
i
=0; i<
n
; i++) {

770 
	`thªad_yõld
();

776 
	`íåypoöt
(
d©a1
, 
d©a2
);

779 
	`thªad_exô
();

780 
	}
}

792 
	$thªad_exô
()

794 
thªad
 *
cur
;

796 
cur
 = 
cuπhªad
;

805 if(
cur
->
t_¥oc
!=
NULL
)
	`¥oc_ªmthªad
(cur);

809 
	`KASSERT
(
cur
->
t_¥oc
 =
NULL
);

812 
	`thªad_check°ack
(
cur
);

814 
	`•lhigh
();

815 
	`thªad_swôch
(
S_ZOMBIE
, 
NULL
, NULL);

816 
	`∑nic
("braaaaaaaiiiiiiiiiiinssssss\n");

817 
	}
}

823 
	$thªad_yõld
()

825 
	`thªad_swôch
(
S_READY
, 
NULL
, NULL);

826 
	}
}

838 
	$scheduÀ
()

844 
	}
}

864 
	$thªad_c⁄sidî_migøti⁄
()

866 
my_cou¡
, 
tŸÆ_cou¡
, 
⁄e_sh¨e
, 
to_£nd
;

867 
i
, 
num˝us
;

868 
˝u
 *
c
;

869 
thªadli°
 
vi˘ims
;

870 
thªad
 *
t
;

872 
my_cou¡
 = 
tŸÆ_cou¡
 = 0;

873 
num˝us
 = 
	`˝u¨øy_num
(&
Æl˝us
);

874 
i
=0; i<
num˝us
; i++) {

875 
c
 = 
	`˝u¨øy_gë
(&
Æl˝us
, 
i
);

876 
	`•ölock_acquúe
(&
c
->
c_runqueue_lock
);

877 
tŸÆ_cou¡
 +
c
->
c_runqueue
.
é_cou¡
;

878 i‡(
c
 =
cur˝u
->
c_£lf
) {

879 
my_cou¡
 = 
c
->
c_runqueue
.
é_cou¡
;

881 
	`•ölock_ªÀa£
(&
c
->
c_runqueue_lock
);

884 
⁄e_sh¨e
 = 
	`DIVROUNDUP
(
tŸÆ_cou¡
, 
num˝us
);

885 i‡(
my_cou¡
 < 
⁄e_sh¨e
) {

889 
to_£nd
 = 
my_cou¡
 - 
⁄e_sh¨e
;

890 
	`thªadli°_öô
(&
vi˘ims
);

891 
	`•ölock_acquúe
(&
cur˝u
->
c_runqueue_lock
);

892 
i
=0; i<
to_£nd
; i++) {

893 
t
 = 
	`thªadli°_ªmèû
(&
cur˝u
->
c_runqueue
);

894 
	`thªadli°_addhód
(&
vi˘ims
, 
t
);

896 
	`•ölock_ªÀa£
(&
cur˝u
->
c_runqueue_lock
);

898 
i
=0; i < 
num˝us
 && 
to_£nd
 > 0; i++) {

899 
c
 = 
	`˝u¨øy_gë
(&
Æl˝us
, 
i
);

900 i‡(
c
 =
cur˝u
->
c_£lf
) {

903 
	`•ölock_acquúe
(&
c
->
c_runqueue_lock
);

904 
c
->
c_runqueue
.
é_cou¡
 < 
⁄e_sh¨e
 && 
to_£nd
 > 0) {

905 
t
 = 
	`thªadli°_ªmhód
(&
vi˘ims
);

928 i‡(
t
 =
cuπhªad
) {

929 
	`thªadli°_addèû
(&
vi˘ims
, 
t
);

930 
to_£nd
--;

934 
t
->
t_˝u
 = 
c
;

935 
	`thªadli°_addèû
(&
c
->
c_runqueue
, 
t
);

936 
	`DEBUG
(
DB_THREADS
,

938 
t
->
t_«me
, 
cur˝u
->
c_numbî
, 
c
->c_number);

939 
to_£nd
--;

940 i‡(
c
->
c_isidÀ
) {

945 
	`ùi_£nd
(
c
, 
IPI_UNIDLE
);

948 
	`•ölock_ªÀa£
(&
c
->
c_runqueue_lock
);

956 i‡(!
	`thªadli°_i£m±y
(&
vi˘ims
)) {

957 
	`•ölock_acquúe
(&
cur˝u
->
c_runqueue_lock
);

958 (
t
 = 
	`thªadli°_ªmhód
(&
vi˘ims
)Ë!
NULL
) {

959 
	`thªadli°_addèû
(&
cur˝u
->
c_runqueue
, 
t
);

961 
	`•ölock_ªÀa£
(&
cur˝u
->
c_runqueue_lock
);

964 
	`KASSERT
(
	`thªadli°_i£m±y
(&
vi˘ims
));

965 
	`thªadli°_˛ónup
(&
vi˘ims
);

966 
	}
}

982 
wch™
 *

983 
	$wch™_¸óã
(c⁄° *
«me
)

985 
wch™
 *
wc
;

986 
ªsu…
;

988 
wc
 = 
	`kmÆloc
((*wc));

989 i‡(
wc
 =
NULL
) {

990  
NULL
;

992 
	`thªadli°_öô
(&
wc
->
wc_thªads
);

993 
wc
->
wc_«me
 = 
«me
;

996 
	`•ölock_acquúe
(&
Ælwch™s_lock
);

997 
ªsu…
 = 
	`wch™¨øy_add
(&
Ælwch™s
, 
wc
, &wc->
wc_ödex
);

998 
	`•ölock_ªÀa£
(&
Ælwch™s_lock
);

999 i‡(
ªsu…
) {

1000 
	`KASSERT
(
ªsu…
 =
ENOMEM
);

1001 
	`thªadli°_˛ónup
(&
wc
->
wc_thªads
);

1002 
	`k‰ì
(
wc
);

1003  
NULL
;

1006  
wc
;

1007 
	}
}

1014 
	$wch™_de°roy
(
wch™
 *
wc
)

1016 
num
;

1017 
wch™
 *
wc2
;

1020 
	`•ölock_acquúe
(&
Ælwch™s_lock
);

1021 
num
 = 
	`wch™¨øy_num
(&
Ælwch™s
);

1022 
	`KASSERT
(
	`wch™¨øy_gë
(&
Ælwch™s
, 
wc
->
wc_ödex
) == wc);

1023 i‡(
wc
->
wc_ödex
 < 
num
 - 1) {

1025 
wc2
 = 
	`wch™¨øy_gë
(&
Ælwch™s
, 
num
 - 1);

1026 
	`wch™¨øy_£t
(&
Ælwch™s
, 
wc
->
wc_ödex
, 
wc2
);

1027 
wc2
->
wc_ödex
 = 
wc
->wc_index;

1029 
	`wch™¨øy_£tsize
(&
Ælwch™s
, 
num
 - 1);

1030 
	`•ölock_ªÀa£
(&
Ælwch™s_lock
);

1032 
	`thªadli°_˛ónup
(&
wc
->
wc_thªads
);

1033 
	`k‰ì
(
wc
);

1034 
	}
}

1044 
	$wch™_¶ìp
(
wch™
 *
wc
, 
•ölock
 *
lk
)

1047 
	`KASSERT
(!
cuπhªad
->
t_ö_öãºu±
);

1050 
	`KASSERT
(
	`•ölock_do_i_hﬁd
(
lk
));

1053 
	`KASSERT
(
cur˝u
->
c_•ölocks
 == 1);

1055 
	`thªad_swôch
(
S_SLEEP
, 
wc
, 
lk
);

1056 
	`•ölock_acquúe
(
lk
);

1057 
	}
}

1063 
	$wch™_wake⁄e
(
wch™
 *
wc
, 
•ölock
 *
lk
)

1065 
thªad
 *
èrgë
;

1067 
	`KASSERT
(
	`•ölock_do_i_hﬁd
(
lk
));

1070 
èrgë
 = 
	`thªadli°_ªmhód
(&
wc
->
wc_thªads
);

1072 i‡(
èrgë
 =
NULL
) {

1085 
	`thªad_make_ru¬abÀ
(
èrgë
, 
Ál£
);

1086 
	}
}

1092 
	$wch™_wakóŒ
(
wch™
 *
wc
, 
•ölock
 *
lk
)

1094 
thªad
 *
èrgë
;

1095 
thªadli°
 
li°
;

1097 
	`KASSERT
(
	`•ölock_do_i_hﬁd
(
lk
));

1099 
	`thªadli°_öô
(&
li°
);

1105 (
èrgë
 = 
	`thªadli°_ªmhód
(&
wc
->
wc_thªads
)Ë!
NULL
) {

1106 
	`thªadli°_addèû
(&
li°
, 
èrgë
);

1114 (
èrgë
 = 
	`thªadli°_ªmhód
(&
li°
)Ë!
NULL
) {

1115 
	`thªad_make_ru¬abÀ
(
èrgë
, 
Ál£
);

1118 
	`thªadli°_˛ónup
(&
li°
);

1119 
	}
}

1125 
boﬁ


1126 
	$wch™_i£m±y
(
wch™
 *
wc
, 
•ölock
 *
lk
)

1128 
boﬁ
 
ªt
;

1130 
	`KASSERT
(
	`•ölock_do_i_hﬁd
(
lk
));

1131 
ªt
 = 
	`thªadli°_i£m±y
(&
wc
->
wc_thªads
);

1133  
ªt
;

1134 
	}
}

1146 
	$ùi_£nd
(
˝u
 *
èrgë
, 
code
)

1148 
	`KASSERT
(
code
 >= 0 && code < 32);

1150 
	`•ölock_acquúe
(&
èrgë
->
c_ùi_lock
);

1151 
èrgë
->
c_ùi_≥ndög
 |(
uöt32_t
)1 << 
code
;

1152 
	`maöbus_£nd_ùi
(
èrgë
);

1153 
	`•ölock_ªÀa£
(&
èrgë
->
c_ùi_lock
);

1154 
	}
}

1157 
	$ùi_brﬂdˇ°
(
code
)

1159 
i
;

1160 
˝u
 *
c
;

1162 
i
=0; i < 
	`˝u¨øy_num
(&
Æl˝us
); i++) {

1163 
c
 = 
	`˝u¨øy_gë
(&
Æl˝us
, 
i
);

1164 i‡(
c
 !
cur˝u
->
c_£lf
) {

1165 
	`ùi_£nd
(
c
, 
code
);

1168 
	}
}

1171 
	$ùi_ébshoŸdown
(
˝u
 *
èrgë
, c⁄° 
ébshoŸdown
 *
m≠pög
)

1173 
n
;

1175 
	`•ölock_acquúe
(&
èrgë
->
c_ùi_lock
);

1177 
n
 = 
èrgë
->
c_numshoŸdown
;

1178 i‡(
n
 =
TLBSHOOTDOWN_MAX
) {

1179 
èrgë
->
c_numshoŸdown
 = 
TLBSHOOTDOWN_ALL
;

1182 
èrgë
->
c_shoŸdown
[
n
] = *
m≠pög
;

1183 
èrgë
->
c_numshoŸdown
 = 
n
+1;

1186 
èrgë
->
c_ùi_≥ndög
 |(
uöt32_t
)1 << 
IPI_TLBSHOOTDOWN
;

1187 
	`maöbus_£nd_ùi
(
èrgë
);

1189 
	`•ölock_ªÀa£
(&
èrgë
->
c_ùi_lock
);

1190 
	}
}

1193 
	$öãΩro˚ss‹_öãºu±
()

1195 
uöt32_t
 
bôs
;

1196 
i
;

1198 
	`•ölock_acquúe
(&
cur˝u
->
c_ùi_lock
);

1199 
bôs
 = 
cur˝u
->
c_ùi_≥ndög
;

1201 i‡(
bôs
 & (1U << 
IPI_PANIC
)) {

1203 
	`•ölock_ªÀa£
(&
cur˝u
->
c_ùi_lock
);

1204 
	`˝u_hÆt
();

1206 i‡(
bôs
 & (1U << 
IPI_OFFLINE
)) {

1208 
	`•ölock_ªÀa£
(&
cur˝u
->
c_ùi_lock
);

1209 
	`•ölock_acquúe
(&
cur˝u
->
c_runqueue_lock
);

1210 i‡(!
cur˝u
->
c_isidÀ
) {

1211 
	`k¥ötf
("cpu%d: offline: warning:Çot idle\n",

1212 
cur˝u
->
c_numbî
);

1214 
	`•ölock_ªÀa£
(&
cur˝u
->
c_runqueue_lock
);

1215 
	`k¥ötf
("˝u%d: ofÊöe.\n", 
cur˝u
->
c_numbî
);

1216 
	`˝u_hÆt
();

1218 i‡(
bôs
 & (1U << 
IPI_UNIDLE
)) {

1224 i‡(
bôs
 & (1U << 
IPI_TLBSHOOTDOWN
)) {

1225 i‡(
cur˝u
->
c_numshoŸdown
 =
TLBSHOOTDOWN_ALL
) {

1226 
	`vm_ébshoŸdown_Æl
();

1229 
i
=0; i<
cur˝u
->
c_numshoŸdown
; i++) {

1230 
	`vm_ébshoŸdown
(&
cur˝u
->
c_shoŸdown
[
i
]);

1233 
cur˝u
->
c_numshoŸdown
 = 0;

1236 
cur˝u
->
c_ùi_≥ndög
 = 0;

1237 
	`•ölock_ªÀa£
(&
cur˝u
->
c_ùi_lock
);

1238 
	}
}

	@thread/threadlist.c

34 
	~<ty≥s.h
>

35 
	~<lib.h
>

36 
	~<thªad.h
>

37 
	~<thªadli°.h
>

40 
	$thªadli°node_öô
(
thªadli°node
 *
én
, 
thªad
 *
t
)

42 
	`DEBUGASSERT
(
én
 !
NULL
);

43 
	`KASSERT
(
t
 !
NULL
);

45 
én
->
én_√xt
 = 
NULL
;

46 
én
->
én_¥ev
 = 
NULL
;

47 
én
->
én_£lf
 = 
t
;

48 
	}
}

51 
	$thªadli°node_˛ónup
(
thªadli°node
 *
én
)

53 
	`DEBUGASSERT
(
én
 !
NULL
);

55 
	`KASSERT
(
én
->
én_√xt
 =
NULL
);

56 
	`KASSERT
(
én
->
én_¥ev
 =
NULL
);

57 
	`KASSERT
(
én
->
én_£lf
 !
NULL
);

58 
	}
}

61 
	$thªadli°_öô
(
thªadli°
 *
é
)

63 
	`DEBUGASSERT
(
é
 !
NULL
);

65 
é
->
é_hód
.
én_√xt
 = &é->
é_èû
;

66 
é
->
é_hód
.
én_¥ev
 = 
NULL
;

67 
é
->
é_èû
.
én_√xt
 = 
NULL
;

68 
é
->
é_èû
.
én_¥ev
 = &é->
é_hód
;

69 
é
->
é_hód
.
én_£lf
 = 
NULL
;

70 
é
->
é_èû
.
én_£lf
 = 
NULL
;

71 
é
->
é_cou¡
 = 0;

72 
	}
}

75 
	$thªadli°_˛ónup
(
thªadli°
 *
é
)

77 
	`DEBUGASSERT
(
é
 !
NULL
);

78 
	`DEBUGASSERT
(
é
->
é_hód
.
én_√xt
 =&é->
é_èû
);

79 
	`DEBUGASSERT
(
é
->
é_hód
.
én_¥ev
 =
NULL
);

80 
	`DEBUGASSERT
(
é
->
é_èû
.
én_√xt
 =
NULL
);

81 
	`DEBUGASSERT
(
é
->
é_èû
.
én_¥ev
 =&é->
é_hód
);

82 
	`DEBUGASSERT
(
é
->
é_hód
.
én_£lf
 =
NULL
);

83 
	`DEBUGASSERT
(
é
->
é_èû
.
én_£lf
 =
NULL
);

85 
	`KASSERT
(
	`thªadli°_i£m±y
(
é
));

86 
	`KASSERT
(
é
->
é_cou¡
 == 0);

89 
	}
}

91 
boﬁ


92 
	$thªadli°_i£m±y
(
thªadli°
 *
é
)

94 
	`DEBUGASSERT
(
é
 !
NULL
);

96  (
é
->
é_cou¡
 == 0);

97 
	}
}

107 
	$thªadli°_ö£πa·înode
(
thªadli°node
 *
⁄li°
, 
thªad
 *
t
)

109 
thªadli°node
 *
addì
;

111 
addì
 = &
t
->
t_li°node
;

113 
	`DEBUGASSERT
(
addì
->
én_¥ev
 =
NULL
);

114 
	`DEBUGASSERT
(
addì
->
én_√xt
 =
NULL
);

116 
addì
->
én_¥ev
 = 
⁄li°
;

117 
addì
->
én_√xt
 = 
⁄li°
->tln_next;

118 
addì
->
én_¥ev
->
én_√xt
 =áddee;

119 
addì
->
én_√xt
->
én_¥ev
 =áddee;

120 
	}
}

127 
	$thªadli°_ö£πbef‹íode
(
thªad
 *
t
, 
thªadli°node
 *
⁄li°
)

129 
thªadli°node
 *
addì
;

131 
addì
 = &
t
->
t_li°node
;

133 
	`DEBUGASSERT
(
addì
->
én_¥ev
 =
NULL
);

134 
	`DEBUGASSERT
(
addì
->
én_√xt
 =
NULL
);

136 
addì
->
én_¥ev
 = 
⁄li°
->tln_prev;

137 
addì
->
én_√xt
 = 
⁄li°
;

138 
addì
->
én_¥ev
->
én_√xt
 =áddee;

139 
addì
->
én_√xt
->
én_¥ev
 =áddee;

140 
	}
}

147 
	$thªadli°_ªmovíode
(
thªadli°node
 *
én
)

149 
	`DEBUGASSERT
(
én
 !
NULL
);

150 
	`DEBUGASSERT
(
én
->
én_¥ev
 !
NULL
);

151 
	`DEBUGASSERT
(
én
->
én_√xt
 !
NULL
);

153 
én
->
én_¥ev
->
én_√xt
 =Åln->tln_next;

154 
én
->
én_√xt
->
én_¥ev
 =Åln->tln_prev;

155 
én
->
én_¥ev
 = 
NULL
;

156 
én
->
én_√xt
 = 
NULL
;

157 
	}
}

163 
	$thªadli°_addhód
(
thªadli°
 *
é
, 
thªad
 *
t
)

165 
	`DEBUGASSERT
(
é
 !
NULL
);

166 
	`DEBUGASSERT
(
t
 !
NULL
);

168 
	`thªadli°_ö£πa·înode
(&
é
->
é_hód
, 
t
);

169 
é
->
é_cou¡
++;

170 
	}
}

173 
	$thªadli°_addèû
(
thªadli°
 *
é
, 
thªad
 *
t
)

175 
	`DEBUGASSERT
(
é
 !
NULL
);

176 
	`DEBUGASSERT
(
t
 !
NULL
);

178 
	`thªadli°_ö£πbef‹íode
(
t
, &
é
->
é_èû
);

179 
é
->
é_cou¡
++;

180 
	}
}

182 
thªad
 *

183 
	$thªadli°_ªmhód
(
thªadli°
 *
é
)

185 
thªadli°node
 *
én
;

187 
	`DEBUGASSERT
(
é
 !
NULL
);

189 
én
 = 
é
->
é_hód
.
én_√xt
;

190 i‡(
én
->
én_√xt
 =
NULL
) {

192  
NULL
;

194 
	`thªadli°_ªmovíode
(
én
);

195 
	`DEBUGASSERT
(
é
->
é_cou¡
 > 0);

196 
é
->
é_cou¡
--;

197  
én
->
én_£lf
;

198 
	}
}

200 
thªad
 *

201 
	$thªadli°_ªmèû
(
thªadli°
 *
é
)

203 
thªadli°node
 *
én
;

205 
	`DEBUGASSERT
(
é
 !
NULL
);

207 
én
 = 
é
->
é_èû
.
én_¥ev
;

208 i‡(
én
->
én_¥ev
 =
NULL
) {

210  
NULL
;

212 
	`thªadli°_ªmovíode
(
én
);

213 
	`DEBUGASSERT
(
é
->
é_cou¡
 > 0);

214 
é
->
é_cou¡
--;

215  
én
->
én_£lf
;

216 
	}
}

219 
	$thªadli°_ö£πa·î
(
thªadli°
 *
é
,

220 
thªad
 *
⁄li°
, thªad *
addì
)

222 
	`thªadli°_ö£πa·înode
(&
⁄li°
->
t_li°node
, 
addì
);

223 
é
->
é_cou¡
++;

224 
	}
}

227 
	$thªadli°_ö£πbef‹e
(
thªadli°
 *
é
,

228 
thªad
 *
addì
, thªad *
⁄li°
)

230 
	`thªadli°_ö£πbef‹íode
(
addì
, &
⁄li°
->
t_li°node
);

231 
é
->
é_cou¡
++;

232 
	}
}

235 
	$thªadli°_ªmove
(
thªadli°
 *
é
, 
thªad
 *
t
)

237 
	`thªadli°_ªmovíode
(&
t
->
t_li°node
);

238 
	`DEBUGASSERT
(
é
->
é_cou¡
 > 0);

239 
é
->
é_cou¡
--;

240 
	}
}

	@vfs/device.c

36 
	~<ty≥s.h
>

37 
	~<kîn/î∫o.h
>

38 
	~<kîn/f˙é.h
>

39 
	~<°©.h
>

40 
	~<lib.h
>

41 
	~<uio.h
>

42 
	~<synch.h
>

43 
	~<vnode.h
>

44 
	~<devi˚.h
>

53 
	$dev_óch›í
(
vnode
 *
v
, 
Êags
)

55 
devi˚
 *
d
 = 
v
->
vn_d©a
;

57 i‡(
Êags
 & (
O_CREAT
 | 
O_TRUNC
 | 
O_EXCL
 | 
O_APPEND
)) {

58  
EINVAL
;

61  
	`DEVOP_EACHOPEN
(
d
, 
Êags
);

62 
	}
}

70 
	$dev_ª˛aim
(
vnode
 *
v
)

72 ()
v
;

75 
	}
}

86 
	$dev_åy£ek
(
devi˚
 *
d
, 
off_t
 
pos
)

88 i‡(
d
->
d_blocks
 > 0) {

89 i‡((
pos
 % 
d
->
d_blocksize
)!=0) {

91  
EINVAL
;

93 i‡(
pos
 / 
d
->
d_blocksize
 >d->
d_blocks
) {

95  
EINVAL
;

102 
	}
}

109 
	$dev_ªad
(
vnode
 *
v
, 
uio
 *uio)

111 
devi˚
 *
d
 = 
v
->
vn_d©a
;

112 
ªsu…
;

114 
ªsu…
 = 
	`dev_åy£ek
(
d
, 
uio
->
uio_off£t
);

115 i‡(
ªsu…
) {

116  
ªsu…
;

119 
	`KASSERT
(
uio
->
uio_rw
 =
UIO_READ
);

120  
	`DEVOP_IO
(
d
, 
uio
);

121 
	}
}

128 
	$dev_wrôe
(
vnode
 *
v
, 
uio
 *uio)

130 
devi˚
 *
d
 = 
v
->
vn_d©a
;

131 
ªsu…
;

133 
ªsu…
 = 
	`dev_åy£ek
(
d
, 
uio
->
uio_off£t
);

134 i‡(
ªsu…
) {

135  
ªsu…
;

138 
	`KASSERT
(
uio
->
uio_rw
 =
UIO_WRITE
);

139  
	`DEVOP_IO
(
d
, 
uio
);

140 
	}
}

147 
	$dev_io˘l
(
vnode
 *
v
, 
›
, 
u£Ωå_t
 
d©a
)

149 
devi˚
 *
d
 = 
v
->
vn_d©a
;

150  
	`DEVOP_IOCTL
(
d
, 
›
, 
d©a
);

151 
	}
}

160 
	$dev_°©
(
vnode
 *
v
, 
°©
 *
°©buf
)

162 
devi˚
 *
d
 = 
v
->
vn_d©a
;

163 
ªsu…
;

165 
	`bzîo
(
°©buf
, (
°©
));

167 i‡(
d
->
d_blocks
 > 0) {

168 
°©buf
->
°_size
 = 
d
->
d_blocks
 * d->
d_blocksize
;

169 
°©buf
->
°_blksize
 = 
d
->
d_blocksize
;

172 
°©buf
->
°_size
 = 0;

175 
ªsu…
 = 
	`VOP_GETTYPE
(
v
, &
°©buf
->
°_mode
);

176 i‡(
ªsu…
) {

177  
ªsu…
;

180 
°©buf
->
°_mode
 |= 0600;

182 
°©buf
->
°_∆ök
 = 1;

183 
°©buf
->
°_blocks
 = 
d
->
d_blocks
;

186 
°©buf
->
°_dev
 = 0;

189 
°©buf
->
°_rdev
 = 
d
->
d_devnumbî
;

192 
	}
}

201 
	$dev_gëty≥
(
vnode
 *
v
, 
mode_t
 *
ªt
)

203 
devi˚
 *
d
 = 
v
->
vn_d©a
;

204 i‡(
d
->
d_blocks
 > 0) {

205 *
ªt
 = 
S_IFBLK
;

208 *
ªt
 = 
S_IFCHR
;

211 
	}
}

217 
boﬁ


218 
	$dev_is£ekabÀ
(
vnode
 *
v
)

220 
devi˚
 *
d
 = 
v
->
vn_d©a
;

222 i‡(
d
->
d_blocks
 == 0) {

223  
Ál£
;

225  
åue
;

226 
	}
}

233 
	$nuŒ_fsync
(
vnode
 *
v
)

235 ()
v
;

237 
	}
}

245 
	$dev_mm≠
(
vnode
 *
v
 )

247 ()
v
;

248  
ENOSYS
;

249 
	}
}

256 
	$dev_åunˇã
(
vnode
 *
v
, 
off_t
 
Àn
)

258 
devi˚
 *
d
 = 
v
->
vn_d©a
;

263 i‡(
d
->
d_blocks
 > 0 && (
off_t
)(d->d_blocks*d->
d_blocksize
Ë=
Àn
) {

267  
EINVAL
;

268 
	}
}

278 
	$dev_«mefûe
(
vnode
 *
v
, 
uio
 *uio)

286 ()
v
;

287 ()
uio
;

290 
	}
}

306 
	$dev_lookup
(
vnode
 *
dú
,

307 *
∑th«me
, 
vnode
 **
ªsu…
)

314 i‡(
	`°æí
(
∑th«me
)>0) {

315  
ENOENT
;

317 
	`VOP_INCREF
(
dú
);

318 *
ªsu…
 = 
dú
;

320 
	}
}

325 c⁄° 
vnode_›s
 
	gdev_vnode_›s
 = {

326 .
v›_magic
 = 
VOP_MAGIC
,

328 .
	gv›_óch›í
 = 
dev_óch›í
,

329 .
	gv›_ª˛aim
 = 
dev_ª˛aim
,

330 .
	gv›_ªad
 = 
dev_ªad
,

331 .
	gv›_ªadlök
 = 
v›Áû_uio_övÆ
,

332 .
	gv›_gëdúíåy
 = 
v›Áû_uio_nŸdú
,

333 .
	gv›_wrôe
 = 
dev_wrôe
,

334 .
	gv›_io˘l
 = 
dev_io˘l
,

335 .
	gv›_°©
 = 
dev_°©
,

336 .
	gv›_gëty≥
 = 
dev_gëty≥
,

337 .
	gv›_is£ekabÀ
 = 
dev_is£ekabÀ
,

338 .
	gv›_fsync
 = 
nuŒ_fsync
,

339 .
	gv›_mm≠
 = 
dev_mm≠
,

340 .
	gv›_åunˇã
 = 
dev_åunˇã
,

341 .
	gv›_«mefûe
 = 
dev_«mefûe
,

342 .
	gv›_¸ót
 = 
v›Áû_¸ót_nŸdú
,

343 .
	gv›_symlök
 = 
v›Áû_symlök_nŸdú
,

344 .
	gv›_mkdú
 = 
v›Áû_mkdú_nŸdú
,

345 .
	gv›_lök
 = 
v›Áû_lök_nŸdú
,

346 .
	gv›_ªmove
 = 
v›Áû_°rög_nŸdú
,

347 .
	gv›_rmdú
 = 
v›Áû_°rög_nŸdú
,

348 .
	gv›_ª«me
 = 
v›Áû_ª«me_nŸdú
,

349 .
	gv›_lookup
 = 
dev_lookup
,

350 .
	gv›_look∑ª¡
 = 
v›Áû_look∑ª¡_nŸdú
,

356 
vnode
 *

357 
	$dev_¸óã_vnode
(
devi˚
 *
dev
)

359 
ªsu…
;

360 
vnode
 *
v
;

362 
v
 = 
	`kmÆloc
((
vnode
));

363 i‡(
v
==
NULL
) {

364  
NULL
;

367 
ªsu…
 = 
	`vnode_öô
(
v
, &
dev_vnode_›s
, 
NULL
, 
dev
);

368 i‡(
ªsu…
 != 0) {

369 
	`∑nic
("While creating vnode for device: vnode_init: %s\n",

370 
	`°ªº‹
(
ªsu…
));

373  
v
;

374 
	}
}

	@vfs/devnull.c

34 
	~<ty≥s.h
>

35 
	~<kîn/î∫o.h
>

36 
	~<lib.h
>

37 
	~<uio.h
>

38 
	~<vfs.h
>

39 
	~<devi˚.h
>

44 
	$nuŒ›í
(
devi˚
 *
dev
, 
›íÊags
)

46 ()
dev
;

47 ()
›íÊags
;

50 
	}
}

55 
	$nuŒio
(
devi˚
 *
dev
, 
uio
 *uio)

66 ()
dev
;

68 i‡(
uio
->
uio_rw
 =
UIO_WRITE
) {

69 
uio
->
uio_ªsid
 = 0;

73 
	}
}

78 
	$nuŒio˘l
(
devi˚
 *
dev
, 
›
, 
u£Ωå_t
 
d©a
)

84 ()
dev
;

85 ()
›
;

86 ()
d©a
;

88  
EINVAL
;

89 
	}
}

91 c⁄° 
devi˚_›s
 
	gnuŒ_dev›s
 = {

92 .
dev›_óch›í
 = 
nuŒ›í
,

93 .
	gdev›_io
 = 
nuŒio
,

94 .
	gdev›_io˘l
 = 
nuŒio˘l
,

101 
	$devnuŒ_¸óã
()

103 
ªsu…
;

104 
devi˚
 *
dev
;

106 
dev
 = 
	`kmÆloc
((*dev));

107 i‡(
dev
==
NULL
) {

108 
	`∑nic
("CouldÇotáddÇull device: out of memory\n");

111 
dev
->
d_›s
 = &
nuŒ_dev›s
;

113 
dev
->
d_blocks
 = 0;

114 
dev
->
d_blocksize
 = 1;

116 
dev
->
d_devnumbî
 = 0;

118 
dev
->
d_d©a
 = 
NULL
;

120 
ªsu…
 = 
	`vfs_adddev
("nuŒ", 
dev
, 0);

121 i‡(
ªsu…
) {

122 
	`∑nic
("CouldÇŸáddÇuŒ devi˚: %s\n", 
	`°ªº‹
(
ªsu…
));

124 
	}
}

	@vfs/vfscwd.c

34 
	~<ty≥s.h
>

35 
	~<kîn/î∫o.h
>

36 
	~<°©.h
>

37 
	~<lib.h
>

38 
	~<uio.h
>

39 
	~<¥oc.h
>

40 
	~<cuºít.h
>

41 
	~<vfs.h
>

42 
	~<fs.h
>

43 
	~<vnode.h
>

49 
	$vfs_gëcurdú
(
vnode
 **
ªt
)

51 
rv
 = 0;

53 
	`•ölock_acquúe
(&
cuΩroc
->
p_lock
);

54 i‡(
cuΩroc
->
p_cwd
!=
NULL
) {

55 
	`VOP_INCREF
(
cuΩroc
->
p_cwd
);

56 *
ªt
 = 
cuΩroc
->
p_cwd
;

59 
rv
 = 
ENOENT
;

61 
	`•ölock_ªÀa£
(&
cuΩroc
->
p_lock
);

63  
rv
;

64 
	}
}

71 
	$vfs_£tcurdú
(
vnode
 *
dú
)

73 
vnode
 *
ﬁd
;

74 
mode_t
 
vty≥
;

75 
ªsu…
;

77 
ªsu…
 = 
	`VOP_GETTYPE
(
dú
, &
vty≥
);

78 i‡(
ªsu…
) {

79  
ªsu…
;

81 i‡(
vty≥
 !
S_IFDIR
) {

82  
ENOTDIR
;

85 
	`VOP_INCREF
(
dú
);

87 
	`•ölock_acquúe
(&
cuΩroc
->
p_lock
);

88 
ﬁd
 = 
cuΩroc
->
p_cwd
;

89 
cuΩroc
->
p_cwd
 = 
dú
;

90 
	`•ölock_ªÀa£
(&
cuΩroc
->
p_lock
);

92 i‡(
ﬁd
!=
NULL
) {

93 
	`VOP_DECREF
(
ﬁd
);

97 
	}
}

103 
	$vfs_˛órcurdú
()

105 
vnode
 *
ﬁd
;

107 
	`•ölock_acquúe
(&
cuΩroc
->
p_lock
);

108 
ﬁd
 = 
cuΩroc
->
p_cwd
;

109 
cuΩroc
->
p_cwd
 = 
NULL
;

110 
	`•ölock_ªÀa£
(&
cuΩroc
->
p_lock
);

112 i‡(
ﬁd
!=
NULL
) {

113 
	`VOP_DECREF
(
ﬁd
);

117 
	}
}

124 
	$vfs_chdú
(*
∑th
)

126 
vnode
 *
vn
;

127 
ªsu…
;

129 
ªsu…
 = 
	`vfs_lookup
(
∑th
, &
vn
);

130 i‡(
ªsu…
) {

131  
ªsu…
;

133 
ªsu…
 = 
	`vfs_£tcurdú
(
vn
);

134 
	`VOP_DECREF
(
vn
);

135  
ªsu…
;

136 
	}
}

144 
	$vfs_gëcwd
(
uio
 *uio)

146 
vnode
 *
cwd
;

147 
ªsu…
;

148 c⁄° *
«me
;

149 
cﬁ⁄
=':';

151 
	`KASSERT
(
uio
->
uio_rw
==
UIO_READ
);

153 
ªsu…
 = 
	`vfs_gëcurdú
(&
cwd
);

154 i‡(
ªsu…
) {

155  
ªsu…
;

159 
	`KASSERT
(
cwd
->
vn_fs
 !
NULL
);

161 
«me
 = 
	`FSOP_GETVOLNAME
(
cwd
->
vn_fs
);

162 i‡(
«me
==
NULL
) {

163 
	`vfs_biglock_acquúe
();

164 
«me
 = 
	`vfs_gëdev«me
(
cwd
->
vn_fs
);

165 
	`vfs_biglock_ªÀa£
();

167 
	`KASSERT
(
«me
 !
NULL
);

169 
ªsu…
 = 
	`uiomove
((*)
«me
, 
	`°æí
“ame), 
uio
);

170 i‡(
ªsu…
) {

171 
out
;

173 
ªsu…
 = 
	`uiomove
(&
cﬁ⁄
, 1, 
uio
);

174 i‡(
ªsu…
) {

175 
out
;

178 
ªsu…
 = 
	`VOP_NAMEFILE
(
cwd
, 
uio
);

180 
out
:

182 
	`VOP_DECREF
(
cwd
);

183  
ªsu…
;

184 
	}
}

	@vfs/vfsfail.c

30 
	~<ty≥s.h
>

31 
	~<kîn/î∫o.h
>

32 
	~<vnode.h
>

51 
	$v›Áû_uio_nŸdú
(
vnode
 *
vn
, 
uio
 *uio)

53 ()
vn
;

54 ()
uio
;

55  
ENOTDIR
;

56 
	}
}

59 
	$v›Áû_uio_isdú
(
vnode
 *
vn
, 
uio
 *uio)

61 ()
vn
;

62 ()
uio
;

63  
EISDIR
;

64 
	}
}

67 
	$v›Áû_uio_övÆ
(
vnode
 *
vn
, 
uio
 *uio)

69 ()
vn
;

70 ()
uio
;

71  
EINVAL
;

72 
	}
}

75 
	$v›Áû_uio_nosys
(
vnode
 *
vn
, 
uio
 *uio)

77 ()
vn
;

78 ()
uio
;

79  
ENOSYS
;

80 
	}
}

86 
	$v›Áû_mm≠_isdú
(
vnode
 *
vn
 )

88 ()
vn
;

89  
EISDIR
;

90 
	}
}

93 
	$v›Áû_mm≠_≥rm
(
vnode
 *
vn
 )

95 ()
vn
;

96  
EPERM
;

97 
	}
}

100 
	$v›Áû_mm≠_nosys
(
vnode
 *
vn
 )

102 ()
vn
;

103  
ENOSYS
;

104 
	}
}

110 
	$v›Áû_åunˇã_isdú
(
vnode
 *
vn
, 
off_t
 
pos
)

112 ()
vn
;

113 ()
pos
;

114  
EISDIR
;

115 
	}
}

121 
	$v›Áû_¸ót_nŸdú
(
vnode
 *
vn
, c⁄° *
«me
, 
boﬁ
 
ex˛
,

122 
mode_t
 
mode
, 
vnode
 **
ªsu…
)

124 ()
vn
;

125 ()
«me
;

126 ()
ex˛
;

127 ()
mode
;

128 ()
ªsu…
;

129  
ENOTDIR
;

130 
	}
}

136 
	$v›Áû_symlök_nŸdú
(
vnode
 *
vn
, c⁄° *
c⁄ã¡s
,

137 c⁄° *
«me
)

139 ()
vn
;

140 ()
c⁄ã¡s
;

141 ()
«me
;

142  
ENOTDIR
;

143 
	}
}

146 
	$v›Áû_symlök_nosys
(
vnode
 *
vn
, c⁄° *
c⁄ã¡s
,

147 c⁄° *
«me
)

149 ()
vn
;

150 ()
c⁄ã¡s
;

151 ()
«me
;

152  
ENOSYS
;

153 
	}
}

159 
	$v›Áû_mkdú_nŸdú
(
vnode
 *
vn
, c⁄° *
«me
, 
mode_t
 
mode
)

161 ()
vn
;

162 ()
«me
;

163 ()
mode
;

164  
ENOTDIR
;

165 
	}
}

168 
	$v›Áû_mkdú_nosys
(
vnode
 *
vn
, c⁄° *
«me
, 
mode_t
 
mode
)

170 ()
vn
;

171 ()
«me
;

172 ()
mode
;

173  
ENOSYS
;

174 
	}
}

180 
	$v›Áû_lök_nŸdú
(
vnode
 *
dú
, c⁄° *
«me
, vnodê*
fûe
)

182 ()
dú
;

183 ()
«me
;

184 ()
fûe
;

185  
ENOTDIR
;

186 
	}
}

189 
	$v›Áû_lök_nosys
(
vnode
 *
dú
, c⁄° *
«me
, vnodê*
fûe
)

191 ()
dú
;

192 ()
«me
;

193 ()
fûe
;

194  
ENOSYS
;

195 
	}
}

201 
	$v›Áû_°rög_nŸdú
(
vnode
 *
vn
, c⁄° *
«me
)

203 ()
vn
;

204 ()
«me
;

205  
ENOTDIR
;

206 
	}
}

209 
	$v›Áû_°rög_nosys
(
vnode
 *
vn
, c⁄° *
«me
)

211 ()
vn
;

212 ()
«me
;

213  
ENOSYS
;

214 
	}
}

220 
	$v›Áû_ª«me_nŸdú
(
vnode
 *
‰omdú
, c⁄° *
‰om«me
,

221 
vnode
 *
todú
, c⁄° *
t⁄ame
)

223 ()
‰omdú
;

224 ()
‰om«me
;

225 ()
todú
;

226 ()
t⁄ame
;

227  
ENOTDIR
;

228 
	}
}

231 
	$v›Áû_ª«me_nosys
(
vnode
 *
‰omdú
, c⁄° *
‰om«me
,

232 
vnode
 *
todú
, c⁄° *
t⁄ame
)

234 ()
‰omdú
;

235 ()
‰om«me
;

236 ()
todú
;

237 ()
t⁄ame
;

238  
ENOSYS
;

239 
	}
}

245 
	$v›Áû_lookup_nŸdú
(
vnode
 *
vn
, *
∑th
, vnodê**
ªsu…
)

247 ()
vn
;

248 ()
∑th
;

249 ()
ªsu…
;

250  
ENOTDIR
;

251 
	}
}

254 
	$v›Áû_look∑ª¡_nŸdú
(
vnode
 *
vn
, *
∑th
, vnodê**
ªsu…
,

255 *
buf
, 
size_t
 
Àn
)

257 ()
vn
;

258 ()
∑th
;

259 ()
ªsu…
;

260 ()
buf
;

261 ()
Àn
;

262  
ENOTDIR
;

263 
	}
}

	@vfs/vfslist.c

35 
	#VFSINLINE


	)

37 
	~<ty≥s.h
>

38 
	~<kîn/î∫o.h
>

39 
	~<lib.h
>

40 
	~<¨øy.h
>

41 
	~<synch.h
>

42 
	~<vfs.h
>

43 
	~<fs.h
>

44 
	~<vnode.h
>

45 
	~<devi˚.h
>

77 
	sknowndev
 {

78 *
	mkd_«me
;

79 *
	mkd_øw«me
;

80 
devi˚
 *
	mkd_devi˚
;

81 
vnode
 *
	mkd_vnode
;

82 
fs
 *
	mkd_fs
;

85 
DECLARRAY
(
knowndev
, 
__UNUSED
 
ölöe
);

86 
DEFARRAY
(
knowndev
, 
__UNUSED
 
ölöe
);

88 
knowndev¨øy
 *
	gknowndevs
;

91 
lock
 *
	gvfs_biglock
;

92 
	gvfs_biglock_dïth
;

99 
	$vfs_boŸ°øp
()

101 
knowndevs
 = 
	`knowndev¨øy_¸óã
();

102 i‡(
knowndevs
==
NULL
) {

103 
	`∑nic
("vfs: CouldÇot create knowndevsárray\n");

106 
vfs_biglock
 = 
	`lock_¸óã
("vfs_biglock");

107 i‡(
vfs_biglock
==
NULL
) {

108 
	`∑nic
("vfs: CouldÇot create vfs bigÜock\n");

110 
vfs_biglock_dïth
 = 0;

112 
	`devnuŒ_¸óã
();

113 
	`£mfs_boŸ°øp
();

114 
	}
}

124 
	$vfs_biglock_acquúe
()

126 i‡(!
	`lock_do_i_hﬁd
(
vfs_biglock
)) {

127 
	`lock_acquúe
(
vfs_biglock
);

129 
vfs_biglock_dïth
++;

130 
	}
}

133 
	$vfs_biglock_ªÀa£
()

135 
	`KASSERT
(
	`lock_do_i_hﬁd
(
vfs_biglock
));

136 
	`KASSERT
(
vfs_biglock_dïth
 > 0);

137 
vfs_biglock_dïth
--;

138 i‡(
vfs_biglock_dïth
 == 0) {

139 
	`lock_ªÀa£
(
vfs_biglock
);

141 
	}
}

143 
boﬁ


144 
	$vfs_biglock_do_i_hﬁd
()

146  
	`lock_do_i_hﬁd
(
vfs_biglock
);

147 
	}
}

153 
	$vfs_sync
()

155 
knowndev
 *
dev
;

156 
i
, 
num
;

158 
	`vfs_biglock_acquúe
();

160 
num
 = 
	`knowndev¨øy_num
(
knowndevs
);

161 
i
=0; i<
num
; i++) {

162 
dev
 = 
	`knowndev¨øy_gë
(
knowndevs
, 
i
);

163 i‡(
dev
->
kd_fs
 !
NULL
) {

164  
	`FSOP_SYNC
(
dev
->
kd_fs
);

168 
	`vfs_biglock_ªÀa£
();

171 
	}
}

178 
	$vfs_gëroŸ
(c⁄° *
dev«me
, 
vnode
 **
ªsu…
)

180 
knowndev
 *
kd
;

181 
i
, 
num
;

183 
	`KASSERT
(
	`vfs_biglock_do_i_hﬁd
());

185 
num
 = 
	`knowndev¨øy_num
(
knowndevs
);

186 
i
=0; i<
num
; i++) {

187 
kd
 = 
	`knowndev¨øy_gë
(
knowndevs
, 
i
);

198 i‡(
kd
->
kd_fs
!=
NULL
) {

199 c⁄° *
vﬁ«me
;

200 
vﬁ«me
 = 
	`FSOP_GETVOLNAME
(
kd
->
kd_fs
);

202 i‡(!
	`°rcmp
(
kd
->
kd_«me
, 
dev«me
) ||

203 (
vﬁ«me
!=
NULL
 && !
	`°rcmp
(vﬁ«me, 
dev«me
))) {

204 *
ªsu…
 = 
	`FSOP_GETROOT
(
kd
->
kd_fs
);

209 i‡(
kd
->
kd_øw«me
!=
NULL
 &&

210 !
	`°rcmp
(
kd
->
kd_«me
, 
dev«me
)) {

211  
ENXIO
;

220 i‡(!
	`°rcmp
(
kd
->
kd_«me
, 
dev«me
)) {

221 
	`KASSERT
(
kd
->
kd_fs
==
NULL
);

222 
	`KASSERT
(
kd
->
kd_øw«me
==
NULL
);

223 
	`KASSERT
(
kd
->
kd_devi˚
 !
NULL
);

224 
	`VOP_INCREF
(
kd
->
kd_vnode
);

225 *
ªsu…
 = 
kd
->
kd_vnode
;

233 i‡(
kd
->
kd_øw«me
!=
NULL
 && !
	`°rcmp
(kd->kd_øw«me, 
dev«me
)) {

234 
	`KASSERT
(
kd
->
kd_devi˚
 !
NULL
);

235 
	`VOP_INCREF
(
kd
->
kd_vnode
);

236 *
ªsu…
 = 
kd
->
kd_vnode
;

251  
ENODEV
;

252 
	}
}

258 
	$vfs_gëdev«me
(
fs
 *fs)

260 
knowndev
 *
kd
;

261 
i
, 
num
;

263 
	`KASSERT
(
fs
 !
NULL
);

265 
	`KASSERT
(
	`vfs_biglock_do_i_hﬁd
());

267 
num
 = 
	`knowndev¨øy_num
(
knowndevs
);

268 
i
=0; i<
num
; i++) {

269 
kd
 = 
	`knowndev¨øy_gë
(
knowndevs
, 
i
);

271 i‡(
kd
->
kd_fs
 =
fs
) {

278  
kd
->
kd_«me
;

282  
NULL
;

283 
	}
}

290 
	$mkøw«me
(c⁄° *
«me
)

292 *
s
 = 
	`kmÆloc
(
	`°æí
(
«me
)+3+1);

293 i‡(!
s
) {

294  
NULL
;

296 
	`°r˝y
(
s
, 
«me
);

297 
	`°rˇt
(
s
, "raw");

298  
s
;

299 
	}
}

307 
ölöe


309 
	$ßme°rög
(c⁄° *
a
, c⁄° *
b
)

311 i‡(
a
==
NULL
 || 
b
==NULL) {

314  !
	`°rcmp
(
a
, 
b
);

315 
	}
}

322 
ölöe


324 
	$ßme°rög3
(c⁄° *
a
, c⁄° *
b
, c⁄° *
c
, c⁄° *
d
)

326  
	`ßme°rög
(
a
,
b
Ë|| same°rög◊,
c
Ë|| same°rög◊,
d
);

327 
	}
}

336 
	$bad«mes
(c⁄° *
n1
, c⁄° *
n2
, c⁄° *
n3
)

338 c⁄° *
vﬁ«me
;

339 
i
, 
num
;

340 
knowndev
 *
kd
;

342 
	`KASSERT
(
	`vfs_biglock_do_i_hﬁd
());

344 
num
 = 
	`knowndev¨øy_num
(
knowndevs
);

345 
i
=0; i<
num
; i++) {

346 
kd
 = 
	`knowndev¨øy_gë
(
knowndevs
, 
i
);

348 i‡(
kd
->
kd_fs
) {

349 
vﬁ«me
 = 
	`FSOP_GETVOLNAME
(
kd
->
kd_fs
);

350 i‡(
	`ßme°rög3
(
vﬁ«me
, 
n1
, 
n2
, 
n3
)) {

355 i‡(
	`ßme°rög3
(
kd
->
kd_øw«me
, 
n1
, 
n2
, 
n3
) ||

356 
	`ßme°rög3
(
kd
->
kd_«me
, 
n1
, 
n2
, 
n3
)) {

362 
	}
}

373 
	$vfs_dﬂdd
(c⁄° *
d«me
, 
mou¡abÀ
, 
devi˚
 *
dev
, 
fs
 *fs)

375 *
«me
=
NULL
, *
øw«me
=NULL;

376 
knowndev
 *
kd
=
NULL
;

377 
vnode
 *vnode=
NULL
;

378 c⁄° *
vﬁ«me
=
NULL
;

379 
ödex
;

380 
ªsu…
;

382 
	`vfs_biglock_acquúe
();

384 
«me
 = 
	`k°rdup
(
d«me
);

385 i‡(
«me
==
NULL
) {

386 
nomem
;

388 i‡(
mou¡abÀ
) {

389 
øw«me
 = 
	`mkøw«me
(
«me
);

390 i‡(
øw«me
==
NULL
) {

391 
nomem
;

395 
vnode
 = 
	`dev_¸óã_vnode
(
dev
);

396 i‡(
vnode
==
NULL
) {

397 
nomem
;

400 
kd
 = 
	`kmÆloc
((
knowndev
));

401 i‡(
kd
==
NULL
) {

402 
nomem
;

405 
kd
->
kd_«me
 = 
«me
;

406 
kd
->
kd_øw«me
 = 
øw«me
;

407 
kd
->
kd_devi˚
 = 
dev
;

408 
kd
->
kd_vnode
 = 
vnode
;

409 
kd
->
kd_fs
 = 
fs
;

411 i‡(
fs
!=
NULL
) {

412 
vﬁ«me
 = 
	`FSOP_GETVOLNAME
(
fs
);

415 i‡(
	`bad«mes
(
«me
, 
øw«me
, 
vﬁ«me
)) {

416 
	`vfs_biglock_ªÀa£
();

417  
EEXIST
;

420 
ªsu…
 = 
	`knowndev¨øy_add
(
knowndevs
, 
kd
, &
ödex
);

422 i‡(
ªsu…
 =0 && 
dev
 !
NULL
) {

424 
dev
->
d_devnumbî
 = 
ödex
+1;

427 
	`vfs_biglock_ªÀa£
();

428  
ªsu…
;

430 
nomem
:

432 i‡(
«me
) {

433 
	`k‰ì
(
«me
);

435 i‡(
øw«me
) {

436 
	`k‰ì
(
øw«me
);

438 i‡(
vnode
) {

439 
	`k‰ì
(
vnode
);

441 i‡(
kd
) {

442 
	`k‰ì
(
kd
);

445 
	`vfs_biglock_ªÀa£
();

446  
ENOMEM
;

447 
	}
}

454 
	$vfs_adddev
(c⁄° *
dev«me
, 
devi˚
 *
dev
, 
mou¡abÀ
)

456  
	`vfs_dﬂdd
(
dev«me
, 
mou¡abÀ
, 
dev
, 
NULL
);

457 
	}
}

465 
	$vfs_addfs
(c⁄° *
dev«me
, 
fs
 *fs)

467  
	`vfs_dﬂdd
(
dev«me
, 0, 
NULL
, 
fs
);

468 
	}
}

478 
	$födmou¡
(c⁄° *
dev«me
, 
knowndev
 **
ªsu…
)

480 
knowndev
 *
dev
;

481 
i
, 
num
;

482 
boﬁ
 
found
 = 
Ál£
;

484 
	`KASSERT
(
	`vfs_biglock_do_i_hﬁd
());

486 
num
 = 
	`knowndev¨øy_num
(
knowndevs
);

487 
i
=0; !
found
 && i<
num
; i++) {

488 
dev
 = 
	`knowndev¨øy_gë
(
knowndevs
, 
i
);

489 i‡(
dev
->
kd_øw«me
==
NULL
) {

494 i‡(!
	`°rcmp
(
dev«me
, 
dev
->
kd_«me
)) {

495 *
ªsu…
 = 
dev
;

496 
found
 = 
åue
;

500  
found
 ? 0 : 
ENODEV
;

501 
	}
}

510 
vfs_mou¡
(c⁄° *
dev«me
, *
d©a
,

511 (*
mou¡func
)(*
d©a
, 
devi˚
 *, 
fs
 **
ªt
))

513 c⁄° *
vﬁ«me
;

514 
knowndev
 *
kd
;

515 
fs
 *fs;

516 
ªsu…
;

518 
	`vfs_biglock_acquúe
();

520 
ªsu…
 = 
	`födmou¡
(
dev«me
, &
kd
);

521 i‡(
ªsu…
) {

522 
	`vfs_biglock_ªÀa£
();

523  
ªsu…
;

526 i‡(
kd
->
kd_fs
 !
NULL
) {

527 
	`vfs_biglock_ªÀa£
();

528  
EBUSY
;

530 
	`KASSERT
(
kd
->
kd_øw«me
 !
NULL
);

531 
	`KASSERT
(
kd
->
kd_devi˚
 !
NULL
);

533 
ªsu…
 = 
	`mou¡func
(
d©a
, 
kd
->
kd_devi˚
, &
fs
);

534 i‡(
ªsu…
) {

535 
	`vfs_biglock_ªÀa£
();

536  
ªsu…
;

539 
	`KASSERT
(
fs
 !
NULL
);

541 
kd
->
kd_fs
 = 
fs
;

543 
vﬁ«me
 = 
	`FSOP_GETVOLNAME
(
fs
);

544 
	`k¥ötf
("vfs: Mounted %s: on %s\n",

545 
vﬁ«me
 ? vﬁ«mê: 
kd
->
kd_«me
, kd->kd_name);

547 
	`vfs_biglock_ªÀa£
();

549 
	}
}

556 
	$vfs_unmou¡
(c⁄° *
dev«me
)

558 
knowndev
 *
kd
;

559 
ªsu…
;

561 
	`vfs_biglock_acquúe
();

563 
ªsu…
 = 
	`födmou¡
(
dev«me
, &
kd
);

564 i‡(
ªsu…
) {

565 
Áû
;

568 i‡(
kd
->
kd_fs
 =
NULL
) {

569 
ªsu…
 = 
EINVAL
;

570 
Áû
;

572 
	`KASSERT
(
kd
->
kd_øw«me
 !
NULL
);

573 
	`KASSERT
(
kd
->
kd_devi˚
 !
NULL
);

576 
ªsu…
 = 
	`FSOP_SYNC
(
kd
->
kd_fs
);

577 i‡(
ªsu…
) {

578 
Áû
;

581 
ªsu…
 = 
	`FSOP_UNMOUNT
(
kd
->
kd_fs
);

582 i‡(
ªsu…
) {

583 
Áû
;

586 
	`k¥ötf
("vfs: Unmou¡ed %s:\n", 
kd
->
kd_«me
);

589 
kd
->
kd_fs
 = 
NULL
;

591 
	`KASSERT
(
ªsu…
==0);

593 
Áû
:

594 
	`vfs_biglock_ªÀa£
();

595  
ªsu…
;

596 
	}
}

602 
	$vfs_unmou¡Æl
()

604 
knowndev
 *
dev
;

605 
i
, 
num
;

606 
ªsu…
;

608 
	`vfs_biglock_acquúe
();

610 
num
 = 
	`knowndev¨øy_num
(
knowndevs
);

611 
i
=0; i<
num
; i++) {

612 
dev
 = 
	`knowndev¨øy_gë
(
knowndevs
, 
i
);

613 i‡(
dev
->
kd_øw«me
 =
NULL
) {

617 i‡(
dev
->
kd_fs
 =
NULL
) {

622 
	`k¥ötf
("vfs: Unmou¡ög %s:\n", 
dev
->
kd_«me
);

624 
ªsu…
 = 
	`FSOP_SYNC
(
dev
->
kd_fs
);

625 i‡(
ªsu…
) {

626 
	`k¥ötf
("vfs: Warning: sync failed for %s: %s,Årying "

627 "agaö\n", 
dev
->
kd_«me
, 
	`°ªº‹
(
ªsu…
));

629 
ªsu…
 = 
	`FSOP_SYNC
(
dev
->
kd_fs
);

630 i‡(
ªsu…
) {

631 
	`k¥ötf
("vfs: Warning: sync failed secondÅime"

633 
dev
->
kd_«me
, 
	`°ªº‹
(
ªsu…
));

642 
ªsu…
 = 
	`FSOP_UNMOUNT
(
dev
->
kd_fs
);

643 i‡(
ªsu…
 =
EBUSY
) {

644 
	`k¥ötf
("vfs: Cannot unmount %s: (busy)\n",

645 
dev
->
kd_«me
);

648 i‡(
ªsu…
) {

649 
	`k¥ötf
("vfs: Warning: unmount failed for %s:"

651 
dev
->
kd_«me
, 
	`°ªº‹
(
ªsu…
));

656 
dev
->
kd_fs
 = 
NULL
;

659 
	`vfs_biglock_ªÀa£
();

662 
	}
}

	@vfs/vfslookup.c

34 
	~<ty≥s.h
>

35 
	~<kîn/î∫o.h
>

36 
	~<limôs.h
>

37 
	~<lib.h
>

38 
	~<synch.h
>

39 
	~<vfs.h
>

40 
	~<fs.h
>

41 
	~<vnode.h
>

43 
vnode
 *
	gboŸfs_vnode
 = 
NULL
;

50 
	$ch™ge_boŸfs
(
vnode
 *
√wvn
)

52 
vnode
 *
ﬁdvn
;

54 
ﬁdvn
 = 
boŸfs_vnode
;

55 
boŸfs_vnode
 = 
√wvn
;

57 i‡(
ﬁdvn
 !
NULL
) {

58 
	`VOP_DECREF
(
ﬁdvn
);

60 
	}
}

71 
	$vfs_£tboŸfs
(c⁄° *
f¢ame
)

73 
tmp
[
NAME_MAX
+1];

74 *
s
;

75 
ªsu…
;

76 
vnode
 *
√wguy
;

78 
	`vfs_biglock_acquúe
();

80 
	`¢¥ötf
(
tmp
, —mp)-1, "%s", 
f¢ame
);

81 
s
 = 
	`°rchr
(
tmp
, ':');

82 i‡(
s
) {

84 i‡(
	`°æí
(
s
)>0) {

85 
	`vfs_biglock_ªÀa£
();

86  
EINVAL
;

90 
	`°rˇt
(
tmp
, ":");

93 
ªsu…
 = 
	`vfs_chdú
(
tmp
);

94 i‡(
ªsu…
) {

95 
	`vfs_biglock_ªÀa£
();

96  
ªsu…
;

99 
ªsu…
 = 
	`vfs_gëcurdú
(&
√wguy
);

100 i‡(
ªsu…
) {

101 
	`vfs_biglock_ªÀa£
();

102  
ªsu…
;

105 
	`ch™ge_boŸfs
(
√wguy
);

107 
	`vfs_biglock_ªÀa£
();

109 
	}
}

115 
	$vfs_˛órboŸfs
()

117 
	`vfs_biglock_acquúe
();

118 
	`ch™ge_boŸfs
(
NULL
);

119 
	`vfs_biglock_ªÀa£
();

120 
	}
}

130 
	$gëdevi˚
(*
∑th
, **
sub∑th
, 
vnode
 **
°¨tvn
)

132 
¶ash
=-1, 
cﬁ⁄
=-1, 
i
;

133 
vnode
 *
vn
;

134 
ªsu…
;

136 
	`KASSERT
(
	`vfs_biglock_do_i_hﬁd
());

142 
i
=0; 
∑th
[i]; i++) {

143 i‡(
∑th
[
i
]==':') {

144 
cﬁ⁄
 = 
i
;

147 i‡(
∑th
[
i
]=='/') {

148 
¶ash
 = 
i
;

153 i‡(
cﬁ⁄
 < 0 && 
¶ash
 != 0) {

161 *
sub∑th
 = 
∑th
;

162  
	`vfs_gëcurdú
(
°¨tvn
);

165 i‡(
cﬁ⁄
>0) {

167 
∑th
[
cﬁ⁄
]=0;

168 
∑th
[
cﬁ⁄
+1]=='/') {

170 
cﬁ⁄
++;

172 *
sub∑th
 = &
∑th
[
cﬁ⁄
+1];

174 
ªsu…
 = 
	`vfs_gëroŸ
(
∑th
, 
°¨tvn
);

175 i‡(
ªsu…
) {

176  
ªsu…
;

188 
	`KASSERT
(
cﬁ⁄
==0 || 
¶ash
==0);

190 i‡(
∑th
[0]=='/') {

191 i‡(
boŸfs_vnode
==
NULL
) {

192  
ENOENT
;

194 
	`VOP_INCREF
(
boŸfs_vnode
);

195 *
°¨tvn
 = 
boŸfs_vnode
;

198 
	`KASSERT
(
∑th
[0]==':');

200 
ªsu…
 = 
	`vfs_gëcurdú
(&
vn
);

201 i‡(
ªsu…
) {

202  
ªsu…
;

209 
	`KASSERT
(
vn
->
vn_fs
!=
NULL
);

211 *
°¨tvn
 = 
	`FSOP_GETROOT
(
vn
->
vn_fs
);

213 
	`VOP_DECREF
(
vn
);

216 
∑th
[1]=='/') {

218 
∑th
++;

221 *
sub∑th
 = 
∑th
+1;

224 
	}
}

232 
	$vfs_look∑ª¡
(*
∑th
, 
vnode
 **
ªtvÆ
,

233 *
buf
, 
size_t
 
buÊí
)

235 
vnode
 *
°¨tvn
;

236 
ªsu…
;

238 
	`vfs_biglock_acquúe
();

240 
ªsu…
 = 
	`gëdevi˚
(
∑th
, &∑th, &
°¨tvn
);

241 i‡(
ªsu…
) {

242 
	`vfs_biglock_ªÀa£
();

243  
ªsu…
;

246 i‡(
	`°æí
(
∑th
)==0) {

252 
ªsu…
 = 
EINVAL
;

255 
ªsu…
 = 
	`VOP_LOOKPARENT
(
°¨tvn
, 
∑th
, 
ªtvÆ
, 
buf
, 
buÊí
);

258 
	`VOP_DECREF
(
°¨tvn
);

260 
	`vfs_biglock_ªÀa£
();

261  
ªsu…
;

262 
	}
}

265 
	$vfs_lookup
(*
∑th
, 
vnode
 **
ªtvÆ
)

267 
vnode
 *
°¨tvn
;

268 
ªsu…
;

270 
	`vfs_biglock_acquúe
();

272 
ªsu…
 = 
	`gëdevi˚
(
∑th
, &∑th, &
°¨tvn
);

273 i‡(
ªsu…
) {

274 
	`vfs_biglock_ªÀa£
();

275  
ªsu…
;

278 i‡(
	`°æí
(
∑th
)==0) {

279 *
ªtvÆ
 = 
°¨tvn
;

280 
	`vfs_biglock_ªÀa£
();

284 
ªsu…
 = 
	`VOP_LOOKUP
(
°¨tvn
, 
∑th
, 
ªtvÆ
);

286 
	`VOP_DECREF
(
°¨tvn
);

287 
	`vfs_biglock_ªÀa£
();

288  
ªsu…
;

289 
	}
}

	@vfs/vfspath.c

34 
	~<ty≥s.h
>

35 
	~<kîn/î∫o.h
>

36 
	~<kîn/f˙é.h
>

37 
	~<limôs.h
>

38 
	~<lib.h
>

39 
	~<vfs.h
>

40 
	~<vnode.h
>

45 
	$vfs_›í
(*
∑th
, 
›íÊags
, 
mode_t
 
mode
, 
vnode
 **
ªt
)

47 
how
;

48 
ªsu…
;

49 
ˇnwrôe
;

50 
vnode
 *
vn
 = 
NULL
;

52 
how
 = 
›íÊags
 & 
O_ACCMODE
;

54 
how
) {

55 
O_RDONLY
:

56 
ˇnwrôe
=0;

58 
O_WRONLY
:

59 
O_RDWR
:

60 
ˇnwrôe
=1;

63  
EINVAL
;

66 i‡(
›íÊags
 & 
O_CREAT
) {

67 
«me
[
NAME_MAX
+1];

68 
vnode
 *
dú
;

69 
ex˛
 = (
›íÊags
 & 
O_EXCL
)!=0;

71 
ªsu…
 = 
	`vfs_look∑ª¡
(
∑th
, &
dú
, 
«me
, (name));

72 i‡(
ªsu…
) {

73  
ªsu…
;

76 
ªsu…
 = 
	`VOP_CREAT
(
dú
, 
«me
, 
ex˛
, 
mode
, &
vn
);

78 
	`VOP_DECREF
(
dú
);

81 
ªsu…
 = 
	`vfs_lookup
(
∑th
, &
vn
);

84 i‡(
ªsu…
) {

85  
ªsu…
;

88 
	`KASSERT
(
vn
 !
NULL
);

90 
ªsu…
 = 
	`VOP_EACHOPEN
(
vn
, 
›íÊags
);

91 i‡(
ªsu…
) {

92 
	`VOP_DECREF
(
vn
);

93  
ªsu…
;

96 i‡(
›íÊags
 & 
O_TRUNC
) {

97 i‡(
ˇnwrôe
==0) {

98 
ªsu…
 = 
EINVAL
;

101 
ªsu…
 = 
	`VOP_TRUNCATE
(
vn
, 0);

103 i‡(
ªsu…
) {

104 
	`VOP_DECREF
(
vn
);

105  
ªsu…
;

109 *
ªt
 = 
vn
;

112 
	}
}

116 
	$vfs_˛o£
(
vnode
 *
vn
)

132 
	`VOP_DECREF
(
vn
);

133 
	}
}

137 
	$vfs_ªmove
(*
∑th
)

139 
vnode
 *
dú
;

140 
«me
[
NAME_MAX
+1];

141 
ªsu…
;

143 
ªsu…
 = 
	`vfs_look∑ª¡
(
∑th
, &
dú
, 
«me
, (name));

144 i‡(
ªsu…
) {

145  
ªsu…
;

148 
ªsu…
 = 
	`VOP_REMOVE
(
dú
, 
«me
);

149 
	`VOP_DECREF
(
dú
);

151  
ªsu…
;

152 
	}
}

156 
	$vfs_ª«me
(*
ﬁd∑th
, *
√w∑th
)

158 
vnode
 *
ﬁddú
;

159 
ﬁd«me
[
NAME_MAX
+1];

160 
vnode
 *
√wdú
;

161 
√w«me
[
NAME_MAX
+1];

162 
ªsu…
;

164 
ªsu…
 = 
	`vfs_look∑ª¡
(
ﬁd∑th
, &
ﬁddú
, 
ﬁd«me
, (oldname));

165 i‡(
ªsu…
) {

166  
ªsu…
;

168 
ªsu…
 = 
	`vfs_look∑ª¡
(
√w∑th
, &
√wdú
, 
√w«me
, (newname));

169 i‡(
ªsu…
) {

170 
	`VOP_DECREF
(
ﬁddú
);

171  
ªsu…
;

174 i‡(
ﬁddú
->
vn_fs
==
NULL
 || 
√wdú
->vn_fs==NULL ||

175 
ﬁddú
->
vn_fs
 !
√wdú
->vn_fs) {

176 
	`VOP_DECREF
(
√wdú
);

177 
	`VOP_DECREF
(
ﬁddú
);

178  
EXDEV
;

181 
ªsu…
 = 
	`VOP_RENAME
(
ﬁddú
, 
ﬁd«me
, 
√wdú
, 
√w«me
);

183 
	`VOP_DECREF
(
√wdú
);

184 
	`VOP_DECREF
(
ﬁddú
);

186  
ªsu…
;

187 
	}
}

191 
	$vfs_lök
(*
ﬁd∑th
, *
√w∑th
)

193 
vnode
 *
ﬁdfûe
;

194 
vnode
 *
√wdú
;

195 
√w«me
[
NAME_MAX
+1];

196 
ªsu…
;

198 
ªsu…
 = 
	`vfs_lookup
(
ﬁd∑th
, &
ﬁdfûe
);

199 i‡(
ªsu…
) {

200  
ªsu…
;

202 
ªsu…
 = 
	`vfs_look∑ª¡
(
√w∑th
, &
√wdú
, 
√w«me
, (newname));

203 i‡(
ªsu…
) {

204 
	`VOP_DECREF
(
ﬁdfûe
);

205  
ªsu…
;

208 i‡(
ﬁdfûe
->
vn_fs
==
NULL
 || 
√wdú
->vn_fs==NULL ||

209 
ﬁdfûe
->
vn_fs
 !
√wdú
->vn_fs) {

210 
	`VOP_DECREF
(
√wdú
);

211 
	`VOP_DECREF
(
ﬁdfûe
);

212  
EXDEV
;

215 
ªsu…
 = 
	`VOP_LINK
(
√wdú
, 
√w«me
, 
ﬁdfûe
);

217 
	`VOP_DECREF
(
√wdú
);

218 
	`VOP_DECREF
(
ﬁdfûe
);

220  
ªsu…
;

221 
	}
}

231 
	$vfs_symlök
(c⁄° *
c⁄ã¡s
, *
∑th
)

233 
vnode
 *
√wdú
;

234 
√w«me
[
NAME_MAX
+1];

235 
ªsu…
;

237 
ªsu…
 = 
	`vfs_look∑ª¡
(
∑th
, &
√wdú
, 
√w«me
, (newname));

238 i‡(
ªsu…
) {

239  
ªsu…
;

242 
ªsu…
 = 
	`VOP_SYMLINK
(
√wdú
, 
√w«me
, 
c⁄ã¡s
);

243 
	`VOP_DECREF
(
√wdú
);

245  
ªsu…
;

246 
	}
}

256 
	$vfs_ªadlök
(*
∑th
, 
uio
 *uio)

258 
vnode
 *
vn
;

259 
ªsu…
;

261 
ªsu…
 = 
	`vfs_lookup
(
∑th
, &
vn
);

262 i‡(
ªsu…
) {

263  
ªsu…
;

266 
ªsu…
 = 
	`VOP_READLINK
(
vn
, 
uio
);

268 
	`VOP_DECREF
(
vn
);

270  
ªsu…
;

271 
	}
}

277 
	$vfs_mkdú
(*
∑th
, 
mode_t
 
mode
)

279 
vnode
 *
∑ª¡
;

280 
«me
[
NAME_MAX
+1];

281 
ªsu…
;

283 
ªsu…
 = 
	`vfs_look∑ª¡
(
∑th
, &
∑ª¡
, 
«me
, (name));

284 i‡(
ªsu…
) {

285  
ªsu…
;

288 
ªsu…
 = 
	`VOP_MKDIR
(
∑ª¡
, 
«me
, 
mode
);

290 
	`VOP_DECREF
(
∑ª¡
);

292  
ªsu…
;

293 
	}
}

299 
	$vfs_rmdú
(*
∑th
)

301 
vnode
 *
∑ª¡
;

302 
«me
[
NAME_MAX
+1];

303 
ªsu…
;

305 
ªsu…
 = 
	`vfs_look∑ª¡
(
∑th
, &
∑ª¡
, 
«me
, (name));

306 i‡(
ªsu…
) {

307  
ªsu…
;

310 
ªsu…
 = 
	`VOP_RMDIR
(
∑ª¡
, 
«me
);

312 
	`VOP_DECREF
(
∑ª¡
);

314  
ªsu…
;

315 
	}
}

	@vfs/vnode.c

33 
	~<ty≥s.h
>

34 
	~<kîn/î∫o.h
>

35 
	~<lib.h
>

36 
	~<synch.h
>

37 
	~<vfs.h
>

38 
	~<vnode.h
>

44 
	$vnode_öô
(
vnode
 *
vn
, c⁄° 
vnode_›s
 *
›s
,

45 
fs
 *fs, *
fsd©a
)

47 
	`KASSERT
(
vn
 !
NULL
);

48 
	`KASSERT
(
›s
 !
NULL
);

50 
vn
->
vn_›s
 = 
›s
;

51 
vn
->
vn_ªfcou¡
 = 1;

52 
	`•ölock_öô
(&
vn
->
vn_cou¡lock
);

53 
vn
->
vn_fs
 = 
fs
;

54 
vn
->
vn_d©a
 = 
fsd©a
;

56 
	}
}

62 
	$vnode_˛ónup
(
vnode
 *
vn
)

64 
	`KASSERT
(
vn
->
vn_ªfcou¡
 == 1);

66 
	`•ölock_˛ónup
(&
vn
->
vn_cou¡lock
);

68 
vn
->
vn_›s
 = 
NULL
;

69 
vn
->
vn_ªfcou¡
 = 0;

70 
vn
->
vn_fs
 = 
NULL
;

71 
vn
->
vn_d©a
 = 
NULL
;

72 
	}
}

80 
	$vnode_ö¸ef
(
vnode
 *
vn
)

82 
	`KASSERT
(
vn
 !
NULL
);

84 
	`•ölock_acquúe
(&
vn
->
vn_cou¡lock
);

85 
vn
->
vn_ªfcou¡
++;

86 
	`•ölock_ªÀa£
(&
vn
->
vn_cou¡lock
);

87 
	}
}

95 
	$vnode_de¸ef
(
vnode
 *
vn
)

97 
boﬁ
 
de°roy
;

98 
ªsu…
;

100 
	`KASSERT
(
vn
 !
NULL
);

102 
	`•ölock_acquúe
(&
vn
->
vn_cou¡lock
);

104 
	`KASSERT
(
vn
->
vn_ªfcou¡
 > 0);

105 i‡(
vn
->
vn_ªfcou¡
 > 1) {

106 
vn
->
vn_ªfcou¡
--;

107 
de°roy
 = 
Ál£
;

111 
de°roy
 = 
åue
;

113 
	`•ölock_ªÀa£
(&
vn
->
vn_cou¡lock
);

115 i‡(
de°roy
) {

116 
ªsu…
 = 
	`VOP_RECLAIM
(
vn
);

117 i‡(
ªsu…
 !0 &&Ñesu… !
EBUSY
) {

119 
	`k¥ötf
("vfs: Warning: VOP_RECLAIM: %s\n",

120 
	`°ªº‹
(
ªsu…
));

123 
	}
}

130 
	$vnode_check
(
vnode
 *
v
, c⁄° *
›°r
)

132 
	`vfs_biglock_acquúe
();

134 i‡(
v
 =
NULL
) {

135 
	`∑nic
("vnode_check: v›_%s:ÇuŒ vnode\n", 
›°r
);

137 i‡(
v
 == (*)0xdeadbeef) {

138 
	`∑nic
("vnode_check: v›_%s: dódbì‡vnode\n", 
›°r
);

141 i‡(
v
->
vn_›s
 =
NULL
) {

142 
	`∑nic
("vnode_check: v›_%s:ÇuŒ op†poöãr\n", 
›°r
);

144 i‡(
v
->
vn_›s
 == (*)0xdeadbeef) {

145 
	`∑nic
("vnode_check: v›_%s: dódbì‡›†poöãr\n", 
›°r
);

148 i‡(
v
->
vn_›s
->
v›_magic
 !
VOP_MAGIC
) {

149 
	`∑nic
("vnode_check: vop_%s: ops with bad magicÇumber %lx\n",

150 
›°r
, 
v
->
vn_›s
->
v›_magic
);

157 i‡(
v
->
vn_fs
 == (*)0xdeadbeef) {

158 
	`∑nic
("vnode_check: v›_%s: dódbì‡f†poöãr\n", 
›°r
);

161 
	`•ölock_acquúe
(&
v
->
vn_cou¡lock
);

163 i‡(
v
->
vn_ªfcou¡
 < 0) {

164 
	`∑nic
("vnode_check: v›_%s:Çeg©ivêªfcou¡ %d\n", 
›°r
,

165 
v
->
vn_ªfcou¡
);

167 i‡(
v
->
vn_ªfcou¡
 == 0) {

168 
	`∑nic
("vnode_check: v›_%s: zîÿªfcou¡\n", 
›°r
);

170 i‡(
v
->
vn_ªfcou¡
 > 0x100000) {

171 
	`k¥ötf
("vnode_check: vop_%s: warning:ÜargeÑefcount %d\n",

172 
›°r
, 
v
->
vn_ªfcou¡
);

175 
	`•ölock_ªÀa£
(&
v
->
vn_cou¡lock
);

176 
	`vfs_biglock_ªÀa£
();

177 
	}
}

	@vm/addrspace.c

30 
	~<ty≥s.h
>

31 
	~<kîn/î∫o.h
>

32 
	~<lib.h
>

33 
	~<addr•a˚.h
>

34 
	~<vm.h
>

42 
addr•a˚
 *

43 
	$as_¸óã
()

45 
addr•a˚
 *
as
;

47 
as
 = 
	`kmÆloc
((
addr•a˚
));

48 i‡(
as
 =
NULL
) {

49  
NULL
;

56  
as
;

57 
	}
}

60 
	$as_c›y
(
addr•a˚
 *
ﬁd
, addr•a˚ **
ªt
)

62 
addr•a˚
 *
√was
;

64 
√was
 = 
	`as_¸óã
();

65 i‡(
√was
==
NULL
) {

66  
ENOMEM
;

73 ()
ﬁd
;

75 *
ªt
 = 
√was
;

77 
	}
}

80 
	$as_de°roy
(
addr•a˚
 *
as
)

86 
	`k‰ì
(
as
);

87 
	}
}

90 
	$as_a˘iv©e
()

92 
addr•a˚
 *
as
;

94 
as
 = 
	`cuΩroc_gëas
();

95 i‡(
as
 =
NULL
) {

106 
	}
}

109 
	$as_dó˘iv©e
()

116 
	}
}

129 
	$as_deföe_ªgi⁄
(
addr•a˚
 *
as
, 
vaddr_t
 
vaddr
, 
size_t
 
sz
,

130 
ªadabÀ
, 
wrôóbÀ
, 
execuèbÀ
)

136 ()
as
;

137 ()
vaddr
;

138 ()
sz
;

139 ()
ªadabÀ
;

140 ()
wrôóbÀ
;

141 ()
execuèbÀ
;

142  
EUNIMP
;

143 
	}
}

146 
	$as_¥ï¨e_lﬂd
(
addr•a˚
 *
as
)

152 ()
as
;

154 
	}
}

157 
	$as_com∂ëe_lﬂd
(
addr•a˚
 *
as
)

163 ()
as
;

165 
	}
}

168 
	$as_deföe_°ack
(
addr•a˚
 *
as
, 
vaddr_t
 *
°ack±r
)

174 ()
as
;

177 *
°ack±r
 = 
USERSTACK
;

180 
	}
}

	@vm/copyinout.c

30 
	~<ty≥s.h
>

31 
	~<kîn/î∫o.h
>

32 
	~<lib.h
>

33 
	~<£tjmp.h
>

34 
	~<thªad.h
>

35 
	~<cuºít.h
>

36 
	~<vm.h
>

37 
	~<c›yöout.h
>

100 
	$c›yÁû
()

102 
	`l⁄gjmp
(
cuπhªad
->
t_machdï
.
tm_c›yjmp
, 1);

103 
	}
}

118 
	$c›ycheck
(
c⁄°_u£Ωå_t
 
u£Ωå
, 
size_t
 
Àn
, size_à*
°›Àn
)

120 
vaddr_t
 
bŸ
, 
t›
;

122 *
°›Àn
 = 
Àn
;

124 
bŸ
 = (
vaddr_t
Ë
u£Ωå
;

125 
t›
 = 
bŸ
+
Àn
-1;

127 i‡(
t›
 < 
bŸ
) {

129  
EFAULT
;

132 i‡(
bŸ
 >
USERSPACETOP
) {

133 
	`k¥ötf
("within kernel\n");

135  
EFAULT
;

138 i‡(
t›
 >
USERSPACETOP
) {

140 *
°›Àn
 = 
USERSPACETOP
 - 
bŸ
;

144 
	}
}

154 
	$c›yö
(
c⁄°_u£Ωå_t
 
u£r§c
, *
de°
, 
size_t
 
Àn
)

156 
ªsu…
;

157 
size_t
 
°›Àn
;

159 
ªsu…
 = 
	`c›ycheck
(
u£r§c
, 
Àn
, &
°›Àn
);

160 i‡(
ªsu…
) {

161  
ªsu…
;

163 i‡(
°›Àn
 !
Àn
) {

165  
EFAULT
;

168 
cuπhªad
->
t_machdï
.
tm_badÁu…func
 = 
c›yÁû
;

170 
ªsu…
 = 
	`£tjmp
(
cuπhªad
->
t_machdï
.
tm_c›yjmp
);

171 i‡(
ªsu…
) {

172 
cuπhªad
->
t_machdï
.
tm_badÁu…func
 = 
NULL
;

173  
EFAULT
;

176 
	`mem˝y
(
de°
, (c⁄° *)
u£r§c
, 
Àn
);

178 
cuπhªad
->
t_machdï
.
tm_badÁu…func
 = 
NULL
;

180 
	}
}

190 
	$c›yout
(c⁄° *
§c
, 
u£Ωå_t
 
u£rde°
, 
size_t
 
Àn
)

192 
ªsu…
;

193 
size_t
 
°›Àn
;

195 
ªsu…
 = 
	`c›ycheck
(
u£rde°
, 
Àn
, &
°›Àn
);

196 i‡(
ªsu…
) {

197  
ªsu…
;

199 i‡(
°›Àn
 !
Àn
) {

201  
EFAULT
;

204 
cuπhªad
->
t_machdï
.
tm_badÁu…func
 = 
c›yÁû
;

206 
ªsu…
 = 
	`£tjmp
(
cuπhªad
->
t_machdï
.
tm_c›yjmp
);

207 i‡(
ªsu…
) {

208 
cuπhªad
->
t_machdï
.
tm_badÁu…func
 = 
NULL
;

209  
EFAULT
;

212 
	`mem˝y
((*)
u£rde°
, 
§c
, 
Àn
);

214 
cuπhªad
->
t_machdï
.
tm_badÁu…func
 = 
NULL
;

216 
	}
}

236 
	$c›y°r
(*
de°
, c⁄° *
§c
, 
size_t
 
maxÀn
, size_à
°›Àn
,

237 
size_t
 *
gŸÀn
)

239 
size_t
 
i
;

241 
i
=0; i<
maxÀn
 && i<
°›Àn
; i++) {

242 
de°
[
i
] = 
§c
[i];

243 i‡(
§c
[
i
] == 0) {

244 i‡(
gŸÀn
 !
NULL
) {

245 *
gŸÀn
 = 
i
+1;

250 i‡(
°›Àn
 < 
maxÀn
) {

252  
EFAULT
;

255  
ENAMETOOLONG
;

256 
	}
}

267 
	$c›yö°r
(
c⁄°_u£Ωå_t
 
u£r§c
, *
de°
, 
size_t
 
Àn
, size_à*
a˘uÆ
)

269 
ªsu…
;

270 
size_t
 
°›Àn
;

272 
ªsu…
 = 
	`c›ycheck
(
u£r§c
, 
Àn
, &
°›Àn
);

273 i‡(
ªsu…
) {

274  
ªsu…
;

277 
cuπhªad
->
t_machdï
.
tm_badÁu…func
 = 
c›yÁû
;

279 
ªsu…
 = 
	`£tjmp
(
cuπhªad
->
t_machdï
.
tm_c›yjmp
);

280 i‡(
ªsu…
) {

281 
cuπhªad
->
t_machdï
.
tm_badÁu…func
 = 
NULL
;

282  
EFAULT
;

285 
ªsu…
 = 
	`c›y°r
(
de°
, (c⁄° *)
u£r§c
, 
Àn
, 
°›Àn
, 
a˘uÆ
);

287 
cuπhªad
->
t_machdï
.
tm_badÁu…func
 = 
NULL
;

288  
ªsu…
;

289 
	}
}

300 
	$c›yout°r
(c⁄° *
§c
, 
u£Ωå_t
 
u£rde°
, 
size_t
 
Àn
, size_à*
a˘uÆ
)

302 
ªsu…
;

303 
size_t
 
°›Àn
;

305 
ªsu…
 = 
	`c›ycheck
(
u£rde°
, 
Àn
, &
°›Àn
);

306 i‡(
ªsu…
) {

307  
ªsu…
;

310 
cuπhªad
->
t_machdï
.
tm_badÁu…func
 = 
c›yÁû
;

312 
ªsu…
 = 
	`£tjmp
(
cuπhªad
->
t_machdï
.
tm_c›yjmp
);

313 i‡(
ªsu…
) {

314 
cuπhªad
->
t_machdï
.
tm_badÁu…func
 = 
NULL
;

315  
EFAULT
;

318 
ªsu…
 = 
	`c›y°r
((*)
u£rde°
, 
§c
, 
Àn
, 
°›Àn
, 
a˘uÆ
);

320 
cuπhªad
->
t_machdï
.
tm_badÁu…func
 = 
NULL
;

321  
ªsu…
;

322 
	}
}

	@vm/kmalloc.c

30 
	~<ty≥s.h
>

31 
	~<lib.h
>

32 
	~<•ölock.h
>

33 
	~<vm.h
>

45 
	$fûl_dódbìf
(*
v±r
, 
size_t
 
Àn
)

47 
uöt32_t
 *
±r
 = 
v±r
;

48 
size_t
 
i
;

50 
i
=0; i<
Àn
/(
uöt32_t
); i++) {

51 
±r
[
i
] = 0xdeadbeef;

53 
	}
}

116 #unde‡
SLOW


117 #unde‡
SLOWER


118 #unde‡
GUARDS


119 
	#LABELS


	)

121 #unde‡
CHECKBEEF


122 #unde‡
CHECKGUARDS


126 #i‡
PAGE_SIZE
 == 4096

128 
	#NSIZES
 8

	)

129 c⁄° 
size_t
 
	gsizes
[
NSIZES
] = { 16, 32, 64, 128, 256, 512, 1024, 2048 };

131 
	#SMALLEST_SUBPAGE_SIZE
 16

	)

132 
	#LARGEST_SUBPAGE_SIZE
 2048

	)

134 #ñi‡
PAGE_SIZE
 == 8192

142 
	s‰ìli°
 {

143 
‰ìli°
 *
	m√xt
;

146 
	s∑gîef
 {

147 
∑gîef
 *
	m√xt_ßmesize
;

148 
∑gîef
 *
	m√xt_Æl
;

149 
vaddr_t
 
	m∑góddr_™d_blockty≥
;

150 
uöt16_t
 
	m‰ìli°_off£t
;

151 
uöt16_t
 
	mn‰ì
;

154 
	#INVALID_OFFSET
 (0xffff)

	)

156 
	#PR_PAGEADDR
(
¥
Ë(’r)->
∑góddr_™d_blockty≥
 & 
PAGE_FRAME
)

	)

157 
	#PR_BLOCKTYPE
(
¥
Ë(’r)->
∑góddr_™d_blockty≥
 & ~
PAGE_FRAME
)

	)

158 
	#MKPAB
(
∑
, 
blk
Ë((’a)&
PAGE_FRAME
Ë| ((blkË& ~PAGE_FRAME))

	)

169 
•ölock
 
	gkmÆloc_•ölock
 = 
SPINLOCK_INITIALIZER
;

181 
	#NPAGEREFS_PER_PAGE
 (
PAGE_SIZE
 / (
∑gîef
))

	)

183 
	s∑gîeÂage
 {

184 
∑gîef
 
	mªfs
[
NPAGEREFS_PER_PAGE
];

192 
	#INUSE_WORDS
 (
NPAGEREFS_PER_PAGE
 / 32)

	)

194 
	skhóp_roŸ
 {

195 
∑gîeÂage
 *
	m∑ge
;

196 
uöt32_t
 
	m∑gîefs_öu£
[
INUSE_WORDS
];

197 
	mnumöu£
;

210 
	#NUM_PAGEREFPAGES
 16

	)

211 
	#TOTAL_PAGEREFS
 (
NUM_PAGEREFPAGES
 * 
NPAGEREFS_PER_PAGE
)

	)

213 
khóp_roŸ
 
	gkhó¥oŸs
[
NUM_PAGEREFPAGES
];

220 
	$Ælo˝agîeÂage
(
khóp_roŸ
 *
roŸ
)

222 
vaddr_t
 
va
;

224 
	`KASSERT
(
roŸ
->
∑ge
 =
NULL
);

231 
	`•ölock_ªÀa£
(&
kmÆloc_•ölock
);

232 
va
 = 
	`Æloc_k∑ges
(1);

233 
	`•ölock_acquúe
(&
kmÆloc_•ölock
);

234 i‡(
va
 == 0) {

235 
	`k¥ötf
("kmalloc: Couldn't getáÖagerefÖage\n");

238 
	`KASSERT
(
va
 % 
PAGE_SIZE
 == 0);

240 i‡(
roŸ
->
∑ge
 !
NULL
) {

242 
	`•ölock_ªÀa£
(&
kmÆloc_•ölock
);

243 
	`‰ì_k∑ges
(
va
);

244 
	`•ölock_acquúe
(&
kmÆloc_•ölock
);

246 
	`KASSERT
(
roŸ
->
∑ge
 !
NULL
);

250 
roŸ
->
∑ge
 = (
∑gîeÂage
 *)
va
;

251 
	}
}

257 
∑gîef
 *

258 
	$Ælo˝agîef
()

260 
i
,
j
;

261 
uöt32_t
 
k
;

262 
whichroŸ
;

263 
khóp_roŸ
 *
roŸ
;

265 
whichroŸ
=0; whichroŸ < 
NUM_PAGEREFPAGES
; whichroot++) {

266 
roŸ
 = &
khó¥oŸs
[
whichroŸ
];

267 i‡(
roŸ
->
numöu£
 >
NPAGEREFS_PER_PAGE
) {

274 
i
=0; i<
INUSE_WORDS
; i++) {

275 i‡(
roŸ
->
∑gîefs_öu£
[
i
]==0xffffffff) {

279 
k
=1,
j
=0; k!=0; k<<=1,j++) {

280 i‡((
roŸ
->
∑gîefs_öu£
[
i
] & 
k
)==0) {

281 
roŸ
->
∑gîefs_öu£
[
i
] |
k
;

282 
roŸ
->
numöu£
++;

283 i‡(
roŸ
->
∑ge
 =
NULL
) {

284 
	`Ælo˝agîeÂage
(
roŸ
);

286 i‡(
roŸ
->
∑ge
 =
NULL
) {

287  
NULL
;

289  &
roŸ
->
∑ge
->
ªfs
[
i
*32 + 
j
];

292 
	`KASSERT
(0);

297  
NULL
;

298 
	}
}

305 
	$‰ì∑gîef
(
∑gîef
 *
p
)

307 
size_t
 
i
, 
j
;

308 
uöt32_t
 
k
;

309 
whichroŸ
;

310 
khóp_roŸ
 *
roŸ
;

311 
∑gîeÂage
 *
∑ge
;

313 
whichroŸ
=0; whichroŸ < 
NUM_PAGEREFPAGES
; whichroot++) {

314 
roŸ
 = &
khó¥oŸs
[
whichroŸ
];

316 
∑ge
 = 
roŸ
->page;

317 i‡(
∑ge
 =
NULL
) {

318 
	`KASSERT
(
roŸ
->
numöu£
 == 0);

322 
j
 = 
p
-
∑ge
->
ªfs
;

324 i‡(
j
 < 
NPAGEREFS_PER_PAGE
) {

326 
i
 = 
j
/32;

327 
k
 = ((
uöt32_t
)1Ë<< (
j
%32);

328 
	`KASSERT
((
roŸ
->
∑gîefs_öu£
[
i
] & 
k
) != 0);

329 
roŸ
->
∑gîefs_öu£
[
i
] &~
k
;

330 
	`KASSERT
(
roŸ
->
numöu£
 > 0);

331 
roŸ
->
numöu£
--;

336 
	`KASSERT
(0);

337 
	}
}

345 
∑gîef
 *
	gsizeba£s
[
NSIZES
];

346 
∑gîef
 *
	gÆlba£
;

350 #ifde‡
GUARDS


353 
	#GUARD_RETBYTE
 0xa9

	)

355 
	#GUARD_FILLBYTE
 0xba

	)

357 
	#GUARD_HALFWORD
 0xb0b0

	)

360 
	#GUARD_OVERHEAD
 8

	)

363 
	#GUARD_PTROFFSET
 4

	)

370 
	$e°ablishgu¨db™d
(*
block
, 
size_t
 
˛õ¡size
, size_à
blocksize
)

372 
vaddr_t
 
lowgu¨d
, 
lowsize
, 
d©a
, 
ídd©a
, 
highgu¨d
, 
highsize
, 
i
;

374 
	`KASSERT
(
˛õ¡size
 + 
GUARD_OVERHEAD
 <
blocksize
);

375 
	`KASSERT
(
˛õ¡size
 < 65536U);

377 
lowgu¨d
 = (
vaddr_t
)
block
;

378 
lowsize
 = 
lowgu¨d
 + 2;

379 
d©a
 = 
lowsize
 + 2;

380 
ídd©a
 = 
d©a
 + 
˛õ¡size
;

381 
highgu¨d
 = 
lowgu¨d
 + 
blocksize
 - 4;

382 
highsize
 = 
highgu¨d
 + 2;

384 *(
uöt16_t
 *)
lowgu¨d
 = 
GUARD_HALFWORD
;

385 *(
uöt16_t
 *)
lowsize
 = 
˛õ¡size
;

386 
i
=
d©a
; i<
ídd©a
; i++) {

387 *(
uöt8_t
 *)
i
 = 
GUARD_RETBYTE
;

389 
i
=
ídd©a
; i<
highgu¨d
; i++) {

390 *(
uöt8_t
 *)
i
 = 
GUARD_FILLBYTE
;

392 *(
uöt16_t
 *)
highgu¨d
 = 
GUARD_HALFWORD
;

393 *(
uöt16_t
 *)
highsize
 = 
˛õ¡size
;

395  (*)
d©a
;

396 
	}
}

403 
	$checkgu¨db™d
(
vaddr_t
 
blockaddr
, 
size_t
 
smÆÀrblocksize
, size_à
blocksize
)

417 
vaddr_t
 
lowgu¨d
, 
lowsize
, 
d©a
, 
ídd©a
, 
highgu¨d
, 
highsize
, 
i
;

418 
˛õ¡size
;

420 
lowgu¨d
 = 
blockaddr
;

421 
lowsize
 = 
lowgu¨d
 + 2;

422 
d©a
 = 
lowsize
 + 2;

423 
highgu¨d
 = 
blockaddr
 + 
blocksize
 - 4;

424 
highsize
 = 
highgu¨d
 + 2;

426 
	`KASSERT
(*(
uöt16_t
 *)
lowgu¨d
 =
GUARD_HALFWORD
);

427 
	`KASSERT
(*(
uöt16_t
 *)
highgu¨d
 =
GUARD_HALFWORD
);

428 
˛õ¡size
 = *(
uöt16_t
 *)
lowsize
;

429 
	`KASSERT
(
˛õ¡size
 =*(
uöt16_t
 *)
highsize
);

430 
	`KASSERT
(
˛õ¡size
 + 
GUARD_OVERHEAD
 > 
smÆÀrblocksize
);

431 
	`KASSERT
(
˛õ¡size
 + 
GUARD_OVERHEAD
 <
blocksize
);

432 
ídd©a
 = 
d©a
 + 
˛õ¡size
;

433 
i
=
ídd©a
; i<
highgu¨d
; i++) {

434 
	`KASSERT
(*(
uöt8_t
 *)
i
 =
GUARD_FILLBYTE
);

436 
	}
}

440 
	#GUARD_OVERHEAD
 0

	)

447 #ifde‡
SLOWER


448 #i‚de‡
SLOW


449 
	#SLOW


	)

453 #ifde‡
CHECKBEEF


462 
	$checkdódbìf
(*
block
, 
size_t
 
blocksize
)

464 
uöt32_t
 *
±r
 = 
block
;

465 
size_t
 
i
;

467 
i
=1; i < 
blocksize
/(
uöt32_t
); i++) {

468 
	`KASSERT
(
±r
[
i
] == 0xdeadbeef);

470 
	}
}

473 #ifde‡
SLOW


495 
	$checksub∑ge
(
∑gîef
 *
¥
)

497 
vaddr_t
 
¥∑ge
, 
Êa
;

498 
‰ìli°
 *
Ê
;

499 
blkty≥
;

500 
n‰ì
=0;

501 
size_t
 
blocksize
;

502 #ifde‡
CHECKGUARDS


503 c⁄° 
maxblocks
 = 
PAGE_SIZE
 / 
SMALLEST_SUBPAGE_SIZE
;

504 c⁄° 
num‰ìw‹ds
 = 
	`DIVROUNDUP
(
maxblocks
, 32);

505 
uöt32_t
 
is‰ì
[
num‰ìw‹ds
], 
mask
;

506 
numblocks
, 
blocknum
, 
i
;

507 
size_t
 
smÆÀrblocksize
;

510 
	`KASSERT
(
	`•ölock_do_i_hﬁd
(&
kmÆloc_•ölock
));

512 i‡(
¥
->
‰ìli°_off£t
 =
INVALID_OFFSET
) {

513 
	`KASSERT
(
¥
->
n‰ì
==0);

517 
¥∑ge
 = 
	`PR_PAGEADDR
(
¥
);

518 
blkty≥
 = 
	`PR_BLOCKTYPE
(
¥
);

519 
	`KASSERT
(
blkty≥
 >0 && blkty≥ < 
NSIZES
);

520 
blocksize
 = 
sizes
[
blkty≥
];

522 #ifde‡
CHECKGUARDS


523 
smÆÀrblocksize
 = 
blkty≥
 > 0 ? 
sizes
[blktype - 1] : 0;

524 
i
=0; i<
num‰ìw‹ds
; i++) {

525 
is‰ì
[
i
] = 0;

529 #ifde‡
__mùs__


530 
	`KASSERT
(
¥∑ge
 >
MIPS_KSEG0
);

531 
	`KASSERT
(
¥∑ge
 < 
MIPS_KSEG1
);

534 
	`KASSERT
(
¥
->
‰ìli°_off£t
 < 
PAGE_SIZE
);

535 
	`KASSERT
(
¥
->
‰ìli°_off£t
 % 
blocksize
 == 0);

537 
Êa
 = 
¥∑ge
 + 
¥
->
‰ìli°_off£t
;

538 
Ê
 = (
‰ìli°
 *)
Êa
;

540 ; 
Ê
 !
NULL
; f»Ê->
√xt
) {

541 
Êa
 = (
vaddr_t
)
Ê
;

542 
	`KASSERT
(
Êa
 >
¥∑ge
 && fœ <ÖΩagê+ 
PAGE_SIZE
);

543 
	`KASSERT
((
Êa
-
¥∑ge
Ë% 
blocksize
 == 0);

544 #ifde‡
CHECKBEEF


545 
	`checkdódbìf
(
Ê
, 
blocksize
);

547 #ifde‡
CHECKGUARDS


548 
blocknum
 = (
Êa
-
¥∑ge
Ë/ 
blocksize
;

549 
mask
 = 1U << (
blocknum
 % 32);

550 
	`KASSERT
((
is‰ì
[
blocknum
 / 32] & 
mask
) == 0);

551 
is‰ì
[
blocknum
 / 32] |
mask
;

553 
	`KASSERT
(
Ê
->
√xt
 != fl);

554 
n‰ì
++;

556 
	`KASSERT
(
n‰ì
==
¥
->nfree);

558 #ifde‡
CHECKGUARDS


559 
numblocks
 = 
PAGE_SIZE
 / 
blocksize
;

560 
i
=0; i<
numblocks
; i++) {

561 
mask
 = 1U << (
i
 % 32);

562 i‡((
is‰ì
[
i
 / 32] & 
mask
) == 0) {

563 
	`checkgu¨db™d
(
¥∑ge
 + 
i
 * 
blocksize
,

564 
smÆÀrblocksize
, 
blocksize
);

568 
	}
}

570 
	#checksub∑ge
(
¥
Ë(()’r))

	)

573 #ifde‡
SLOWER


580 
	$checksub∑ges
()

582 
∑gîef
 *
¥
;

583 
i
;

584 
sc
=0, 
ac
=0;

586 
	`KASSERT
(
	`•ölock_do_i_hﬁd
(&
kmÆloc_•ölock
));

588 
i
=0; i<
NSIZES
; i++) {

589 
¥
 = 
sizeba£s
[
i
];Ö∏!
NULL
;Ö∏¥->
√xt_ßmesize
) {

590 
	`checksub∑ge
(
¥
);

591 
	`KASSERT
(
sc
 < 
TOTAL_PAGEREFS
);

592 
sc
++;

596 
¥
 = 
Ælba£
;Ö∏!
NULL
;Ö∏¥->
√xt_Æl
) {

597 
	`checksub∑ge
(
¥
);

598 
	`KASSERT
(
ac
 < 
TOTAL_PAGEREFS
);

599 
ac
++;

602 
	`KASSERT
(
sc
==
ac
);

603 
	}
}

605 
	#checksub∑ges
()

	)

610 #ifde‡
LABELS


612 
	#LABEL_PTROFFSET
 (
mÆlo˛abñ
)

	)

613 
	#LABEL_OVERHEAD
 
LABEL_PTROFFSET


	)

615 
	smÆlo˛abñ
 {

616 
vaddr_t
 
	mœbñ
;

617 
	mgíî©i⁄
;

620 
	gmÆlocgíî©i⁄
;

627 
	$e°ablishœbñ
(*
block
, 
vaddr_t
 
œbñ
)

629 
mÆlo˛abñ
 *
ml
;

631 
ml
 = 
block
;

632 
ml
->
œbñ
 =Üabel;

633 
ml
->
gíî©i⁄
 = 
mÆlocgíî©i⁄
;

634 
ml
++;

635  
ml
;

636 
	}
}

640 
	$dump_sub∑ge
(
∑gîef
 *
¥
, 
gíî©i⁄
)

642 
blocksize
 = 
sizes
[
	`PR_BLOCKTYPE
(
¥
)];

643 
numblocks
 = 
PAGE_SIZE
 / 
blocksize
;

644 
num‰ìw‹ds
 = 
	`DIVROUNDUP
(
numblocks
, 32);

645 
uöt32_t
 
is‰ì
[
num‰ìw‹ds
], 
mask
;

646 
vaddr_t
 
¥∑ge
;

647 
‰ìli°
 *
Ê
;

648 
vaddr_t
 
blockaddr
;

649 
mÆlo˛abñ
 *
ml
;

650 
i
;

652 
i
=0; i<
num‰ìw‹ds
; i++) {

653 
is‰ì
[
i
] = 0;

656 
¥∑ge
 = 
	`PR_PAGEADDR
(
¥
);

657 
Ê
 = (
‰ìli°
 *)(
¥∑ge
 + 
¥
->
‰ìli°_off£t
);

658 ; 
Ê
 !
NULL
; f»Ê->
√xt
) {

659 
i
 = ((
vaddr_t
)
Ê
 - 
¥∑ge
Ë/ 
blocksize
;

660 
mask
 = 1U << (
i
 % 32);

661 
is‰ì
[
i
 / 32] |
mask
;

664 
i
=0; i<
numblocks
; i++) {

665 
mask
 = 1U << (
i
 % 32);

666 i‡(
is‰ì
[
i
 / 32] & 
mask
) {

669 
blockaddr
 = 
¥∑ge
 + 
i
 * 
blocksize
;

670 
ml
 = (
mÆlo˛abñ
 *)
blockaddr
;

671 i‡(
ml
->
gíî©i⁄
 != generation) {

674 
	`k¥ötf
("%5zu bytesát %p,állocatedát %p\n",

675 
blocksize
, (*)
blockaddr
, (*)
ml
->
œbñ
);

677 
	}
}

681 
	$dump_sub∑ges
(
gíî©i⁄
)

683 
∑gîef
 *
¥
;

684 
i
;

686 
	`k¥ötf
("RemaöögáŒoˇti⁄†‰om gíî©i⁄ %u:\n", 
gíî©i⁄
);

687 
i
=0; i<
NSIZES
; i++) {

688 
¥
 = 
sizeba£s
[
i
];Ö∏!
NULL
;Ö∏¥->
√xt_ßmesize
) {

689 
	`dump_sub∑ge
(
¥
, 
gíî©i⁄
);

692 
	}
}

696 
	#LABEL_OVERHEAD
 0

	)

701 
	$khóp_√xtgíî©i⁄
()

703 #ifde‡
LABELS


704 
	`•ölock_acquúe
(&
kmÆloc_•ölock
);

705 
mÆlocgíî©i⁄
++;

706 
	`•ölock_ªÀa£
(&
kmÆloc_•ölock
);

708 
	}
}

711 
	$khóp_dump
()

713 #ifde‡
LABELS


715 
	`•ölock_acquúe
(&
kmÆloc_•ölock
);

716 
	`dump_sub∑ges
(
mÆlocgíî©i⁄
);

717 
	`•ölock_ªÀa£
(&
kmÆloc_•ölock
);

719 
	`k¥ötf
("Enable LABELS in kmalloc.cÅo useÅhis functionality.\n");

721 
	}
}

724 
	$khóp_dum∑Œ
()

726 #ifde‡
LABELS


727 
i
;

730 
	`•ölock_acquúe
(&
kmÆloc_•ölock
);

731 
i
=0; i<=
mÆlocgíî©i⁄
; i++) {

732 
	`dump_sub∑ges
(
i
);

734 
	`•ölock_ªÀa£
(&
kmÆloc_•ölock
);

736 
	`k¥ötf
("Enable LABELS in kmalloc.cÅo useÅhis functionality.\n");

738 
	}
}

747 
	$sub∑ge_°©s
(
∑gîef
 *
¥
)

749 
vaddr_t
 
¥∑ge
, 
Êa
;

750 
‰ìli°
 *
Ê
;

751 
blkty≥
;

752 
i
, 
n
, 
ödex
;

753 
uöt32_t
 
‰ìm≠
[
PAGE_SIZE
 / (
SMALLEST_SUBPAGE_SIZE
*32)];

755 
	`checksub∑ge
(
¥
);

756 
	`KASSERT
(
	`•ölock_do_i_hﬁd
(&
kmÆloc_•ölock
));

759 
i
=0; i<
	`ARRAYCOUNT
(
‰ìm≠
); i++) {

760 
‰ìm≠
[
i
] = 0;

763 
¥∑ge
 = 
	`PR_PAGEADDR
(
¥
);

764 
blkty≥
 = 
	`PR_BLOCKTYPE
(
¥
);

765 
	`KASSERT
(
blkty≥
 >0 && blkty≥ < 
NSIZES
);

768 
n
 = 
PAGE_SIZE
 / 
sizes
[
blkty≥
];

769 
	`KASSERT
(
n
 <32 * 
	`ARRAYCOUNT
(
‰ìm≠
));

771 i‡(
¥
->
‰ìli°_off£t
 !
INVALID_OFFSET
) {

772 
Êa
 = 
¥∑ge
 + 
¥
->
‰ìli°_off£t
;

773 
Ê
 = (
‰ìli°
 *)
Êa
;

775 ; 
Ê
 !
NULL
; f»Ê->
√xt
) {

776 
Êa
 = (
vaddr_t
)
Ê
;

777 
ödex
 = (
Êa
-
¥∑ge
Ë/ 
sizes
[
blkty≥
];

778 
	`KASSERT
(
ödex
<
n
);

779 
‰ìm≠
[
ödex
/32] |= (1<<(index%32));

783 
	`k¥ötf
("at 0x%08lx: size %-4lu %u/%u free\n",

784 ()
¥∑ge
, (Ë
sizes
[
blkty≥
],

785 (Ë
¥
->
n‰ì
, 
n
);

786 
	`k¥ötf
(" ");

787 
i
=0; i<
n
; i++) {

788 
vÆ
 = (
‰ìm≠
[
i
/32] & (1<<(i%32)))!=0;

789 
	`k¥ötf
("%c", 
vÆ
 ? '.' : '*');

790 i‡(
i
%64==63 && i<
n
-1) {

791 
	`k¥ötf
("\n ");

794 
	`k¥ötf
("\n");

795 
	}
}

801 
	$khóp_¥öt°©s
()

803 
∑gîef
 *
¥
;

806 
	`•ölock_acquúe
(&
kmÆloc_•ölock
);

808 
	`k¥ötf
("Subpageállocator status:\n");

810 
¥
 = 
Ælba£
;Ö∏!
NULL
;Ö∏¥->
√xt_Æl
) {

811 
	`sub∑ge_°©s
(
¥
);

814 
	`•ölock_ªÀa£
(&
kmÆloc_•ölock
);

815 
	}
}

824 
	$ªmove_li°s
(
∑gîef
 *
¥
, 
blkty≥
)

826 
∑gîef
 **
guy
;

828 
	`KASSERT
(
blkty≥
>=0 && blkty≥<
NSIZES
);

830 
guy
 = &
sizeba£s
[
blkty≥
]; *guy; guy = &(*guy)->
√xt_ßmesize
) {

831 
	`checksub∑ge
(*
guy
);

832 i‡(*
guy
 =
¥
) {

833 *
guy
 = 
¥
->
√xt_ßmesize
;

838 
guy
 = &
Ælba£
; *guy; guy = &(*guy)->
√xt_Æl
) {

839 
	`checksub∑ge
(*
guy
);

840 i‡(*
guy
 =
¥
) {

841 *
guy
 = 
¥
->
√xt_Æl
;

845 
	}
}

852 
ölöe


853 
	$blockty≥
(
size_t
 
˛õ¡sz
)

855 
i
;

856 
i
=0; i<
NSIZES
; i++) {

857 i‡(
˛õ¡sz
 <
sizes
[
i
]) {

858  
i
;

862 
	`∑nic
("Subpageállocator cannot handleállocation of size %zu\n",

863 
˛õ¡sz
);

867 
	}
}

875 
sub∑ge_kmÆloc
(
size_t
 
sz


876 #ifde‡
LABELS


877 , 
vaddr_t
 
œbñ


881 
	gblkty≥
;

882 
∑gîef
 *
	g¥
;

883 
vaddr_t
 
	g¥∑ge
;

884 
vaddr_t
 
	gÊa
;

885 
‰ìli°
 *vﬁ©ûê
	gÊ
;

886 *
	gªçå
;

888 vﬁ©ûê
	gi
;

890 #ifde‡
GUARDS


891 
size_t
 
	g˛õ¡sz
;

894 #ifde‡
GUARDS


895 
	g˛õ¡sz
 = 
sz
;

896 
	gsz
 +
GUARD_OVERHEAD
;

898 #ifde‡
LABELS


899 #ifde‡
GUARDS


901 
	g˛õ¡sz
 +
LABEL_PTROFFSET
;

903 
	gsz
 +
LABEL_PTROFFSET
;

905 
	gblkty≥
 = 
blockty≥
(
sz
);

906 
	gsz
 = 
sizes
[
blkty≥
];

908 
•ölock_acquúe
(&
kmÆloc_•ölock
);

910 
checksub∑ges
();

912 
	g¥
 = 
sizeba£s
[
blkty≥
];Ö∏!
NULL
;Ö∏
¥
->
√xt_ßmesize
) {

915 
KASSERT
(
PR_BLOCKTYPE
(
¥
Ë=
blkty≥
);

916 
checksub∑ge
(
¥
);

918 i‡(
	g¥
->
	gn‰ì
 > 0) {

920 
	gdﬂŒoc
:

922 
KASSERT
(
¥
->
‰ìli°_off£t
 < 
PAGE_SIZE
);

923 
	g¥∑ge
 = 
PR_PAGEADDR
(
¥
);

924 
	gÊa
 = 
¥∑ge
 + 
¥
->
‰ìli°_off£t
;

925 
	gÊ
 = (
‰ìli°
 *)
Êa
;

927 
	gªçå
 = 
Ê
;

928 
	gÊ
 = 
Ê
->
√xt
;

929 
	g¥
->
	gn‰ì
--;

931 i‡(
	gÊ
 !
NULL
) {

932 
KASSERT
(
¥
->
n‰ì
 > 0);

933 
	gÊa
 = (
vaddr_t
)
Ê
;

934 
KASSERT
(
Êa
 - 
¥∑ge
 < 
PAGE_SIZE
);

935 
	g¥
->
	g‰ìli°_off£t
 = 
Êa
 - 
¥∑ge
;

938 
KASSERT
(
¥
->
n‰ì
 == 0);

939 
	g¥
->
	g‰ìli°_off£t
 = 
INVALID_OFFSET
;

941 #ifde‡
GUARDS


942 
	gªçå
 = 
e°ablishgu¨db™d
(
ªçå
, 
˛õ¡sz
, 
sz
);

944 #ifde‡
LABELS


945 
	gªçå
 = 
e°ablishœbñ
(
ªçå
, 
œbñ
);

948 
checksub∑ges
();

950 
•ölock_ªÀa£
(&
kmÆloc_•ölock
);

951  
	gªçå
;

964 
•ölock_ªÀa£
(&
kmÆloc_•ölock
);

965 
	g¥∑ge
 = 
Æloc_k∑ges
(1);

966 i‡(
	g¥∑ge
==0) {

968 
k¥ötf
("kmalloc: Subpageállocator couldn't getáÖage\n");

969  
	gNULL
;

971 
KASSERT
(
¥∑ge
 % 
PAGE_SIZE
 == 0);

972 #ifde‡
CHECKBEEF


974 
fûl_dódbìf
((*)
¥∑ge
, 
PAGE_SIZE
);

976 
•ölock_acquúe
(&
kmÆloc_•ölock
);

978 
	g¥
 = 
Ælo˝agîef
();

979 i‡(
	g¥
==
NULL
) {

981 
•ölock_ªÀa£
(&
kmÆloc_•ölock
);

982 
‰ì_k∑ges
(
¥∑ge
);

983 
k¥ötf
("kmalloc: Subpageállocator couldn't getÖageref\n");

984  
	gNULL
;

987 
	g¥
->
	g∑góddr_™d_blockty≥
 = 
MKPAB
(
¥∑ge
, 
blkty≥
);

988 
	g¥
->
	gn‰ì
 = 
PAGE_SIZE
 / 
sizes
[
blkty≥
];

996 
	gÊa
 = 
¥∑ge
;

997 
	gÊ
 = (
‰ìli°
 *)
Êa
;

998 
	gÊ
->
	g√xt
 = 
NULL
;

999 
	gi
=1; i<
	g¥
->
	gn‰ì
; i++) {

1000 
	gÊ
 = (
‰ìli°
 *)(
Êa
 + 
i
*
sizes
[
blkty≥
]);

1001 
	gÊ
->
	g√xt
 = (
‰ìli°
 *)(
Êa
 + (
i
-1)*
sizes
[
blkty≥
]);

1002 
KASSERT
(
Ê
 !Ê->
√xt
);

1004 
	gÊa
 = (
vaddr_t
Ë
Ê
;

1005 
	g¥
->
	g‰ìli°_off£t
 = 
Êa
 - 
¥∑ge
;

1006 
KASSERT
(
¥
->
‰ìli°_off£t
 =’r->
n‰ì
-1)*
sizes
[
blkty≥
]);

1008 
	g¥
->
	g√xt_ßmesize
 = 
sizeba£s
[
blkty≥
];

1009 
	gsizeba£s
[
blkty≥
] = 
¥
;

1011 
	g¥
->
	g√xt_Æl
 = 
Ælba£
;

1012 
	gÆlba£
 = 
¥
;

1015 
	gdﬂŒoc
;

1024 
	$sub∑ge_k‰ì
(*
±r
)

1026 
blkty≥
;

1027 
vaddr_t
 
±øddr
;

1028 
∑gîef
 *
¥
;

1029 
vaddr_t
 
¥∑ge
;

1030 
vaddr_t
 
Êa
;

1031 
‰ìli°
 *
Ê
;

1032 
vaddr_t
 
off£t
;

1033 #ifde‡
GUARDS


1034 
size_t
 
blocksize
, 
smÆÀrblocksize
;

1037 
±øddr
 = (
vaddr_t
)
±r
;

1038 #ifde‡
GUARDS


1039 i‡(
±øddr
 % 
PAGE_SIZE
 == 0) {

1052 
±øddr
 -
GUARD_PTROFFSET
;

1054 #ifde‡
LABELS


1055 i‡(
±øddr
 % 
PAGE_SIZE
 == 0) {

1059 
±øddr
 -
LABEL_PTROFFSET
;

1062 
	`•ölock_acquúe
(&
kmÆloc_•ölock
);

1064 
	`checksub∑ges
();

1066 
¥
 = 
Ælba£
;Ör;Ö∏¥->
√xt_Æl
) {

1067 
¥∑ge
 = 
	`PR_PAGEADDR
(
¥
);

1068 
blkty≥
 = 
	`PR_BLOCKTYPE
(
¥
);

1069 
	`KASSERT
(
blkty≥
 >0 && blkty≥ < 
NSIZES
);

1072 
	`KASSERT
(
blkty≥
>=0 && blkty≥<
NSIZES
);

1073 
	`checksub∑ge
(
¥
);

1075 i‡(
±øddr
 >
¥∑ge
 &&Öåadd∏<ÖΩagê+ 
PAGE_SIZE
) {

1080 i‡(
¥
==
NULL
) {

1082 
	`•ölock_ªÀa£
(&
kmÆloc_•ölock
);

1086 
off£t
 = 
±øddr
 - 
¥∑ge
;

1089 i‡(
off£t
 >
PAGE_SIZE
 || off£à% 
sizes
[
blkty≥
] != 0) {

1090 
	`∑nic
("k‰ì: sub∑gê‰ì o‡övÆidádd∏%p\n", 
±r
);

1093 #ifde‡
GUARDS


1094 
blocksize
 = 
sizes
[
blkty≥
];

1095 
smÆÀrblocksize
 = 
blkty≥
 > 0 ? 
sizes
[blktype - 1] : 0;

1096 
	`checkgu¨db™d
(
±øddr
, 
smÆÀrblocksize
, 
blocksize
);

1103 
	`fûl_dódbìf
((*)
±øddr
, 
sizes
[
blkty≥
]);

1110 
Êa
 = 
¥∑ge
 + 
off£t
;

1111 
Ê
 = (
‰ìli°
 *)
Êa
;

1112 i‡(
¥
->
‰ìli°_off£t
 =
INVALID_OFFSET
) {

1113 
Ê
->
√xt
 = 
NULL
;

1115 
Ê
->
√xt
 = (
‰ìli°
 *)(
¥∑ge
 + 
¥
->
‰ìli°_off£t
);

1118 #ifde‡
SLOW


1120 
‰ìli°
 *
Ê2
;

1122 
Ê2
 = 
Ê
->
√xt
; fl2 !
NULL
; fl2 = fl2->next) {

1123 
	`KASSERT
(
Ê2
 !
Ê
);

1128 
	`KASSERT
(
Ê
 !Ê->
√xt
);

1131 
¥
->
‰ìli°_off£t
 = 
off£t
;

1132 
¥
->
n‰ì
++;

1134 
	`KASSERT
(
¥
->
n‰ì
 <
PAGE_SIZE
 / 
sizes
[
blkty≥
]);

1135 i‡(
¥
->
n‰ì
 =
PAGE_SIZE
 / 
sizes
[
blkty≥
]) {

1137 
	`ªmove_li°s
(
¥
, 
blkty≥
);

1138 
	`‰ì∑gîef
(
¥
);

1140 
	`•ölock_ªÀa£
(&
kmÆloc_•ölock
);

1141 
	`‰ì_k∑ges
(
¥∑ge
);

1144 
	`•ölock_ªÀa£
(&
kmÆloc_•ölock
);

1147 #ifde‡
SLOWER


1148 
	`•ölock_acquúe
(&
kmÆloc_•ölock
);

1149 
	`checksub∑ges
();

1150 
	`•ölock_ªÀa£
(&
kmÆloc_•ölock
);

1154 
	}
}

1164 
	$kmÆloc
(
size_t
 
sz
)

1166 
size_t
 
checksz
;

1167 #ifde‡
LABELS


1168 
vaddr_t
 
œbñ
;

1171 #ifde‡
LABELS


1172 #ifde‡
__GNUC__


1173 
œbñ
 = (
vaddr_t
)
	`__buûtö_ªtu∫_addªss
(0);

1179 
checksz
 = 
sz
 + 
GUARD_OVERHEAD
 + 
LABEL_OVERHEAD
;

1180 i‡(
checksz
 >
LARGEST_SUBPAGE_SIZE
) {

1181 
≈ages
;

1182 
vaddr_t
 
addªss
;

1185 
≈ages
 = (
sz
 + 
PAGE_SIZE
 - 1)/PAGE_SIZE;

1186 
addªss
 = 
	`Æloc_k∑ges
(
≈ages
);

1187 i‡(
addªss
==0) {

1188  
NULL
;

1190 
	`KASSERT
(
addªss
 % 
PAGE_SIZE
 == 0);

1192  (*)
addªss
;

1195 #ifde‡
LABELS


1196  
	`sub∑ge_kmÆloc
(
sz
, 
œbñ
);

1198  
	`sub∑ge_kmÆloc
(
sz
);

1200 
	}
}

1206 
	$k‰ì
(*
±r
)

1211 i‡(
±r
 =
NULL
) {

1213 } i‡(
	`sub∑ge_k‰ì
(
±r
)) {

1214 
	`KASSERT
((
vaddr_t
)
±r
%
PAGE_SIZE
==0);

1215 
	`‰ì_k∑ges
((
vaddr_t
)
±r
);

1217 
	}
}

	@
1
.
0
329
8382
arch/mips/include/current.h
arch/mips/include/elf.h
arch/mips/include/kern/endian.h
arch/mips/include/kern/regdefs.h
arch/mips/include/kern/setjmp.h
arch/mips/include/kern/signal.h
arch/mips/include/kern/types.h
arch/mips/include/membar.h
arch/mips/include/specialreg.h
arch/mips/include/spinlock.h
arch/mips/include/thread.h
arch/mips/include/tlb.h
arch/mips/include/trapframe.h
arch/mips/include/types.h
arch/mips/include/vm.h
arch/mips/locore/cache-mips161.S
arch/mips/locore/exception-mips1.S
arch/mips/locore/trap.c
arch/mips/syscall/syscall.c
arch/mips/thread/cpu.c
arch/mips/thread/switch.S
arch/mips/thread/switchframe.c
arch/mips/thread/switchframe.h
arch/mips/thread/thread_machdep.c
arch/mips/thread/threadstart.S
arch/mips/vm/dumbvm.c
arch/mips/vm/ram.c
arch/mips/vm/tlb-mips161.S
arch/sys161/dev/lamebus_machdep.c
arch/sys161/include/bus.h
arch/sys161/include/maxcpus.h
arch/sys161/main/start.S
compile/DUMBVM/.depend.__printf.c
compile/DUMBVM/.depend.adddi3.c
compile/DUMBVM/.depend.anddi3.c
compile/DUMBVM/.depend.array.c
compile/DUMBVM/.depend.arraytest.c
compile/DUMBVM/.depend.ashldi3.c
compile/DUMBVM/.depend.ashrdi3.c
compile/DUMBVM/.depend.atoi.c
compile/DUMBVM/.depend.autoconf.c
compile/DUMBVM/.depend.beep.c
compile/DUMBVM/.depend.beep_ltimer.c
compile/DUMBVM/.depend.bitmap.c
compile/DUMBVM/.depend.bitmaptest.c
compile/DUMBVM/.depend.bswap.c
compile/DUMBVM/.depend.bzero.c
compile/DUMBVM/.depend.cache-mips161.S
compile/DUMBVM/.depend.clock.c
compile/DUMBVM/.depend.cmpdi2.c
compile/DUMBVM/.depend.con_lser.c
compile/DUMBVM/.depend.console.c
compile/DUMBVM/.depend.copyinout.c
compile/DUMBVM/.depend.cpu.c
compile/DUMBVM/.depend.device.c
compile/DUMBVM/.depend.devnull.c
compile/DUMBVM/.depend.divdi3.c
compile/DUMBVM/.depend.dumbvm.c
compile/DUMBVM/.depend.emu.c
compile/DUMBVM/.depend.emu_att.c
compile/DUMBVM/.depend.exception-mips1.S
compile/DUMBVM/.depend.filetable.c
compile/DUMBVM/.depend.fstest.c
compile/DUMBVM/.depend.iordi3.c
compile/DUMBVM/.depend.kgets.c
compile/DUMBVM/.depend.kmalloc.c
compile/DUMBVM/.depend.kprintf.c
compile/DUMBVM/.depend.lamebus.c
compile/DUMBVM/.depend.lamebus_machdep.c
compile/DUMBVM/.depend.lhd.c
compile/DUMBVM/.depend.lhd_att.c
compile/DUMBVM/.depend.loadelf.c
compile/DUMBVM/.depend.lrandom.c
compile/DUMBVM/.depend.lrandom_att.c
compile/DUMBVM/.depend.lser.c
compile/DUMBVM/.depend.lser_att.c
compile/DUMBVM/.depend.lshldi3.c
compile/DUMBVM/.depend.lshrdi3.c
compile/DUMBVM/.depend.ltimer.c
compile/DUMBVM/.depend.ltimer_att.c
compile/DUMBVM/.depend.ltrace.c
compile/DUMBVM/.depend.ltrace_att.c
compile/DUMBVM/.depend.main.c
compile/DUMBVM/.depend.malloctest.c
compile/DUMBVM/.depend.memcpy.c
compile/DUMBVM/.depend.memmove.c
compile/DUMBVM/.depend.memset.c
compile/DUMBVM/.depend.menu.c
compile/DUMBVM/.depend.misc.c
compile/DUMBVM/.depend.moddi3.c
compile/DUMBVM/.depend.muldi3.c
compile/DUMBVM/.depend.negdi2.c
compile/DUMBVM/.depend.notdi2.c
compile/DUMBVM/.depend.proc.c
compile/DUMBVM/.depend.qdivrem.c
compile/DUMBVM/.depend.ram.c
compile/DUMBVM/.depend.random.c
compile/DUMBVM/.depend.random_lrandom.c
compile/DUMBVM/.depend.rtclock.c
compile/DUMBVM/.depend.rtclock_ltimer.c
compile/DUMBVM/.depend.runprogram.c
compile/DUMBVM/.depend.semfs_fsops.c
compile/DUMBVM/.depend.semfs_obj.c
compile/DUMBVM/.depend.semfs_vnops.c
compile/DUMBVM/.depend.setjmp.S
compile/DUMBVM/.depend.sfs_balloc.c
compile/DUMBVM/.depend.sfs_bmap.c
compile/DUMBVM/.depend.sfs_dir.c
compile/DUMBVM/.depend.sfs_fsops.c
compile/DUMBVM/.depend.sfs_inode.c
compile/DUMBVM/.depend.sfs_io.c
compile/DUMBVM/.depend.sfs_vnops.c
compile/DUMBVM/.depend.snprintf.c
compile/DUMBVM/.depend.spinlock.c
compile/DUMBVM/.depend.spl.c
compile/DUMBVM/.depend.start.S
compile/DUMBVM/.depend.strcat.c
compile/DUMBVM/.depend.strchr.c
compile/DUMBVM/.depend.strcmp.c
compile/DUMBVM/.depend.strcpy.c
compile/DUMBVM/.depend.strlen.c
compile/DUMBVM/.depend.strrchr.c
compile/DUMBVM/.depend.strtok_r.c
compile/DUMBVM/.depend.subdi3.c
compile/DUMBVM/.depend.switch.S
compile/DUMBVM/.depend.switchframe.c
compile/DUMBVM/.depend.synch.c
compile/DUMBVM/.depend.synchtest.c
compile/DUMBVM/.depend.sys___getcwd.c
compile/DUMBVM/.depend.sys_chdir.c
compile/DUMBVM/.depend.sys_close.c
compile/DUMBVM/.depend.sys_dup2.c
compile/DUMBVM/.depend.sys_lseek.c
compile/DUMBVM/.depend.sys_open.c
compile/DUMBVM/.depend.sys_read.c
compile/DUMBVM/.depend.sys_write.c
compile/DUMBVM/.depend.syscall.c
compile/DUMBVM/.depend.thread.c
compile/DUMBVM/.depend.thread_machdep.c
compile/DUMBVM/.depend.threadlist.c
compile/DUMBVM/.depend.threadlisttest.c
compile/DUMBVM/.depend.threadstart.S
compile/DUMBVM/.depend.threadtest.c
compile/DUMBVM/.depend.time.c
compile/DUMBVM/.depend.time_syscalls.c
compile/DUMBVM/.depend.tlb-mips161.S
compile/DUMBVM/.depend.trap.c
compile/DUMBVM/.depend.tt3.c
compile/DUMBVM/.depend.ucmpdi2.c
compile/DUMBVM/.depend.udivdi3.c
compile/DUMBVM/.depend.uio.c
compile/DUMBVM/.depend.umoddi3.c
compile/DUMBVM/.depend.vfscwd.c
compile/DUMBVM/.depend.vfsfail.c
compile/DUMBVM/.depend.vfslist.c
compile/DUMBVM/.depend.vfslookup.c
compile/DUMBVM/.depend.vfspath.c
compile/DUMBVM/.depend.vnode.c
compile/DUMBVM/.depend.xordi3.c
compile/DUMBVM/autoconf.c
compile/DUMBVM/autoconf.h
compile/DUMBVM/opt-dumbvm.h
compile/DUMBVM/opt-net.h
compile/DUMBVM/opt-netfs.h
compile/DUMBVM/opt-noasserts.h
compile/DUMBVM/opt-semfs.h
compile/DUMBVM/opt-sfs.h
compile/DUMBVM/opt-synchprobs.h
compile/DUMBVM/vers.c
dev/generic/beep.c
dev/generic/beep.h
dev/generic/console.c
dev/generic/console.h
dev/generic/random.c
dev/generic/random.h
dev/generic/rtclock.c
dev/generic/rtclock.h
dev/lamebus/beep_ltimer.c
dev/lamebus/con_lscreen.c
dev/lamebus/con_lser.c
dev/lamebus/emu.c
dev/lamebus/emu.h
dev/lamebus/emu_att.c
dev/lamebus/lamebus.c
dev/lamebus/lamebus.h
dev/lamebus/lhd.c
dev/lamebus/lhd.h
dev/lamebus/lhd_att.c
dev/lamebus/lnet.c
dev/lamebus/lnet_att.c
dev/lamebus/lrandom.c
dev/lamebus/lrandom.h
dev/lamebus/lrandom_att.c
dev/lamebus/lscreen.c
dev/lamebus/lscreen.h
dev/lamebus/lscreen_att.c
dev/lamebus/lser.c
dev/lamebus/lser.h
dev/lamebus/lser_att.c
dev/lamebus/ltimer.c
dev/lamebus/ltimer.h
dev/lamebus/ltimer_att.c
dev/lamebus/ltrace.c
dev/lamebus/ltrace.h
dev/lamebus/ltrace_att.c
dev/lamebus/random_lrandom.c
dev/lamebus/rtclock_ltimer.c
filetable/filetable.c
fs/semfs/semfs.h
fs/semfs/semfs_fsops.c
fs/semfs/semfs_obj.c
fs/semfs/semfs_vnops.c
fs/sfs/sfs_balloc.c
fs/sfs/sfs_bmap.c
fs/sfs/sfs_dir.c
fs/sfs/sfs_fsops.c
fs/sfs/sfs_inode.c
fs/sfs/sfs_io.c
fs/sfs/sfs_vnops.c
fs/sfs/sfsprivate.h
include/addrspace.h
include/array.h
include/bitmap.h
include/cdefs.h
include/clock.h
include/copyinout.h
include/cpu.h
include/current.h
include/device.h
include/elf.h
include/emufs.h
include/endian.h
include/filetable.h
include/fs.h
include/kern/endian.h
include/kern/errmsg.h
include/kern/errno.h
include/kern/fcntl.h
include/kern/ioctl.h
include/kern/iovec.h
include/kern/limits.h
include/kern/reboot.h
include/kern/resource.h
include/kern/seek.h
include/kern/sfs.h
include/kern/signal.h
include/kern/socket.h
include/kern/stat.h
include/kern/stattypes.h
include/kern/syscall.h
include/kern/time.h
include/kern/types.h
include/kern/unistd.h
include/kern/wait.h
include/lib.h
include/limits.h
include/mainbus.h
include/membar.h
include/proc.h
include/setjmp.h
include/sfs.h
include/signal.h
include/spinlock.h
include/spl.h
include/stat.h
include/stdarg.h
include/synch.h
include/syscall.h
include/test.h
include/thread.h
include/threadlist.h
include/threadprivate.h
include/types.h
include/uio.h
include/version.h
include/vfs.h
include/vm.h
include/vnode.h
include/wchan.h
lib/array.c
lib/bitmap.c
lib/bswap.c
lib/kgets.c
lib/kprintf.c
lib/misc.c
lib/time.c
lib/uio.c
main/main.c
main/menu.c
proc/proc.c
synchprobs/airballoon.c
syscall/loadelf.c
syscall/runprogram.c
syscall/sys___getcwd.c
syscall/sys_chdir.c
syscall/sys_close.c
syscall/sys_dup2.c
syscall/sys_lseek.c
syscall/sys_open.c
syscall/sys_read.c
syscall/sys_write.c
syscall/time_syscalls.c
test/arraytest.c
test/bitmaptest.c
test/fstest.c
test/kmalloctest.c
test/malloctest.c
test/nettest.c
test/synchtest.c
test/threadlisttest.c
test/threadtest.c
test/tt3.c
thread/clock.c
thread/spinlock.c
thread/spl.c
thread/synch.c
thread/thread.c
thread/threadlist.c
vfs/device.c
vfs/devnull.c
vfs/vfscwd.c
vfs/vfsfail.c
vfs/vfslist.c
vfs/vfslookup.c
vfs/vfspath.c
vfs/vnode.c
vm/addrspace.c
vm/copyinout.c
vm/kmalloc.c
