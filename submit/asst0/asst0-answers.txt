Output from git commands


1.output of sys161 kernel:

sys161: System/161 release 2.0.3, compiled Aug  5 2015 14:02:38

OS/161 base system version 1.99.08
Copyright (c) 2000, 2001-2005, 2008-2011, 2013, 2014
   President and Fellows of Harvard College.  All rights reserved.

Put-your-group-name-here's system version 0 (DUMBVM #1)

292k physical memory available
Device probe...
lamebus0 (system main bus)
emu0 at lamebus0
ltrace0 at lamebus0
ltimer0 at lamebus0
beep0 at ltimer0
rtclock0 at ltimer0
lrandom0 at lamebus0
random0 at lrandom0
lhd0 at lamebus0
lhd1 at lamebus0
lser0 at lamebus0
con0 at lser0

cpu0: MIPS/161 (System/161 2.x) features 0x0
OS/161 kernel [? for menu]: 


2. output of git log:

commit 3f25642211516b33b464f7852810cbf338d81f03
Author: wusling <helenzhang250@gmail.com>
Date:   Thu Sep 7 17:16:25 2017 -0400

    Initial commit of os161 for CPEN331


output of git tag:

asst0-start


Code reading exercise:


Question 1:
First, the trap will raise an exception, which is handled by 
"~/os161/src/kern/arch/mips/locore/exception-mips1.S", naturally transfering the control from the 
user to the operating system. The exception handler does some preparation such as saving the 
existing information in the registers before calling the trap handler. It calls the function "void
mips_trap(struct trapframe *tf)" in "~/os161/src/kern/arch/mips/locore/trap.c" on line 260 
"jal mips_trap". The trap handler will examine whether the trap is a system call or an interrupt or 
something unknown, and calls the appropriate handler. Interrupt has its own error code so that it
is easily differentiable. When an interrupt causes a trap, the trap handler will "call the interrupt 
handler and return" as the comment in trap.c says.

Question 2:
When a system call is used by the user, "~/os161/src/build/userland/lib/libc/syscalls.S" is called. 
According to the comments starting on line 46, the syscall number is loaded into v0 and jump to 
the shared syscall code (line 84 in this file). Line 85 "syscall" does the actual system calling 
and invokes trap. Also, according to the comments in the files, syscalls.S is copied from
"~/os161/src/userland/lib/libc/arch/mips/syscalls-mips.S", "and then the actual syscalls are appended 
as lines of the form SYSCALL(symbol, number)" in line 97 to 182. The SYSCALL function is called with
corresponding parameters stored in registers.

Question 3:
The libc functions in the "common" part is shared by the kernel and the user program. This folder 
doesn't have to include all the c library functions that the user will use. It can be kept clean for 
the kernel. Also, we will be able to access these library functions when we build the kernel. It's 
good for debugging. On the other hand, the libc functions in "userland" are only used by the user 
programs. The user can import more c library functions if needed.

Question 4:
It configures "target hardware platform and machine type" and "default location of the root of the 
installed system". The configuration is invalidated if the file name of the root is changed.

Question 5:
Different machines have different hardware, for example, the number of processors. The implementation 
of some functions are dependent on the hardware. It's important to maintain the separation so that 
we don't need to change all the code when we switch to a different machine; we can just change the 
functions that are affected. By using modularity, the OS codes can be easily used on different machines.

Question 6:
The size of the trapframe is 37 registers (uint32_t registers, 4 bytes each) long. In 
"~/os161/src/kern/arch/mips/include/trapframe.h", the trapframe is defined with 37 registers. 
Also, in "~/os161/src/kern/arch/mips/locore/trap.c", it is commented above an assert statement (line 
133) that "trap frame is supposed to be 37 registers long. 

Question 7:
We should rerun configure if we moved the source tree to a different computer that is running a 
different OS.

Question 8:
We should rerun bmake depend when we change header file inclusions, or after re-running config. 

Question 9:
We should rerun bmake when we want to recompile the kernel. We should rerun bmake install if we want
to copy the kernel to the root folder.

Question 10:
We need to add code in "~/os161/src/kern/main/menu.c". First, we need to add the command to the 
list "static const char *opsmenu[]", in the format of"[(command to be typed) Print hello world]". 
Then, we need to create a function as the following: 
static int cmd_hello(void)
{
	kprintf("Hello world!\n");
	return EINVAL;
}

Question 11:
The operating system needs to include these utilities so that the user can use these commands 
within the operating system. When the user is operating within the OS, the user will not have 
access to the standard utilities, which are outside of the OS.

Question 12:
The return value of the user's program is used as "exit status code". The OS interprets the return
value to determine if the user's program has exitted normally. 

Question 13:
First, we need to modify "~/os161/src/build/userland/lib/libc/syscalls.S" by adding the new definition of 
"SYSCALL(symbol, number)". Then, we need to modify "~/os161/src/kern/arch/mips/syscall/syscall.c" to
do the actual handling of the new system call. Definition of the call number can be added to syscall.h.
After the modification is done, we need to rerun bmake and bmake depend before testing the changes.
